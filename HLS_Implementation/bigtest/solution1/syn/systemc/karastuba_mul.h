// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _karastuba_mul_HH_
#define _karastuba_mul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "karastuba_mul_templa_3.h"
#include "karastuba_mul_temThq.h"
#include "karastuba_mul_resXh4.h"
#include "karastuba_mul_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct karastuba_mul : public sc_module {
    // Port declarations 26
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<64> > hs_input_V_TDATA;
    sc_in< sc_logic > hs_input_V_TVALID;
    sc_out< sc_logic > hs_input_V_TREADY;
    sc_out< sc_lv<64> > res_output_V_TDATA;
    sc_out< sc_logic > res_output_V_TVALID;
    sc_in< sc_logic > res_output_V_TREADY;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    karastuba_mul(sc_module_name name);
    SC_HAS_PROCESS(karastuba_mul);

    ~karastuba_mul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    karastuba_mul_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* karastuba_mul_AXILiteS_s_axi_U;
    karastuba_mul_temThq* lhs_digits_data_V_U;
    karastuba_mul_temThq* rhs_digits_data_V_U;
    karastuba_mul_resXh4* res_digits_data_V_U;
    karastuba_mul_templa_3* grp_karastuba_mul_templa_3_fu_168;
    regslice_both<64>* regslice_both_hs_input_V_U;
    regslice_both<64>* regslice_both_res_output_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > hs_input_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln317_fu_175_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln322_fu_192_p2;
    sc_signal< sc_logic > res_output_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<1> > icmp_ln331_reg_258;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter2;
    sc_signal< sc_lv<1> > icmp_ln331_reg_258_pp2_iter1_reg;
    sc_signal< sc_lv<8> > i1_0_reg_146;
    sc_signal< sc_lv<8> > i2_0_reg_157;
    sc_signal< sc_lv<7> > i_fu_181_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<1> > icmp_ln322_reg_239;
    sc_signal< bool > ap_block_state4_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<8> > add_ln325_fu_198_p2;
    sc_signal< sc_lv<8> > add_ln325_reg_243;
    sc_signal< sc_lv<64> > hs_input_V_read_1_reg_248;
    sc_signal< sc_lv<8> > i_24_fu_204_p2;
    sc_signal< sc_lv<1> > icmp_ln331_fu_214_p2;
    sc_signal< bool > ap_block_state8_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp2_stage0_iter1;
    sc_signal< bool > ap_block_state9_io;
    sc_signal< bool > ap_block_state10_pp2_stage0_iter2;
    sc_signal< bool > ap_block_state10_io;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<8> > i_25_fu_220_p2;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<64> > res_digits_data_V_q0;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state4;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_ap_ready;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_ap_done;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state8;
    sc_signal< sc_lv<6> > lhs_digits_data_V_address0;
    sc_signal< sc_logic > lhs_digits_data_V_ce0;
    sc_signal< sc_logic > lhs_digits_data_V_we0;
    sc_signal< sc_lv<64> > lhs_digits_data_V_q0;
    sc_signal< sc_lv<6> > rhs_digits_data_V_address0;
    sc_signal< sc_logic > rhs_digits_data_V_ce0;
    sc_signal< sc_logic > rhs_digits_data_V_we0;
    sc_signal< sc_lv<64> > rhs_digits_data_V_q0;
    sc_signal< sc_lv<7> > res_digits_data_V_address0;
    sc_signal< sc_logic > res_digits_data_V_ce0;
    sc_signal< sc_logic > res_digits_data_V_we0;
    sc_signal< sc_logic > res_digits_data_V_ce1;
    sc_signal< sc_logic > res_digits_data_V_we1;
    sc_signal< sc_lv<64> > res_digits_data_V_q1;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_ap_start;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_ap_idle;
    sc_signal< sc_lv<6> > grp_karastuba_mul_templa_3_fu_168_lhs_digits_data_V_address0;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_lhs_digits_data_V_ce0;
    sc_signal< sc_lv<6> > grp_karastuba_mul_templa_3_fu_168_rhs_digits_data_V_address0;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_rhs_digits_data_V_ce0;
    sc_signal< sc_lv<7> > grp_karastuba_mul_templa_3_fu_168_res_digits_data_V_address0;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_res_digits_data_V_ce0;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_res_digits_data_V_we0;
    sc_signal< sc_lv<64> > grp_karastuba_mul_templa_3_fu_168_res_digits_data_V_d0;
    sc_signal< sc_lv<7> > grp_karastuba_mul_templa_3_fu_168_res_digits_data_V_address1;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_res_digits_data_V_ce1;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_res_digits_data_V_we1;
    sc_signal< sc_lv<64> > grp_karastuba_mul_templa_3_fu_168_res_digits_data_V_d1;
    sc_signal< sc_lv<7> > i_0_reg_135;
    sc_signal< sc_logic > grp_karastuba_mul_templa_3_fu_168_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln320_fu_187_p1;
    sc_signal< sc_lv<64> > zext_ln325_fu_210_p1;
    sc_signal< sc_lv<64> > zext_ln334_fu_226_p1;
    sc_signal< bool > ap_block_pp2_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > regslice_both_res_output_V_U_apdone_blk;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    sc_signal< sc_logic > regslice_both_hs_input_V_U_apdone_blk;
    sc_signal< sc_lv<64> > hs_input_V_TDATA_int;
    sc_signal< sc_logic > hs_input_V_TVALID_int;
    sc_signal< sc_logic > hs_input_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_hs_input_V_U_ack_in;
    sc_signal< sc_logic > res_output_V_TVALID_int;
    sc_signal< sc_logic > res_output_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_res_output_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_pp1_stage0;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_pp2_stage0;
    static const sc_lv<8> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<8> ap_const_lv8_40;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_C0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_7;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln325_fu_198_p2();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_01001();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state10_io();
    void thread_ap_block_state10_pp2_stage0_iter2();
    void thread_ap_block_state2();
    void thread_ap_block_state4_pp1_stage0_iter0();
    void thread_ap_block_state5_pp1_stage0_iter1();
    void thread_ap_block_state8_pp2_stage0_iter0();
    void thread_ap_block_state9_io();
    void thread_ap_block_state9_pp2_stage0_iter1();
    void thread_ap_condition_pp1_exit_iter0_state4();
    void thread_ap_condition_pp2_exit_iter0_state8();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_grp_karastuba_mul_templa_3_fu_168_ap_start();
    void thread_hs_input_V_TDATA_blk_n();
    void thread_hs_input_V_TREADY();
    void thread_hs_input_V_TREADY_int();
    void thread_i_24_fu_204_p2();
    void thread_i_25_fu_220_p2();
    void thread_i_fu_181_p2();
    void thread_icmp_ln317_fu_175_p2();
    void thread_icmp_ln322_fu_192_p2();
    void thread_icmp_ln331_fu_214_p2();
    void thread_lhs_digits_data_V_address0();
    void thread_lhs_digits_data_V_ce0();
    void thread_lhs_digits_data_V_we0();
    void thread_res_digits_data_V_address0();
    void thread_res_digits_data_V_ce0();
    void thread_res_digits_data_V_ce1();
    void thread_res_digits_data_V_we0();
    void thread_res_digits_data_V_we1();
    void thread_res_output_V_TDATA_blk_n();
    void thread_res_output_V_TVALID();
    void thread_res_output_V_TVALID_int();
    void thread_rhs_digits_data_V_address0();
    void thread_rhs_digits_data_V_ce0();
    void thread_rhs_digits_data_V_we0();
    void thread_zext_ln320_fu_187_p1();
    void thread_zext_ln325_fu_210_p1();
    void thread_zext_ln334_fu_226_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
