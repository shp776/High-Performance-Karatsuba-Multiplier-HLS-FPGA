-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CAT_I_I_I_O is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x0_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x0_digits_data_ce0 : OUT STD_LOGIC;
    x0_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x1_tmp_bits_read : IN STD_LOGIC_VECTOR (6 downto 0);
    x1_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x1_digits_data_ce0 : OUT STD_LOGIC;
    x1_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x2_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x2_digits_data_ce0 : OUT STD_LOGIC;
    x2_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_digits_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_ce0 : OUT STD_LOGIC;
    w_digits_data_we0 : OUT STD_LOGIC;
    w_digits_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_digits_data_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_ce1 : OUT STD_LOGIC;
    w_digits_data_we1 : OUT STD_LOGIC;
    w_digits_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_digits_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CAT_I_I_I_O is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_0_reg_179 : STD_LOGIC_VECTOR (1 downto 0);
    signal j1_0_reg_191 : STD_LOGIC_VECTOR (4 downto 0);
    signal i2_0_reg_202 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_214 : STD_LOGIC_VECTOR (1 downto 0);
    signal j1_1_reg_226 : STD_LOGIC_VECTOR (5 downto 0);
    signal i3_0_reg_237 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln169_reg_499 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_249_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_249_pp1_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state14_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln185_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_265_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln162_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_277_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_484 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln164_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_reg_489 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln169_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_reg_499_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_reg_499_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_reg_499_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_reg_503 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal w_digits_data_addr_7_reg_508 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_addr_7_reg_508_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_addr_7_reg_508_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_addr_7_reg_508_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x1_digits_data_load_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln175_fu_324_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln175_reg_529 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln176_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_539 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal w_digits_data_addr_6_reg_544 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln180_1_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_1_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln185_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_554_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_554_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_554_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_393_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_11_reg_558 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal w_digits_data_addr_8_reg_563 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_addr_8_reg_563_pp1_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_addr_8_reg_563_pp1_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_addr_8_reg_563_pp1_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_fu_404_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal x2_digits_data_load_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln191_fu_423_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln191_reg_584 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln192_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln192_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln8_reg_594 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal j_0_reg_157 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_tmp_0_phi_fu_183_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i2_0_phi_fu_206_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_tmp_1_phi_fu_218_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i3_0_phi_fu_241_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln162_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_1_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln191_1_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln190_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_316_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln174_1_fu_320_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln175_2_fu_338_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln169_fu_330_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln174_2_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_1_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_341_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln180_fu_368_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln180_fu_372_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln180_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln191_fu_415_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln190_1_fu_419_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln191_2_fu_437_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln185_fu_429_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln190_2_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln192_1_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_440_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_271_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_271_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_271_p2 = ap_const_lv1_1))) then 
                i2_0_reg_202 <= ap_const_lv5_0;
            elsif (((icmp_ln169_reg_499 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i2_0_reg_202 <= i_10_reg_503;
            end if; 
        end if;
    end process;

    i3_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i3_0_reg_237 <= i_11_reg_558;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i3_0_reg_237 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_fu_254_p2 = ap_const_lv1_1))) then 
                i_0_reg_168 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_168 <= i_reg_484;
            end if; 
        end if;
    end process;

    j1_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_271_p2 = ap_const_lv1_1))) then 
                j1_0_reg_191 <= ap_const_lv5_8;
            elsif (((icmp_ln169_fu_288_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j1_0_reg_191 <= j_4_fu_305_p2;
            end if; 
        end if;
    end process;

    j1_1_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_387_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j1_1_reg_226 <= j_5_fu_404_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j1_1_reg_226 <= ap_const_lv6_10;
            end if; 
        end if;
    end process;

    j_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln162_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_157 <= j_fu_265_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_157 <= ap_const_lv6_10;
            end if; 
        end if;
    end process;

    reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_249 <= w_digits_data_q1;
            elsif ((((icmp_ln169_reg_499 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln185_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
                reg_249 <= w_digits_data_q0;
            end if; 
        end if;
    end process;

    tmp_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_271_p2 = ap_const_lv1_1))) then 
                tmp_0_reg_179 <= ap_const_lv2_0;
            elsif (((icmp_ln169_reg_499_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                tmp_0_reg_179 <= trunc_ln_reg_539;
            end if; 
        end if;
    end process;

    tmp_1_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_554_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_1_reg_214 <= trunc_ln8_reg_594;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                tmp_1_reg_214 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_reg_499_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln175_reg_529 <= add_ln175_fu_324_p2;
                x1_digits_data_load_reg_524 <= x1_digits_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_reg_499_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln176_reg_534 <= add_ln176_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln180_1_reg_549 <= add_ln180_1_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_554_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln191_reg_584 <= add_ln191_fu_423_p2;
                x2_digits_data_load_reg_579 <= x2_digits_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_554_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln192_reg_589 <= add_ln192_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_10_reg_503 <= i_10_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_11_reg_558 <= i_11_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_484 <= i_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln169_reg_499 <= icmp_ln169_fu_288_p2;
                icmp_ln169_reg_499_pp0_iter1_reg <= icmp_ln169_reg_499;
                w_digits_data_addr_7_reg_508_pp0_iter1_reg <= w_digits_data_addr_7_reg_508;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln169_reg_499_pp0_iter2_reg <= icmp_ln169_reg_499_pp0_iter1_reg;
                icmp_ln169_reg_499_pp0_iter3_reg <= icmp_ln169_reg_499_pp0_iter2_reg;
                reg_249_pp0_iter2_reg <= reg_249;
                w_digits_data_addr_7_reg_508_pp0_iter2_reg <= w_digits_data_addr_7_reg_508_pp0_iter1_reg;
                w_digits_data_addr_7_reg_508_pp0_iter3_reg <= w_digits_data_addr_7_reg_508_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln185_reg_554 <= icmp_ln185_fu_387_p2;
                icmp_ln185_reg_554_pp1_iter1_reg <= icmp_ln185_reg_554;
                w_digits_data_addr_8_reg_563_pp1_iter1_reg <= w_digits_data_addr_8_reg_563;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln185_reg_554_pp1_iter2_reg <= icmp_ln185_reg_554_pp1_iter1_reg;
                icmp_ln185_reg_554_pp1_iter3_reg <= icmp_ln185_reg_554_pp1_iter2_reg;
                reg_249_pp1_iter2_reg <= reg_249;
                w_digits_data_addr_8_reg_563_pp1_iter2_reg <= w_digits_data_addr_8_reg_563_pp1_iter1_reg;
                w_digits_data_addr_8_reg_563_pp1_iter3_reg <= w_digits_data_addr_8_reg_563_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_554_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln8_reg_594 <= tmp_7_fu_440_p2(33 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_reg_499_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                trunc_ln_reg_539 <= tmp_fu_341_p2(33 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_fu_288_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_digits_data_addr_7_reg_508 <= zext_ln175_1_fu_300_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_387_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                w_digits_data_addr_8_reg_563 <= zext_ln191_1_fu_399_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln164_reg_489(4 downto 0) <= zext_ln164_fu_283_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln164_reg_489(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, icmp_ln162_fu_254_p2, icmp_ln164_fu_271_p2, ap_CS_fsm_state3, icmp_ln169_fu_288_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, icmp_ln185_fu_387_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_fu_254_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_271_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln169_fu_288_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln169_fu_288_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln185_fu_387_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln185_fu_387_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln175_fu_324_p2 <= std_logic_vector(unsigned(zext_ln175_fu_316_p1) + unsigned(zext_ln174_1_fu_320_p1));
    add_ln176_1_fu_347_p2 <= std_logic_vector(unsigned(reg_249_pp0_iter2_reg) + unsigned(zext_ln174_2_fu_334_p1));
    add_ln176_fu_353_p2 <= std_logic_vector(unsigned(add_ln176_1_fu_347_p2) + unsigned(x1_digits_data_load_reg_524));
    add_ln180_1_fu_381_p2 <= std_logic_vector(unsigned(reg_249) + unsigned(sext_ln180_fu_377_p1));
    add_ln180_fu_372_p2 <= std_logic_vector(unsigned(x1_tmp_bits_read) + unsigned(zext_ln180_fu_368_p1));
    add_ln191_fu_423_p2 <= std_logic_vector(unsigned(zext_ln191_fu_415_p1) + unsigned(zext_ln190_1_fu_419_p1));
    add_ln192_1_fu_446_p2 <= std_logic_vector(unsigned(reg_249_pp1_iter2_reg) + unsigned(zext_ln190_2_fu_433_p1));
    add_ln192_fu_452_p2 <= std_logic_vector(unsigned(add_ln192_1_fu_446_p2) + unsigned(x2_digits_data_load_reg_579));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state19 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln169_fu_288_p2)
    begin
        if ((icmp_ln169_fu_288_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state14_assign_proc : process(icmp_ln185_fu_387_p2)
    begin
        if ((icmp_ln185_fu_387_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i2_0_phi_fu_206_p4_assign_proc : process(i2_0_reg_202, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln169_reg_499, i_10_reg_503, ap_block_pp0_stage0)
    begin
        if (((icmp_ln169_reg_499 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i2_0_phi_fu_206_p4 <= i_10_reg_503;
        else 
            ap_phi_mux_i2_0_phi_fu_206_p4 <= i2_0_reg_202;
        end if; 
    end process;


    ap_phi_mux_i3_0_phi_fu_241_p4_assign_proc : process(i3_0_reg_237, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln185_reg_554, i_11_reg_558, ap_block_pp1_stage0)
    begin
        if (((icmp_ln185_reg_554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i3_0_phi_fu_241_p4 <= i_11_reg_558;
        else 
            ap_phi_mux_i3_0_phi_fu_241_p4 <= i3_0_reg_237;
        end if; 
    end process;


    ap_phi_mux_tmp_0_phi_fu_183_p4_assign_proc : process(tmp_0_reg_179, icmp_ln169_reg_499_pp0_iter3_reg, trunc_ln_reg_539, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((icmp_ln169_reg_499_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_0_phi_fu_183_p4 <= trunc_ln_reg_539;
        else 
            ap_phi_mux_tmp_0_phi_fu_183_p4 <= tmp_0_reg_179;
        end if; 
    end process;


    ap_phi_mux_tmp_1_phi_fu_218_p4_assign_proc : process(tmp_1_reg_214, icmp_ln185_reg_554_pp1_iter3_reg, trunc_ln8_reg_594, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0)
    begin
        if (((icmp_ln185_reg_554_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_1_phi_fu_218_p4 <= trunc_ln8_reg_594;
        else 
            ap_phi_mux_tmp_1_phi_fu_218_p4 <= tmp_1_reg_214;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_10_fu_294_p2 <= std_logic_vector(unsigned(ap_phi_mux_i2_0_phi_fu_206_p4) + unsigned(ap_const_lv5_1));
    i_11_fu_393_p2 <= std_logic_vector(unsigned(ap_phi_mux_i3_0_phi_fu_241_p4) + unsigned(ap_const_lv5_1));
    i_fu_277_p2 <= std_logic_vector(unsigned(i_0_reg_168) + unsigned(ap_const_lv5_1));
    icmp_ln162_fu_254_p2 <= "1" when (j_0_reg_157 = ap_const_lv6_20) else "0";
    icmp_ln164_fu_271_p2 <= "1" when (i_0_reg_168 = ap_const_lv5_10) else "0";
    icmp_ln169_fu_288_p2 <= "1" when (ap_phi_mux_i2_0_phi_fu_206_p4 = ap_const_lv5_10) else "0";
    icmp_ln185_fu_387_p2 <= "1" when (ap_phi_mux_i3_0_phi_fu_241_p4 = ap_const_lv5_10) else "0";
    j_4_fu_305_p2 <= std_logic_vector(unsigned(j1_0_reg_191) + unsigned(ap_const_lv5_1));
    j_5_fu_404_p2 <= std_logic_vector(unsigned(j1_1_reg_226) + unsigned(ap_const_lv6_1));
    j_fu_265_p2 <= std_logic_vector(unsigned(j_0_reg_157) + unsigned(ap_const_lv6_1));
        sext_ln180_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln180_fu_372_p2),32));

    tmp_7_fu_440_p2 <= std_logic_vector(unsigned(zext_ln191_2_fu_437_p1) + unsigned(zext_ln185_fu_429_p1));
    tmp_fu_341_p2 <= std_logic_vector(unsigned(zext_ln175_2_fu_338_p1) + unsigned(zext_ln169_fu_330_p1));
    w_digits_data_addr_6_reg_544 <= ap_const_lv64_18(5 - 1 downto 0);

    w_digits_data_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, zext_ln164_reg_489, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state4, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln162_fu_260_p1, zext_ln175_1_fu_300_p1, zext_ln191_1_fu_399_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            w_digits_data_address0 <= zext_ln191_1_fu_399_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w_digits_data_address0 <= zext_ln175_1_fu_300_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_digits_data_address0 <= zext_ln164_reg_489(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_address0 <= zext_ln162_fu_260_p1(5 - 1 downto 0);
        else 
            w_digits_data_address0 <= "XXXXX";
        end if; 
    end process;


    w_digits_data_address1_assign_proc : process(w_digits_data_addr_7_reg_508_pp0_iter3_reg, w_digits_data_addr_6_reg_544, ap_CS_fsm_state10, w_digits_data_addr_8_reg_563_pp1_iter3_reg, ap_enable_reg_pp0_iter4, ap_CS_fsm_state13, ap_enable_reg_pp1_iter4, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            w_digits_data_address1 <= w_digits_data_addr_8_reg_563_pp1_iter3_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            w_digits_data_address1 <= w_digits_data_addr_6_reg_544;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            w_digits_data_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            w_digits_data_address1 <= w_digits_data_addr_7_reg_508_pp0_iter3_reg;
        else 
            w_digits_data_address1 <= "XXXXX";
        end if; 
    end process;


    w_digits_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            w_digits_data_ce0 <= ap_const_logic_1;
        else 
            w_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_state10, ap_enable_reg_pp0_iter4, ap_CS_fsm_state13, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            w_digits_data_ce1 <= ap_const_logic_1;
        else 
            w_digits_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_d0_assign_proc : process(x0_digits_data_q0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_digits_data_d0 <= x0_digits_data_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_d0 <= ap_const_lv32_0;
        else 
            w_digits_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_digits_data_d1_assign_proc : process(add_ln176_reg_534, add_ln180_1_reg_549, add_ln192_reg_589, ap_enable_reg_pp0_iter4, ap_CS_fsm_state13, ap_enable_reg_pp1_iter4, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            w_digits_data_d1 <= add_ln192_reg_589;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            w_digits_data_d1 <= add_ln180_1_reg_549;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            w_digits_data_d1 <= add_ln176_reg_534;
        else 
            w_digits_data_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_digits_data_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln162_fu_254_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln162_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            w_digits_data_we0 <= ap_const_logic_1;
        else 
            w_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, icmp_ln169_reg_499_pp0_iter3_reg, icmp_ln185_reg_554_pp1_iter3_reg, ap_enable_reg_pp0_iter4, ap_CS_fsm_state13, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln169_reg_499_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln185_reg_554_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            w_digits_data_we1 <= ap_const_logic_1;
        else 
            w_digits_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x0_digits_data_address0 <= zext_ln164_fu_283_p1(4 - 1 downto 0);

    x0_digits_data_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x0_digits_data_ce0 <= ap_const_logic_1;
        else 
            x0_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x1_digits_data_address0 <= zext_ln174_fu_311_p1(4 - 1 downto 0);

    x1_digits_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x1_digits_data_ce0 <= ap_const_logic_1;
        else 
            x1_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x2_digits_data_address0 <= zext_ln190_fu_410_p1(4 - 1 downto 0);

    x2_digits_data_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            x2_digits_data_ce0 <= ap_const_logic_1;
        else 
            x2_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln162_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_157),64));
    zext_ln164_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_168),64));
    zext_ln169_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_tmp_0_phi_fu_183_p4),34));
    zext_ln174_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_249),33));
    zext_ln174_2_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_tmp_0_phi_fu_183_p4),32));
    zext_ln174_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_202),64));
    zext_ln175_1_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_191),64));
    zext_ln175_2_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln175_reg_529),34));
    zext_ln175_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_digits_data_q0),33));
    zext_ln180_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_reg_179),7));
    zext_ln185_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_tmp_1_phi_fu_218_p4),34));
    zext_ln190_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_249),33));
    zext_ln190_2_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_tmp_1_phi_fu_218_p4),32));
    zext_ln190_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_237),64));
    zext_ln191_1_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_1_reg_226),64));
    zext_ln191_2_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln191_reg_584),34));
    zext_ln191_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x2_digits_data_q0),33));
end behav;
