-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity karastuba_mul_templa_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lhs_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    lhs_digits_data_ce0 : OUT STD_LOGIC;
    lhs_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rhs_digits_data_ce0 : OUT STD_LOGIC;
    rhs_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_digits_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    res_digits_data_ce0 : OUT STD_LOGIC;
    res_digits_data_we0 : OUT STD_LOGIC;
    res_digits_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_digits_data_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    res_digits_data_ce1 : OUT STD_LOGIC;
    res_digits_data_we1 : OUT STD_LOGIC;
    res_digits_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_digits_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of karastuba_mul_templa_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_0_i_reg_381 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_i_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal needDown_0_i_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i2_reg_416 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_474_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_761 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln246_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_reg_766 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln246_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_491_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_780 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln247_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_520_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_793 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln248_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln248_reg_798 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln248_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_537_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_812 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln249_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mul_I_O_fu_436_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal res_tmp_bits_write_a_reg_822 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_mul_I_O_fu_436_ap_ready : STD_LOGIC;
    signal grp_mul_I_O_fu_436_ap_done : STD_LOGIC;
    signal grp_mul_I_O_fu_447_ap_ready : STD_LOGIC;
    signal grp_mul_I_O_fu_447_ap_done : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_ap_ready : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_ap_done : STD_LOGIC;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal grp_mul_I_O_fu_447_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal res_tmp_bits_write_a_1_reg_827 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln257_fu_560_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln257_reg_832 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln51_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_reg_837_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_570_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln56_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_846 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_846_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z0_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z0_digits_data_load_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal z2_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z2_digits_data_load_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_fu_590_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln57_reg_871 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln61_4_fu_660_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln61_4_reg_881 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_i_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state15_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_i_reg_886_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_670_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln77_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_reg_895 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_reg_895_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_690_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_reg_910 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal z1_tmp_bits_fu_752_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal z1_tmp_bits_reg_921 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal lhs0_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs0_digits_data_ce0 : STD_LOGIC;
    signal lhs0_digits_data_we0 : STD_LOGIC;
    signal lhs0_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs1_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs1_digits_data_ce0 : STD_LOGIC;
    signal lhs1_digits_data_we0 : STD_LOGIC;
    signal lhs1_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs0_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs0_digits_data_ce0 : STD_LOGIC;
    signal rhs0_digits_data_we0 : STD_LOGIC;
    signal rhs0_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs1_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs1_digits_data_ce0 : STD_LOGIC;
    signal rhs1_digits_data_we0 : STD_LOGIC;
    signal rhs1_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs0_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs0_tmp_digits_data_ce0 : STD_LOGIC;
    signal lhs0_tmp_digits_data_we0 : STD_LOGIC;
    signal lhs0_tmp_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs1_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs1_tmp_digits_data_ce0 : STD_LOGIC;
    signal lhs1_tmp_digits_data_we0 : STD_LOGIC;
    signal lhs1_tmp_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs0_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs0_tmp_digits_data_ce0 : STD_LOGIC;
    signal rhs0_tmp_digits_data_we0 : STD_LOGIC;
    signal rhs0_tmp_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs1_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs1_tmp_digits_data_ce0 : STD_LOGIC;
    signal rhs1_tmp_digits_data_we0 : STD_LOGIC;
    signal rhs1_tmp_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z0_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal z0_digits_data_ce0 : STD_LOGIC;
    signal z0_digits_data_we0 : STD_LOGIC;
    signal z0_digits_data_ce1 : STD_LOGIC;
    signal z0_digits_data_we1 : STD_LOGIC;
    signal z0_digits_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z2_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal z2_digits_data_ce0 : STD_LOGIC;
    signal z2_digits_data_we0 : STD_LOGIC;
    signal z2_digits_data_ce1 : STD_LOGIC;
    signal z2_digits_data_we1 : STD_LOGIC;
    signal z2_digits_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cross_mul_digits_dat_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cross_mul_digits_dat_ce0 : STD_LOGIC;
    signal cross_mul_digits_dat_we0 : STD_LOGIC;
    signal cross_mul_digits_dat_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cross_mul_digits_dat_ce1 : STD_LOGIC;
    signal cross_mul_digits_dat_we1 : STD_LOGIC;
    signal cross_mul_digits_dat_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal add2_digits_data_ce0 : STD_LOGIC;
    signal add2_digits_data_we0 : STD_LOGIC;
    signal add2_digits_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z1_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal z1_digits_data_ce0 : STD_LOGIC;
    signal z1_digits_data_we0 : STD_LOGIC;
    signal z1_digits_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z1_digits_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_karastuba_mul_templa_fu_427_ap_start : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_ap_idle : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_lhs0_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_karastuba_mul_templa_fu_427_lhs0_tmp_digits_data_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_lhs1_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_karastuba_mul_templa_fu_427_lhs1_tmp_digits_data_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_rhs0_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_karastuba_mul_templa_fu_427_rhs0_tmp_digits_data_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_rhs1_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_karastuba_mul_templa_fu_427_rhs1_tmp_digits_data_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_we0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_ce1 : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_we1 : STD_LOGIC;
    signal grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_karastuba_mul_templa_fu_427_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_I_O_fu_436_ap_start : STD_LOGIC;
    signal grp_mul_I_O_fu_436_ap_idle : STD_LOGIC;
    signal grp_mul_I_O_fu_436_u_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_I_O_fu_436_u_digits_data_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_436_v_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_I_O_fu_436_v_digits_data_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_436_w_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_I_O_fu_436_w_digits_data_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_436_w_digits_data_we0 : STD_LOGIC;
    signal grp_mul_I_O_fu_436_w_digits_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_I_O_fu_436_w_digits_data_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_I_O_fu_436_w_digits_data_ce1 : STD_LOGIC;
    signal grp_mul_I_O_fu_436_w_digits_data_we1 : STD_LOGIC;
    signal grp_mul_I_O_fu_436_w_digits_data_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_I_O_fu_447_ap_start : STD_LOGIC;
    signal grp_mul_I_O_fu_447_ap_idle : STD_LOGIC;
    signal grp_mul_I_O_fu_447_u_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_I_O_fu_447_u_digits_data_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_447_v_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_I_O_fu_447_v_digits_data_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_447_w_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_I_O_fu_447_w_digits_data_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_447_w_digits_data_we0 : STD_LOGIC;
    signal grp_mul_I_O_fu_447_w_digits_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_I_O_fu_447_w_digits_data_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_I_O_fu_447_w_digits_data_ce1 : STD_LOGIC;
    signal grp_mul_I_O_fu_447_w_digits_data_we1 : STD_LOGIC;
    signal grp_mul_I_O_fu_447_w_digits_data_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CAT_I_I_I_O_fu_458_ap_start : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_ap_done : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_ap_idle : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_ap_ready : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_x0_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_CAT_I_I_I_O_fu_458_x0_digits_data_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_x1_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_CAT_I_I_I_O_fu_458_x1_digits_data_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_x2_digits_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_CAT_I_I_I_O_fu_458_x2_digits_data_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_w_digits_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_CAT_I_I_I_O_fu_458_w_digits_data_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_w_digits_data_we0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_w_digits_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CAT_I_I_I_O_fu_458_w_digits_data_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_CAT_I_I_I_O_fu_458_w_digits_data_ce1 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_w_digits_data_we1 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_458_w_digits_data_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_335 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_346 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i2_0_reg_358 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i3_0_reg_369 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_karastuba_mul_templa_fu_427_ap_start_reg : STD_LOGIC := '0';
    signal grp_mul_I_O_fu_436_ap_start_reg : STD_LOGIC := '0';
    signal grp_mul_I_O_fu_447_ap_start_reg : STD_LOGIC := '0';
    signal grp_CAT_I_I_I_O_fu_458_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln247_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln247_1_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_1_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal xor_ln247_fu_497_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln249_fu_543_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln57_fu_582_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln56_1_fu_586_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln57_1_fu_604_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln51_fu_596_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln56_2_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln58_1_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_607_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln61_2_fu_641_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln61_1_fu_638_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln61_fu_644_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln61_fu_634_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln61_3_fu_650_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add2_tmp_bits_fu_654_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln77_1_fu_682_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln78_fu_686_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln79_fu_696_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_fu_715_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln79_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln79_1_fu_704_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_21_fu_735_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln92_fu_743_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln92_fu_748_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component karastuba_mul_templa IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lhs0_tmp_digits_data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        lhs0_tmp_digits_data_ce0 : OUT STD_LOGIC;
        lhs0_tmp_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        lhs1_tmp_digits_data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        lhs1_tmp_digits_data_ce0 : OUT STD_LOGIC;
        lhs1_tmp_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        rhs0_tmp_digits_data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        rhs0_tmp_digits_data_ce0 : OUT STD_LOGIC;
        rhs0_tmp_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        rhs1_tmp_digits_data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        rhs1_tmp_digits_data_ce0 : OUT STD_LOGIC;
        rhs1_tmp_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cross_mul_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cross_mul_digits_data_ce0 : OUT STD_LOGIC;
        cross_mul_digits_data_we0 : OUT STD_LOGIC;
        cross_mul_digits_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cross_mul_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cross_mul_digits_data_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cross_mul_digits_data_ce1 : OUT STD_LOGIC;
        cross_mul_digits_data_we1 : OUT STD_LOGIC;
        cross_mul_digits_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cross_mul_digits_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component mul_I_O IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
        u_digits_data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        u_digits_data_ce0 : OUT STD_LOGIC;
        u_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
        v_digits_data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        v_digits_data_ce0 : OUT STD_LOGIC;
        v_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_digits_data_ce0 : OUT STD_LOGIC;
        w_digits_data_we0 : OUT STD_LOGIC;
        w_digits_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_digits_data_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_digits_data_ce1 : OUT STD_LOGIC;
        w_digits_data_we1 : OUT STD_LOGIC;
        w_digits_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_digits_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component CAT_I_I_I_O IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x0_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x0_digits_data_ce0 : OUT STD_LOGIC;
        x0_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x1_tmp_bits_read : IN STD_LOGIC_VECTOR (6 downto 0);
        x1_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x1_digits_data_ce0 : OUT STD_LOGIC;
        x1_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x2_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x2_digits_data_ce0 : OUT STD_LOGIC;
        x2_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_digits_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        w_digits_data_ce0 : OUT STD_LOGIC;
        w_digits_data_we0 : OUT STD_LOGIC;
        w_digits_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_digits_data_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        w_digits_data_ce1 : OUT STD_LOGIC;
        w_digits_data_we1 : OUT STD_LOGIC;
        w_digits_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_digits_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component karastuba_mul_temcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component karastuba_mul_temmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component karastuba_mul_tempcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lhs0_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lhs0_digits_data_address0,
        ce0 => lhs0_digits_data_ce0,
        we0 => lhs0_digits_data_we0,
        d0 => lhs_digits_data_q0,
        q0 => lhs0_digits_data_q0);

    lhs1_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lhs1_digits_data_address0,
        ce0 => lhs1_digits_data_ce0,
        we0 => lhs1_digits_data_we0,
        d0 => lhs_digits_data_q0,
        q0 => lhs1_digits_data_q0);

    rhs0_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rhs0_digits_data_address0,
        ce0 => rhs0_digits_data_ce0,
        we0 => rhs0_digits_data_we0,
        d0 => rhs_digits_data_q0,
        q0 => rhs0_digits_data_q0);

    rhs1_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rhs1_digits_data_address0,
        ce0 => rhs1_digits_data_ce0,
        we0 => rhs1_digits_data_we0,
        d0 => rhs_digits_data_q0,
        q0 => rhs1_digits_data_q0);

    lhs0_tmp_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lhs0_tmp_digits_data_address0,
        ce0 => lhs0_tmp_digits_data_ce0,
        we0 => lhs0_tmp_digits_data_we0,
        d0 => lhs_digits_data_q0,
        q0 => lhs0_tmp_digits_data_q0);

    lhs1_tmp_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lhs1_tmp_digits_data_address0,
        ce0 => lhs1_tmp_digits_data_ce0,
        we0 => lhs1_tmp_digits_data_we0,
        d0 => lhs_digits_data_q0,
        q0 => lhs1_tmp_digits_data_q0);

    rhs0_tmp_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rhs0_tmp_digits_data_address0,
        ce0 => rhs0_tmp_digits_data_ce0,
        we0 => rhs0_tmp_digits_data_we0,
        d0 => rhs_digits_data_q0,
        q0 => rhs0_tmp_digits_data_q0);

    rhs1_tmp_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rhs1_tmp_digits_data_address0,
        ce0 => rhs1_tmp_digits_data_ce0,
        we0 => rhs1_tmp_digits_data_we0,
        d0 => rhs_digits_data_q0,
        q0 => rhs1_tmp_digits_data_q0);

    z0_digits_data_U : component karastuba_mul_temmb6
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z0_digits_data_address0,
        ce0 => z0_digits_data_ce0,
        we0 => z0_digits_data_we0,
        d0 => grp_mul_I_O_fu_436_w_digits_data_d0,
        q0 => z0_digits_data_q0,
        address1 => grp_mul_I_O_fu_436_w_digits_data_address1,
        ce1 => z0_digits_data_ce1,
        we1 => z0_digits_data_we1,
        d1 => grp_mul_I_O_fu_436_w_digits_data_d1,
        q1 => z0_digits_data_q1);

    z2_digits_data_U : component karastuba_mul_temmb6
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z2_digits_data_address0,
        ce0 => z2_digits_data_ce0,
        we0 => z2_digits_data_we0,
        d0 => grp_mul_I_O_fu_447_w_digits_data_d0,
        q0 => z2_digits_data_q0,
        address1 => grp_mul_I_O_fu_447_w_digits_data_address1,
        ce1 => z2_digits_data_ce1,
        we1 => z2_digits_data_we1,
        d1 => grp_mul_I_O_fu_447_w_digits_data_d1,
        q1 => z2_digits_data_q1);

    cross_mul_digits_dat_U : component karastuba_mul_temmb6
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cross_mul_digits_dat_address0,
        ce0 => cross_mul_digits_dat_ce0,
        we0 => cross_mul_digits_dat_we0,
        d0 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_d0,
        q0 => cross_mul_digits_dat_q0,
        address1 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_address1,
        ce1 => cross_mul_digits_dat_ce1,
        we1 => cross_mul_digits_dat_we1,
        d1 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_d1,
        q1 => cross_mul_digits_dat_q1);

    add2_digits_data_U : component karastuba_mul_tempcA
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => add2_digits_data_address0,
        ce0 => add2_digits_data_ce0,
        we0 => add2_digits_data_we0,
        d0 => add2_digits_data_d0,
        q0 => add2_digits_data_q0);

    z1_digits_data_U : component karastuba_mul_tempcA
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z1_digits_data_address0,
        ce0 => z1_digits_data_ce0,
        we0 => z1_digits_data_we0,
        d0 => z1_digits_data_d0,
        q0 => z1_digits_data_q0);

    grp_karastuba_mul_templa_fu_427 : component karastuba_mul_templa
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_karastuba_mul_templa_fu_427_ap_start,
        ap_done => grp_karastuba_mul_templa_fu_427_ap_done,
        ap_idle => grp_karastuba_mul_templa_fu_427_ap_idle,
        ap_ready => grp_karastuba_mul_templa_fu_427_ap_ready,
        lhs0_tmp_digits_data_address0 => grp_karastuba_mul_templa_fu_427_lhs0_tmp_digits_data_address0,
        lhs0_tmp_digits_data_ce0 => grp_karastuba_mul_templa_fu_427_lhs0_tmp_digits_data_ce0,
        lhs0_tmp_digits_data_q0 => lhs0_tmp_digits_data_q0,
        lhs1_tmp_digits_data_address0 => grp_karastuba_mul_templa_fu_427_lhs1_tmp_digits_data_address0,
        lhs1_tmp_digits_data_ce0 => grp_karastuba_mul_templa_fu_427_lhs1_tmp_digits_data_ce0,
        lhs1_tmp_digits_data_q0 => lhs1_tmp_digits_data_q0,
        rhs0_tmp_digits_data_address0 => grp_karastuba_mul_templa_fu_427_rhs0_tmp_digits_data_address0,
        rhs0_tmp_digits_data_ce0 => grp_karastuba_mul_templa_fu_427_rhs0_tmp_digits_data_ce0,
        rhs0_tmp_digits_data_q0 => rhs0_tmp_digits_data_q0,
        rhs1_tmp_digits_data_address0 => grp_karastuba_mul_templa_fu_427_rhs1_tmp_digits_data_address0,
        rhs1_tmp_digits_data_ce0 => grp_karastuba_mul_templa_fu_427_rhs1_tmp_digits_data_ce0,
        rhs1_tmp_digits_data_q0 => rhs1_tmp_digits_data_q0,
        cross_mul_digits_data_address0 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_address0,
        cross_mul_digits_data_ce0 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_ce0,
        cross_mul_digits_data_we0 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_we0,
        cross_mul_digits_data_d0 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_d0,
        cross_mul_digits_data_q0 => cross_mul_digits_dat_q0,
        cross_mul_digits_data_address1 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_address1,
        cross_mul_digits_data_ce1 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_ce1,
        cross_mul_digits_data_we1 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_we1,
        cross_mul_digits_data_d1 => grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_d1,
        cross_mul_digits_data_q1 => cross_mul_digits_dat_q1,
        ap_return => grp_karastuba_mul_templa_fu_427_ap_return);

    grp_mul_I_O_fu_436 : component mul_I_O
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mul_I_O_fu_436_ap_start,
        ap_done => grp_mul_I_O_fu_436_ap_done,
        ap_idle => grp_mul_I_O_fu_436_ap_idle,
        ap_ready => grp_mul_I_O_fu_436_ap_ready,
        u_tmp_bits_read => ap_const_lv2_0,
        u_digits_data_address0 => grp_mul_I_O_fu_436_u_digits_data_address0,
        u_digits_data_ce0 => grp_mul_I_O_fu_436_u_digits_data_ce0,
        u_digits_data_q0 => lhs0_digits_data_q0,
        v_tmp_bits_read => ap_const_lv2_0,
        v_digits_data_address0 => grp_mul_I_O_fu_436_v_digits_data_address0,
        v_digits_data_ce0 => grp_mul_I_O_fu_436_v_digits_data_ce0,
        v_digits_data_q0 => rhs0_digits_data_q0,
        w_digits_data_address0 => grp_mul_I_O_fu_436_w_digits_data_address0,
        w_digits_data_ce0 => grp_mul_I_O_fu_436_w_digits_data_ce0,
        w_digits_data_we0 => grp_mul_I_O_fu_436_w_digits_data_we0,
        w_digits_data_d0 => grp_mul_I_O_fu_436_w_digits_data_d0,
        w_digits_data_q0 => z0_digits_data_q0,
        w_digits_data_address1 => grp_mul_I_O_fu_436_w_digits_data_address1,
        w_digits_data_ce1 => grp_mul_I_O_fu_436_w_digits_data_ce1,
        w_digits_data_we1 => grp_mul_I_O_fu_436_w_digits_data_we1,
        w_digits_data_d1 => grp_mul_I_O_fu_436_w_digits_data_d1,
        w_digits_data_q1 => z0_digits_data_q1,
        ap_return => grp_mul_I_O_fu_436_ap_return);

    grp_mul_I_O_fu_447 : component mul_I_O
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mul_I_O_fu_447_ap_start,
        ap_done => grp_mul_I_O_fu_447_ap_done,
        ap_idle => grp_mul_I_O_fu_447_ap_idle,
        ap_ready => grp_mul_I_O_fu_447_ap_ready,
        u_tmp_bits_read => ap_const_lv2_0,
        u_digits_data_address0 => grp_mul_I_O_fu_447_u_digits_data_address0,
        u_digits_data_ce0 => grp_mul_I_O_fu_447_u_digits_data_ce0,
        u_digits_data_q0 => lhs1_digits_data_q0,
        v_tmp_bits_read => ap_const_lv2_0,
        v_digits_data_address0 => grp_mul_I_O_fu_447_v_digits_data_address0,
        v_digits_data_ce0 => grp_mul_I_O_fu_447_v_digits_data_ce0,
        v_digits_data_q0 => rhs1_digits_data_q0,
        w_digits_data_address0 => grp_mul_I_O_fu_447_w_digits_data_address0,
        w_digits_data_ce0 => grp_mul_I_O_fu_447_w_digits_data_ce0,
        w_digits_data_we0 => grp_mul_I_O_fu_447_w_digits_data_we0,
        w_digits_data_d0 => grp_mul_I_O_fu_447_w_digits_data_d0,
        w_digits_data_q0 => z2_digits_data_q0,
        w_digits_data_address1 => grp_mul_I_O_fu_447_w_digits_data_address1,
        w_digits_data_ce1 => grp_mul_I_O_fu_447_w_digits_data_ce1,
        w_digits_data_we1 => grp_mul_I_O_fu_447_w_digits_data_we1,
        w_digits_data_d1 => grp_mul_I_O_fu_447_w_digits_data_d1,
        w_digits_data_q1 => z2_digits_data_q1,
        ap_return => grp_mul_I_O_fu_447_ap_return);

    grp_CAT_I_I_I_O_fu_458 : component CAT_I_I_I_O
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_CAT_I_I_I_O_fu_458_ap_start,
        ap_done => grp_CAT_I_I_I_O_fu_458_ap_done,
        ap_idle => grp_CAT_I_I_I_O_fu_458_ap_idle,
        ap_ready => grp_CAT_I_I_I_O_fu_458_ap_ready,
        x0_digits_data_address0 => grp_CAT_I_I_I_O_fu_458_x0_digits_data_address0,
        x0_digits_data_ce0 => grp_CAT_I_I_I_O_fu_458_x0_digits_data_ce0,
        x0_digits_data_q0 => z0_digits_data_q0,
        x1_tmp_bits_read => z1_tmp_bits_reg_921,
        x1_digits_data_address0 => grp_CAT_I_I_I_O_fu_458_x1_digits_data_address0,
        x1_digits_data_ce0 => grp_CAT_I_I_I_O_fu_458_x1_digits_data_ce0,
        x1_digits_data_q0 => z1_digits_data_q0,
        x2_digits_data_address0 => grp_CAT_I_I_I_O_fu_458_x2_digits_data_address0,
        x2_digits_data_ce0 => grp_CAT_I_I_I_O_fu_458_x2_digits_data_ce0,
        x2_digits_data_q0 => z2_digits_data_q0,
        w_digits_data_address0 => grp_CAT_I_I_I_O_fu_458_w_digits_data_address0,
        w_digits_data_ce0 => grp_CAT_I_I_I_O_fu_458_w_digits_data_ce0,
        w_digits_data_we0 => grp_CAT_I_I_I_O_fu_458_w_digits_data_we0,
        w_digits_data_d0 => grp_CAT_I_I_I_O_fu_458_w_digits_data_d0,
        w_digits_data_q0 => res_digits_data_q0,
        w_digits_data_address1 => grp_CAT_I_I_I_O_fu_458_w_digits_data_address1,
        w_digits_data_ce1 => grp_CAT_I_I_I_O_fu_458_w_digits_data_ce1,
        w_digits_data_we1 => grp_CAT_I_I_I_O_fu_458_w_digits_data_we1,
        w_digits_data_d1 => grp_CAT_I_I_I_O_fu_458_w_digits_data_d1,
        w_digits_data_q1 => res_digits_data_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state15);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_CAT_I_I_I_O_fu_458_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_CAT_I_I_I_O_fu_458_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_CAT_I_I_I_O_fu_458_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_CAT_I_I_I_O_fu_458_ap_ready = ap_const_logic_1)) then 
                    grp_CAT_I_I_I_O_fu_458_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_karastuba_mul_templa_fu_427_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_karastuba_mul_templa_fu_427_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln249_fu_531_p2 = ap_const_lv1_1))) then 
                    grp_karastuba_mul_templa_fu_427_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_karastuba_mul_templa_fu_427_ap_ready = ap_const_logic_1)) then 
                    grp_karastuba_mul_templa_fu_427_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mul_I_O_fu_436_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mul_I_O_fu_436_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln249_fu_531_p2 = ap_const_lv1_1))) then 
                    grp_mul_I_O_fu_436_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mul_I_O_fu_436_ap_ready = ap_const_logic_1)) then 
                    grp_mul_I_O_fu_436_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mul_I_O_fu_447_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mul_I_O_fu_447_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln249_fu_531_p2 = ap_const_lv1_1))) then 
                    grp_mul_I_O_fu_447_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mul_I_O_fu_447_ap_ready = ap_const_logic_1)) then 
                    grp_mul_I_O_fu_447_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln246_fu_468_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_346 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_reg_346 <= i_2_reg_780;
            end if; 
        end if;
    end process;

    i2_0_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln247_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_0_reg_358 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_0_reg_358 <= i_3_reg_793;
            end if; 
        end if;
    end process;

    i3_0_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln248_fu_514_p2 = ap_const_lv1_1))) then 
                i3_0_reg_369 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i3_0_reg_369 <= i_4_reg_812;
            end if; 
        end if;
    end process;

    i_0_i2_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_i2_reg_416 <= ap_const_lv5_0;
            elsif (((exitcond_i_fu_664_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_0_i2_reg_416 <= i_6_fu_670_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                i_0_i_reg_393 <= ap_const_lv5_0;
            elsif (((icmp_ln51_fu_564_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_i_reg_393 <= i_5_fu_570_p2;
            end if; 
        end if;
    end process;

    i_0_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_335 <= i_reg_761;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_335 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    needDown_0_i_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                needDown_0_i_reg_404 <= ap_const_lv1_0;
            elsif (((exitcond_i_reg_886_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                needDown_0_i_reg_404 <= tmp_4_fu_715_p2(32 downto 32);
            end if; 
        end if;
    end process;

    tmp_0_i_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                tmp_0_i_reg_381 <= ap_const_lv2_0;
            elsif (((icmp_ln51_reg_837_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_0_i_reg_381 <= tmp_fu_607_p2(33 downto 32);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_837 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln57_reg_871 <= add_ln57_fu_590_p2;
                z0_digits_data_load_reg_861 <= z0_digits_data_q0;
                z2_digits_data_load_reg_866 <= z2_digits_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_i_reg_886 <= exitcond_i_fu_664_p2;
                exitcond_i_reg_886_pp1_iter1_reg <= exitcond_i_reg_886;
                    zext_ln77_reg_895_pp1_iter1_reg(4 downto 0) <= zext_ln77_reg_895(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_780 <= i_2_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_793 <= i_3_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_4_reg_812 <= i_4_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_761 <= i_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln51_reg_837 <= icmp_ln51_fu_564_p2;
                icmp_ln51_reg_837_pp0_iter1_reg <= icmp_ln51_reg_837;
                    zext_ln56_reg_846_pp0_iter1_reg(4 downto 0) <= zext_ln56_reg_846(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                res_tmp_bits_write_a_1_reg_827 <= grp_mul_I_O_fu_447_ap_return;
                res_tmp_bits_write_a_reg_822 <= grp_mul_I_O_fu_436_ap_return;
                    zext_ln257_reg_832(3 downto 0) <= zext_ln257_fu_560_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_886 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_3_reg_910 <= tmp_3_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                z1_tmp_bits_reg_921 <= z1_tmp_bits_fu_752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln246_fu_468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln246_reg_766(3 downto 0) <= zext_ln246_fu_480_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln248_reg_798(3 downto 0) <= zext_ln248_fu_526_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_564_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln56_reg_846(4 downto 0) <= zext_ln56_fu_576_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    zext_ln61_4_reg_881(5 downto 0) <= zext_ln61_4_fu_660_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_664_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    zext_ln77_reg_895(4 downto 0) <= zext_ln77_fu_676_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln246_reg_766(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln248_reg_798(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln257_reg_832(4) <= '0';
    zext_ln56_reg_846(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln56_reg_846_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_4_reg_881(6) <= '0';
    zext_ln77_reg_895(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln77_reg_895_pp1_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln246_fu_468_p2, ap_CS_fsm_state4, icmp_ln247_fu_485_p2, ap_CS_fsm_state6, icmp_ln248_fu_514_p2, ap_CS_fsm_state8, icmp_ln249_fu_531_p2, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, icmp_ln51_fu_564_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, exitcond_i_fu_664_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, grp_CAT_I_I_I_O_fu_458_ap_done, ap_CS_fsm_state19)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln246_fu_468_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln247_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln248_fu_514_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln249_fu_531_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_564_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_564_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_i_fu_664_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_i_fu_664_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_CAT_I_I_I_O_fu_458_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    add2_digits_data_address0_assign_proc : process(zext_ln56_reg_846_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln77_fu_676_p1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            add2_digits_data_address0 <= zext_ln77_fu_676_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            add2_digits_data_address0 <= zext_ln56_reg_846_pp0_iter1_reg(4 - 1 downto 0);
        else 
            add2_digits_data_address0 <= "XXXX";
        end if; 
    end process;


    add2_digits_data_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            add2_digits_data_ce0 <= ap_const_logic_1;
        else 
            add2_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add2_digits_data_d0 <= std_logic_vector(unsigned(add_ln58_1_fu_613_p2) + unsigned(z0_digits_data_load_reg_861));

    add2_digits_data_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln51_reg_837_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln51_reg_837_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            add2_digits_data_we0 <= ap_const_logic_1;
        else 
            add2_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add2_tmp_bits_fu_654_p2 <= std_logic_vector(unsigned(zext_ln61_fu_634_p1) + unsigned(zext_ln61_3_fu_650_p1));
    add_ln57_fu_590_p2 <= std_logic_vector(unsigned(zext_ln57_fu_582_p1) + unsigned(zext_ln56_1_fu_586_p1));
    add_ln58_1_fu_613_p2 <= std_logic_vector(unsigned(z2_digits_data_load_reg_866) + unsigned(zext_ln56_2_fu_600_p1));
    add_ln61_fu_644_p2 <= std_logic_vector(unsigned(zext_ln61_2_fu_641_p1) + unsigned(zext_ln61_1_fu_638_p1));
    add_ln92_fu_743_p2 <= std_logic_vector(unsigned(empty_21_fu_735_p3) + unsigned(zext_ln257_reg_832));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_on_subcall_done_assign_proc : process(grp_mul_I_O_fu_436_ap_done, grp_mul_I_O_fu_447_ap_done, grp_karastuba_mul_templa_fu_427_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_karastuba_mul_templa_fu_427_ap_done = ap_const_logic_0) or (grp_mul_I_O_fu_447_ap_done = ap_const_logic_0) or (grp_mul_I_O_fu_436_ap_done = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state11_assign_proc : process(icmp_ln51_fu_564_p2)
    begin
        if ((icmp_ln51_fu_564_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state15_assign_proc : process(exitcond_i_fu_664_p2)
    begin
        if ((exitcond_i_fu_664_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_CAT_I_I_I_O_fu_458_ap_done, ap_CS_fsm_state19)
    begin
        if ((((grp_CAT_I_I_I_O_fu_458_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_CAT_I_I_I_O_fu_458_ap_done, ap_CS_fsm_state19)
    begin
        if (((grp_CAT_I_I_I_O_fu_458_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cross_mul_digits_dat_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln77_fu_676_p1, grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_address0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            cross_mul_digits_dat_address0 <= zext_ln77_fu_676_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cross_mul_digits_dat_address0 <= grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_address0;
        else 
            cross_mul_digits_dat_address0 <= "XXXX";
        end if; 
    end process;


    cross_mul_digits_dat_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            cross_mul_digits_dat_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cross_mul_digits_dat_ce0 <= grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_ce0;
        else 
            cross_mul_digits_dat_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cross_mul_digits_dat_ce1_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cross_mul_digits_dat_ce1 <= grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_ce1;
        else 
            cross_mul_digits_dat_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cross_mul_digits_dat_we0_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cross_mul_digits_dat_we0 <= grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_we0;
        else 
            cross_mul_digits_dat_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cross_mul_digits_dat_we1_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cross_mul_digits_dat_we1 <= grp_karastuba_mul_templa_fu_427_cross_mul_digits_data_we1;
        else 
            cross_mul_digits_dat_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_21_fu_735_p3 <= 
        ap_const_lv5_1F when (needDown_0_i_reg_404(0) = '1') else 
        ap_const_lv5_0;
    exitcond_i_fu_664_p2 <= "1" when (i_0_i2_reg_416 = ap_const_lv5_10) else "0";
    grp_CAT_I_I_I_O_fu_458_ap_start <= grp_CAT_I_I_I_O_fu_458_ap_start_reg;
    grp_karastuba_mul_templa_fu_427_ap_start <= grp_karastuba_mul_templa_fu_427_ap_start_reg;
    grp_mul_I_O_fu_436_ap_start <= grp_mul_I_O_fu_436_ap_start_reg;
    grp_mul_I_O_fu_447_ap_start <= grp_mul_I_O_fu_447_ap_start_reg;
    i_2_fu_491_p2 <= std_logic_vector(unsigned(i1_0_reg_346) + unsigned(ap_const_lv4_1));
    i_3_fu_520_p2 <= std_logic_vector(unsigned(i2_0_reg_358) + unsigned(ap_const_lv4_1));
    i_4_fu_537_p2 <= std_logic_vector(unsigned(i3_0_reg_369) + unsigned(ap_const_lv4_1));
    i_5_fu_570_p2 <= std_logic_vector(unsigned(i_0_i_reg_393) + unsigned(ap_const_lv5_1));
    i_6_fu_670_p2 <= std_logic_vector(unsigned(i_0_i2_reg_416) + unsigned(ap_const_lv5_1));
    i_fu_474_p2 <= std_logic_vector(unsigned(i_0_reg_335) + unsigned(ap_const_lv4_1));
    icmp_ln246_fu_468_p2 <= "1" when (i_0_reg_335 = ap_const_lv4_8) else "0";
    icmp_ln247_fu_485_p2 <= "1" when (i1_0_reg_346 = ap_const_lv4_8) else "0";
    icmp_ln248_fu_514_p2 <= "1" when (i2_0_reg_358 = ap_const_lv4_8) else "0";
    icmp_ln249_fu_531_p2 <= "1" when (i3_0_reg_369 = ap_const_lv4_8) else "0";
    icmp_ln51_fu_564_p2 <= "1" when (i_0_i_reg_393 = ap_const_lv5_10) else "0";

    lhs0_digits_data_address0_assign_proc : process(zext_ln246_reg_766, ap_CS_fsm_state10, grp_mul_I_O_fu_436_u_digits_data_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lhs0_digits_data_address0 <= zext_ln246_reg_766(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lhs0_digits_data_address0 <= grp_mul_I_O_fu_436_u_digits_data_address0;
        else 
            lhs0_digits_data_address0 <= "XXX";
        end if; 
    end process;


    lhs0_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_436_u_digits_data_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lhs0_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lhs0_digits_data_ce0 <= grp_mul_I_O_fu_436_u_digits_data_ce0;
        else 
            lhs0_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs0_digits_data_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lhs0_digits_data_we0 <= ap_const_logic_1;
        else 
            lhs0_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs0_tmp_digits_data_address0_assign_proc : process(zext_ln246_reg_766, ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_lhs0_tmp_digits_data_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lhs0_tmp_digits_data_address0 <= zext_ln246_reg_766(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lhs0_tmp_digits_data_address0 <= grp_karastuba_mul_templa_fu_427_lhs0_tmp_digits_data_address0;
        else 
            lhs0_tmp_digits_data_address0 <= "XXX";
        end if; 
    end process;


    lhs0_tmp_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_lhs0_tmp_digits_data_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lhs0_tmp_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lhs0_tmp_digits_data_ce0 <= grp_karastuba_mul_templa_fu_427_lhs0_tmp_digits_data_ce0;
        else 
            lhs0_tmp_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs0_tmp_digits_data_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lhs0_tmp_digits_data_we0 <= ap_const_logic_1;
        else 
            lhs0_tmp_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs1_digits_data_address0_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_447_u_digits_data_address0, ap_CS_fsm_state5, zext_ln247_1_fu_508_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lhs1_digits_data_address0 <= zext_ln247_1_fu_508_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lhs1_digits_data_address0 <= grp_mul_I_O_fu_447_u_digits_data_address0;
        else 
            lhs1_digits_data_address0 <= "XXX";
        end if; 
    end process;


    lhs1_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_447_u_digits_data_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lhs1_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lhs1_digits_data_ce0 <= grp_mul_I_O_fu_447_u_digits_data_ce0;
        else 
            lhs1_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs1_digits_data_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lhs1_digits_data_we0 <= ap_const_logic_1;
        else 
            lhs1_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs1_tmp_digits_data_address0_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_lhs1_tmp_digits_data_address0, ap_CS_fsm_state5, zext_ln247_1_fu_508_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lhs1_tmp_digits_data_address0 <= zext_ln247_1_fu_508_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lhs1_tmp_digits_data_address0 <= grp_karastuba_mul_templa_fu_427_lhs1_tmp_digits_data_address0;
        else 
            lhs1_tmp_digits_data_address0 <= "XXX";
        end if; 
    end process;


    lhs1_tmp_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_lhs1_tmp_digits_data_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lhs1_tmp_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lhs1_tmp_digits_data_ce0 <= grp_karastuba_mul_templa_fu_427_lhs1_tmp_digits_data_ce0;
        else 
            lhs1_tmp_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs1_tmp_digits_data_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lhs1_tmp_digits_data_we0 <= ap_const_logic_1;
        else 
            lhs1_tmp_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs_digits_data_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln246_fu_480_p1, ap_CS_fsm_state4, zext_ln247_fu_503_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            lhs_digits_data_address0 <= zext_ln247_fu_503_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lhs_digits_data_address0 <= zext_ln246_fu_480_p1(4 - 1 downto 0);
        else 
            lhs_digits_data_address0 <= "XXXX";
        end if; 
    end process;


    lhs_digits_data_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            lhs_digits_data_ce0 <= ap_const_logic_1;
        else 
            lhs_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_digits_data_address0 <= grp_CAT_I_I_I_O_fu_458_w_digits_data_address0;
    res_digits_data_address1 <= grp_CAT_I_I_I_O_fu_458_w_digits_data_address1;
    res_digits_data_ce0 <= grp_CAT_I_I_I_O_fu_458_w_digits_data_ce0;
    res_digits_data_ce1 <= grp_CAT_I_I_I_O_fu_458_w_digits_data_ce1;
    res_digits_data_d0 <= grp_CAT_I_I_I_O_fu_458_w_digits_data_d0;
    res_digits_data_d1 <= grp_CAT_I_I_I_O_fu_458_w_digits_data_d1;
    res_digits_data_we0 <= grp_CAT_I_I_I_O_fu_458_w_digits_data_we0;
    res_digits_data_we1 <= grp_CAT_I_I_I_O_fu_458_w_digits_data_we1;

    rhs0_digits_data_address0_assign_proc : process(zext_ln248_reg_798, ap_CS_fsm_state10, grp_mul_I_O_fu_436_v_digits_data_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rhs0_digits_data_address0 <= zext_ln248_reg_798(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rhs0_digits_data_address0 <= grp_mul_I_O_fu_436_v_digits_data_address0;
        else 
            rhs0_digits_data_address0 <= "XXX";
        end if; 
    end process;


    rhs0_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_436_v_digits_data_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rhs0_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rhs0_digits_data_ce0 <= grp_mul_I_O_fu_436_v_digits_data_ce0;
        else 
            rhs0_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs0_digits_data_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rhs0_digits_data_we0 <= ap_const_logic_1;
        else 
            rhs0_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs0_tmp_digits_data_address0_assign_proc : process(zext_ln248_reg_798, ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_rhs0_tmp_digits_data_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rhs0_tmp_digits_data_address0 <= zext_ln248_reg_798(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rhs0_tmp_digits_data_address0 <= grp_karastuba_mul_templa_fu_427_rhs0_tmp_digits_data_address0;
        else 
            rhs0_tmp_digits_data_address0 <= "XXX";
        end if; 
    end process;


    rhs0_tmp_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_rhs0_tmp_digits_data_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rhs0_tmp_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rhs0_tmp_digits_data_ce0 <= grp_karastuba_mul_templa_fu_427_rhs0_tmp_digits_data_ce0;
        else 
            rhs0_tmp_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs0_tmp_digits_data_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rhs0_tmp_digits_data_we0 <= ap_const_logic_1;
        else 
            rhs0_tmp_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs1_digits_data_address0_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_447_v_digits_data_address0, ap_CS_fsm_state9, zext_ln249_1_fu_554_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rhs1_digits_data_address0 <= zext_ln249_1_fu_554_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rhs1_digits_data_address0 <= grp_mul_I_O_fu_447_v_digits_data_address0;
        else 
            rhs1_digits_data_address0 <= "XXX";
        end if; 
    end process;


    rhs1_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_447_v_digits_data_ce0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rhs1_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rhs1_digits_data_ce0 <= grp_mul_I_O_fu_447_v_digits_data_ce0;
        else 
            rhs1_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs1_digits_data_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rhs1_digits_data_we0 <= ap_const_logic_1;
        else 
            rhs1_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs1_tmp_digits_data_address0_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_rhs1_tmp_digits_data_address0, ap_CS_fsm_state9, zext_ln249_1_fu_554_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rhs1_tmp_digits_data_address0 <= zext_ln249_1_fu_554_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rhs1_tmp_digits_data_address0 <= grp_karastuba_mul_templa_fu_427_rhs1_tmp_digits_data_address0;
        else 
            rhs1_tmp_digits_data_address0 <= "XXX";
        end if; 
    end process;


    rhs1_tmp_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, grp_karastuba_mul_templa_fu_427_rhs1_tmp_digits_data_ce0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rhs1_tmp_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rhs1_tmp_digits_data_ce0 <= grp_karastuba_mul_templa_fu_427_rhs1_tmp_digits_data_ce0;
        else 
            rhs1_tmp_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs1_tmp_digits_data_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rhs1_tmp_digits_data_we0 <= ap_const_logic_1;
        else 
            rhs1_tmp_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs_digits_data_address0_assign_proc : process(ap_CS_fsm_state6, zext_ln248_fu_526_p1, ap_CS_fsm_state8, zext_ln249_fu_549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rhs_digits_data_address0 <= zext_ln249_fu_549_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rhs_digits_data_address0 <= zext_ln248_fu_526_p1(4 - 1 downto 0);
        else 
            rhs_digits_data_address0 <= "XXXX";
        end if; 
    end process;


    rhs_digits_data_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rhs_digits_data_ce0 <= ap_const_logic_1;
        else 
            rhs_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln79_1_fu_704_p3 <= 
        ap_const_lv32_FFFFFFFF when (needDown_0_i_reg_404(0) = '1') else 
        ap_const_lv32_0;
    select_ln79_fu_696_p3 <= 
        ap_const_lv33_1FFFFFFFF when (needDown_0_i_reg_404(0) = '1') else 
        ap_const_lv33_0;
        sext_ln92_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln92_fu_743_p2),7));

    tmp_3_fu_690_p2 <= std_logic_vector(unsigned(zext_ln77_1_fu_682_p1) - unsigned(zext_ln78_fu_686_p1));
    tmp_4_fu_715_p2 <= std_logic_vector(unsigned(select_ln79_fu_696_p3) + unsigned(tmp_3_reg_910));
    tmp_fu_607_p2 <= std_logic_vector(unsigned(zext_ln57_1_fu_604_p1) + unsigned(zext_ln51_fu_596_p1));
    trunc_ln79_fu_712_p1 <= tmp_3_reg_910(32 - 1 downto 0);
    xor_ln247_fu_497_p2 <= (i1_0_reg_346 xor ap_const_lv4_8);
    xor_ln249_fu_543_p2 <= (i3_0_reg_369 xor ap_const_lv4_8);

    z0_digits_data_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln56_fu_576_p1, grp_mul_I_O_fu_436_w_digits_data_address0, grp_CAT_I_I_I_O_fu_458_x0_digits_data_address0, ap_CS_fsm_state19, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z0_digits_data_address0 <= zext_ln56_fu_576_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            z0_digits_data_address0 <= grp_CAT_I_I_I_O_fu_458_x0_digits_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z0_digits_data_address0 <= grp_mul_I_O_fu_436_w_digits_data_address0;
        else 
            z0_digits_data_address0 <= "XXXX";
        end if; 
    end process;


    z0_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_mul_I_O_fu_436_w_digits_data_ce0, grp_CAT_I_I_I_O_fu_458_x0_digits_data_ce0, ap_CS_fsm_state19)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            z0_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            z0_digits_data_ce0 <= grp_CAT_I_I_I_O_fu_458_x0_digits_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z0_digits_data_ce0 <= grp_mul_I_O_fu_436_w_digits_data_ce0;
        else 
            z0_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z0_digits_data_ce1_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_436_w_digits_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z0_digits_data_ce1 <= grp_mul_I_O_fu_436_w_digits_data_ce1;
        else 
            z0_digits_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    z0_digits_data_we0_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_436_w_digits_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z0_digits_data_we0 <= grp_mul_I_O_fu_436_w_digits_data_we0;
        else 
            z0_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z0_digits_data_we1_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_436_w_digits_data_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z0_digits_data_we1 <= grp_mul_I_O_fu_436_w_digits_data_we1;
        else 
            z0_digits_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    z1_digits_data_address0_assign_proc : process(zext_ln77_reg_895_pp1_iter1_reg, ap_enable_reg_pp1_iter2, grp_CAT_I_I_I_O_fu_458_x1_digits_data_address0, ap_CS_fsm_state19, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            z1_digits_data_address0 <= zext_ln77_reg_895_pp1_iter1_reg(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            z1_digits_data_address0 <= grp_CAT_I_I_I_O_fu_458_x1_digits_data_address0;
        else 
            z1_digits_data_address0 <= "XXXX";
        end if; 
    end process;


    z1_digits_data_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, grp_CAT_I_I_I_O_fu_458_x1_digits_data_ce0, ap_CS_fsm_state19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            z1_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            z1_digits_data_ce0 <= grp_CAT_I_I_I_O_fu_458_x1_digits_data_ce0;
        else 
            z1_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_digits_data_d0 <= std_logic_vector(unsigned(trunc_ln79_fu_712_p1) + unsigned(select_ln79_1_fu_704_p3));

    z1_digits_data_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_i_reg_886_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((exitcond_i_reg_886_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            z1_digits_data_we0 <= ap_const_logic_1;
        else 
            z1_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_tmp_bits_fu_752_p2 <= std_logic_vector(signed(sext_ln92_fu_748_p1) - signed(zext_ln61_4_reg_881));

    z2_digits_data_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln56_fu_576_p1, grp_mul_I_O_fu_447_w_digits_data_address0, grp_CAT_I_I_I_O_fu_458_x2_digits_data_address0, ap_CS_fsm_state19, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z2_digits_data_address0 <= zext_ln56_fu_576_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            z2_digits_data_address0 <= grp_CAT_I_I_I_O_fu_458_x2_digits_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z2_digits_data_address0 <= grp_mul_I_O_fu_447_w_digits_data_address0;
        else 
            z2_digits_data_address0 <= "XXXX";
        end if; 
    end process;


    z2_digits_data_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_mul_I_O_fu_447_w_digits_data_ce0, grp_CAT_I_I_I_O_fu_458_x2_digits_data_ce0, ap_CS_fsm_state19)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            z2_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            z2_digits_data_ce0 <= grp_CAT_I_I_I_O_fu_458_x2_digits_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z2_digits_data_ce0 <= grp_mul_I_O_fu_447_w_digits_data_ce0;
        else 
            z2_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_digits_data_ce1_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_447_w_digits_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z2_digits_data_ce1 <= grp_mul_I_O_fu_447_w_digits_data_ce1;
        else 
            z2_digits_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    z2_digits_data_we0_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_447_w_digits_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z2_digits_data_we0 <= grp_mul_I_O_fu_447_w_digits_data_we0;
        else 
            z2_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_digits_data_we1_assign_proc : process(ap_CS_fsm_state10, grp_mul_I_O_fu_447_w_digits_data_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z2_digits_data_we1 <= grp_mul_I_O_fu_447_w_digits_data_we1;
        else 
            z2_digits_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln246_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_335),64));
    zext_ln247_1_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_346),64));
    zext_ln247_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln247_fu_497_p2),64));
    zext_ln248_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_358),64));
    zext_ln249_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_369),64));
    zext_ln249_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln249_fu_543_p2),64));
    zext_ln257_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_karastuba_mul_templa_fu_427_ap_return),5));
    zext_ln51_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_i_reg_381),34));
    zext_ln56_1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z2_digits_data_q0),33));
    zext_ln56_2_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_i_reg_381),32));
    zext_ln56_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_393),64));
    zext_ln57_1_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_reg_871),34));
    zext_ln57_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z0_digits_data_q0),33));
    zext_ln61_1_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_tmp_bits_write_a_reg_822),5));
    zext_ln61_2_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_tmp_bits_write_a_1_reg_827),5));
    zext_ln61_3_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_644_p2),6));
    zext_ln61_4_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add2_tmp_bits_fu_654_p2),7));
    zext_ln61_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_i_reg_381),6));
    zext_ln77_1_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cross_mul_digits_dat_q0),33));
    zext_ln77_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i2_reg_416),64));
    zext_ln78_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add2_digits_data_q0),33));
end behav;
