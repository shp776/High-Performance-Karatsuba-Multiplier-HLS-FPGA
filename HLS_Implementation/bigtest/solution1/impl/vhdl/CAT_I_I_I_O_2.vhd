-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CAT_I_I_I_O_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x0_digits_data_V_ce0 : OUT STD_LOGIC;
    x0_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x1_tmp_bits_read : IN STD_LOGIC_VECTOR (6 downto 0);
    x1_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x1_digits_data_V_ce0 : OUT STD_LOGIC;
    x1_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x2_digits_data_V_ce0 : OUT STD_LOGIC;
    x2_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_V_ce0 : OUT STD_LOGIC;
    w_digits_data_V_we0 : OUT STD_LOGIC;
    w_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_V_ce1 : OUT STD_LOGIC;
    w_digits_data_V_we1 : OUT STD_LOGIC;
    w_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of CAT_I_I_I_O_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0136_0_reg_178 : STD_LOGIC_VECTOR (1 downto 0);
    signal j1_0_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal i2_0_reg_201 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0136_2_reg_212 : STD_LOGIC_VECTOR (1 downto 0);
    signal j1_1_reg_224 : STD_LOGIC_VECTOR (5 downto 0);
    signal i3_0_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln169_reg_506 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_246_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_246_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state15_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln185_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln158_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln158_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_266_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln162_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_486 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln164_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_reg_491 : STD_LOGIC_VECTOR (63 downto 0);
    signal x0_digits_data_V_loa_reg_501 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln169_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_reg_506_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_reg_506_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_reg_506_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_26_fu_295_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal w_digits_data_V_addr_7_reg_520 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_7_reg_520_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_7_reg_520_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_7_reg_520_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal j_6_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x1_digits_data_V_loa_reg_531 : STD_LOGIC_VECTOR (63 downto 0);
    signal x1_digits_data_V_loa_reg_531_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_324_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln700_reg_537 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_10_fu_353_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_10_reg_542 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_547 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal w_digits_data_V_addr_6_reg_552 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln209_fu_375_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln209_reg_557 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln209_3_fu_384_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_3_reg_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln185_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_567_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_567_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_567_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_27_fu_396_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal w_digits_data_V_addr_8_reg_581 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_8_reg_581_pp1_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_8_reg_581_pp1_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_8_reg_581_pp1_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal j_7_fu_412_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal x2_digits_data_V_loa_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal x2_digits_data_V_loa_reg_592_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_26_fu_425_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln700_26_reg_598 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_11_fu_454_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_11_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln858_s_reg_608 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal j_0_reg_156 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_167 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_p_0136_0_phi_fu_182_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_p_0136_2_phi_fu_216_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln162_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln190_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln191_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_1_fu_317_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_fu_320_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_27_fu_338_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln169_fu_330_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_26_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_14_fu_347_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_341_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln1468_fu_368_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln209_fu_372_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln209_3_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln191_1_fu_418_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_28_fu_421_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_30_fu_439_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln185_fu_431_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_29_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_15_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_15_fu_442_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_272_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_272_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state15);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_272_p2 = ap_const_lv1_1))) then 
                i2_0_reg_201 <= ap_const_lv5_0;
            elsif (((icmp_ln169_fu_289_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i2_0_reg_201 <= i_26_fu_295_p2;
            end if; 
        end if;
    end process;

    i3_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_390_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i3_0_reg_235 <= i_27_fu_396_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i3_0_reg_235 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_fu_255_p2 = ap_const_lv1_1))) then 
                i_0_reg_167 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_167 <= i_reg_486;
            end if; 
        end if;
    end process;

    j1_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_272_p2 = ap_const_lv1_1))) then 
                j1_0_reg_190 <= ap_const_lv5_8;
            elsif (((icmp_ln169_fu_289_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j1_0_reg_190 <= j_6_fu_311_p2;
            end if; 
        end if;
    end process;

    j1_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_390_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j1_1_reg_224 <= j_7_fu_412_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j1_1_reg_224 <= ap_const_lv6_10;
            end if; 
        end if;
    end process;

    j_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln162_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_156 <= j_fu_266_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_156 <= ap_const_lv6_10;
            end if; 
        end if;
    end process;

    p_0136_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_272_p2 = ap_const_lv1_1))) then 
                p_0136_0_reg_178 <= ap_const_lv2_0;
            elsif (((icmp_ln169_reg_506_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                p_0136_0_reg_178 <= trunc_ln_reg_547;
            end if; 
        end if;
    end process;

    p_0136_2_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_567_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                p_0136_2_reg_212 <= trunc_ln858_s_reg_608;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_0136_2_reg_212 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_246 <= w_digits_data_V_q1;
            elsif ((((icmp_ln169_reg_506 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln185_reg_567 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
                reg_246 <= w_digits_data_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_reg_506_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln209_10_reg_542 <= add_ln209_10_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_567_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln209_11_reg_603 <= add_ln209_11_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln209_3_reg_562 <= add_ln209_3_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln209_reg_557 <= add_ln209_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_567_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln700_26_reg_598 <= add_ln700_26_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_reg_506_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln700_reg_537 <= add_ln700_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_486 <= i_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln169_reg_506 <= icmp_ln169_fu_289_p2;
                icmp_ln169_reg_506_pp0_iter1_reg <= icmp_ln169_reg_506;
                w_digits_data_V_addr_7_reg_520_pp0_iter1_reg <= w_digits_data_V_addr_7_reg_520;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln169_reg_506_pp0_iter2_reg <= icmp_ln169_reg_506_pp0_iter1_reg;
                icmp_ln169_reg_506_pp0_iter3_reg <= icmp_ln169_reg_506_pp0_iter2_reg;
                reg_246_pp0_iter2_reg <= reg_246;
                w_digits_data_V_addr_7_reg_520_pp0_iter2_reg <= w_digits_data_V_addr_7_reg_520_pp0_iter1_reg;
                w_digits_data_V_addr_7_reg_520_pp0_iter3_reg <= w_digits_data_V_addr_7_reg_520_pp0_iter2_reg;
                x1_digits_data_V_loa_reg_531_pp0_iter2_reg <= x1_digits_data_V_loa_reg_531;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln185_reg_567 <= icmp_ln185_fu_390_p2;
                icmp_ln185_reg_567_pp1_iter1_reg <= icmp_ln185_reg_567;
                w_digits_data_V_addr_8_reg_581_pp1_iter1_reg <= w_digits_data_V_addr_8_reg_581;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln185_reg_567_pp1_iter2_reg <= icmp_ln185_reg_567_pp1_iter1_reg;
                icmp_ln185_reg_567_pp1_iter3_reg <= icmp_ln185_reg_567_pp1_iter2_reg;
                reg_246_pp1_iter2_reg <= reg_246;
                w_digits_data_V_addr_8_reg_581_pp1_iter2_reg <= w_digits_data_V_addr_8_reg_581_pp1_iter1_reg;
                w_digits_data_V_addr_8_reg_581_pp1_iter3_reg <= w_digits_data_V_addr_8_reg_581_pp1_iter2_reg;
                x2_digits_data_V_loa_reg_592_pp1_iter2_reg <= x2_digits_data_V_loa_reg_592;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sext_ln158_reg_469 <= sext_ln158_fu_251_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_567_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln858_s_reg_608 <= tmp_V_15_fu_442_p2(65 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_reg_506_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                trunc_ln_reg_547 <= tmp_V_fu_341_p2(65 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_fu_289_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_digits_data_V_addr_7_reg_520 <= zext_ln175_fu_306_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                w_digits_data_V_addr_8_reg_581 <= zext_ln191_fu_407_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x0_digits_data_V_loa_reg_501 <= x0_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_reg_506 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                x1_digits_data_V_loa_reg_531 <= x1_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                x2_digits_data_V_loa_reg_592 <= x2_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln164_reg_491(4 downto 0) <= zext_ln164_fu_284_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln164_reg_491(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, icmp_ln162_fu_255_p2, icmp_ln164_fu_272_p2, ap_CS_fsm_state3, icmp_ln169_fu_289_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, icmp_ln185_fu_390_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_fu_255_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_272_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln169_fu_289_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln169_fu_289_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln185_fu_390_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln185_fu_390_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln209_10_fu_353_p2 <= std_logic_vector(unsigned(add_ln209_14_fu_347_p2) + unsigned(x1_digits_data_V_loa_reg_531_pp0_iter2_reg));
    add_ln209_11_fu_454_p2 <= std_logic_vector(unsigned(add_ln209_15_fu_448_p2) + unsigned(x2_digits_data_V_loa_reg_592_pp1_iter2_reg));
    add_ln209_14_fu_347_p2 <= std_logic_vector(unsigned(reg_246_pp0_iter2_reg) + unsigned(zext_ln700_26_fu_334_p1));
    add_ln209_15_fu_448_p2 <= std_logic_vector(unsigned(reg_246_pp1_iter2_reg) + unsigned(zext_ln700_29_fu_435_p1));
    add_ln209_3_fu_384_p2 <= std_logic_vector(unsigned(zext_ln209_3_fu_381_p1) + unsigned(reg_246));
    add_ln209_fu_375_p2 <= std_logic_vector(unsigned(zext_ln1468_fu_368_p1) + unsigned(zext_ln209_fu_372_p1));
    add_ln700_26_fu_425_p2 <= std_logic_vector(unsigned(zext_ln191_1_fu_418_p1) + unsigned(zext_ln700_28_fu_421_p1));
    add_ln700_fu_324_p2 <= std_logic_vector(unsigned(zext_ln175_1_fu_317_p1) + unsigned(zext_ln700_fu_320_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(11);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln169_fu_289_p2)
    begin
        if ((icmp_ln169_fu_289_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state15_assign_proc : process(icmp_ln185_fu_390_p2)
    begin
        if ((icmp_ln185_fu_390_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0136_0_phi_fu_182_p4_assign_proc : process(p_0136_0_reg_178, icmp_ln169_reg_506_pp0_iter3_reg, trunc_ln_reg_547, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((icmp_ln169_reg_506_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_p_0136_0_phi_fu_182_p4 <= trunc_ln_reg_547;
        else 
            ap_phi_mux_p_0136_0_phi_fu_182_p4 <= p_0136_0_reg_178;
        end if; 
    end process;


    ap_phi_mux_p_0136_2_phi_fu_216_p4_assign_proc : process(p_0136_2_reg_212, icmp_ln185_reg_567_pp1_iter3_reg, trunc_ln858_s_reg_608, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0)
    begin
        if (((icmp_ln185_reg_567_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_p_0136_2_phi_fu_216_p4 <= trunc_ln858_s_reg_608;
        else 
            ap_phi_mux_p_0136_2_phi_fu_216_p4 <= p_0136_2_reg_212;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_26_fu_295_p2 <= std_logic_vector(unsigned(i2_0_reg_201) + unsigned(ap_const_lv5_1));
    i_27_fu_396_p2 <= std_logic_vector(unsigned(i3_0_reg_235) + unsigned(ap_const_lv5_1));
    i_fu_278_p2 <= std_logic_vector(unsigned(i_0_reg_167) + unsigned(ap_const_lv5_1));
    icmp_ln162_fu_255_p2 <= "1" when (j_0_reg_156 = ap_const_lv6_20) else "0";
    icmp_ln164_fu_272_p2 <= "1" when (i_0_reg_167 = ap_const_lv5_10) else "0";
    icmp_ln169_fu_289_p2 <= "1" when (i2_0_reg_201 = ap_const_lv5_10) else "0";
    icmp_ln185_fu_390_p2 <= "1" when (i3_0_reg_235 = ap_const_lv5_10) else "0";
    j_6_fu_311_p2 <= std_logic_vector(unsigned(j1_0_reg_190) + unsigned(ap_const_lv5_1));
    j_7_fu_412_p2 <= std_logic_vector(unsigned(j1_1_reg_224) + unsigned(ap_const_lv6_1));
    j_fu_266_p2 <= std_logic_vector(unsigned(j_0_reg_156) + unsigned(ap_const_lv6_1));
        sext_ln158_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x1_tmp_bits_read),32));

    tmp_V_15_fu_442_p2 <= std_logic_vector(unsigned(zext_ln700_30_fu_439_p1) + unsigned(zext_ln185_fu_431_p1));
    tmp_V_fu_341_p2 <= std_logic_vector(unsigned(zext_ln700_27_fu_338_p1) + unsigned(zext_ln169_fu_330_p1));
    w_digits_data_V_addr_6_reg_552 <= ap_const_lv64_18(5 - 1 downto 0);

    w_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, zext_ln164_reg_491, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state5, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln162_fu_261_p1, zext_ln175_fu_306_p1, zext_ln191_fu_407_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            w_digits_data_V_address0 <= zext_ln191_fu_407_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w_digits_data_V_address0 <= zext_ln175_fu_306_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_digits_data_V_address0 <= zext_ln164_reg_491(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_V_address0 <= zext_ln162_fu_261_p1(5 - 1 downto 0);
        else 
            w_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    w_digits_data_V_address1_assign_proc : process(w_digits_data_V_addr_7_reg_520_pp0_iter3_reg, w_digits_data_V_addr_6_reg_552, ap_CS_fsm_state11, w_digits_data_V_addr_8_reg_581_pp1_iter3_reg, ap_enable_reg_pp0_iter4, ap_CS_fsm_state14, ap_enable_reg_pp1_iter4, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            w_digits_data_V_address1 <= w_digits_data_V_addr_8_reg_581_pp1_iter3_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            w_digits_data_V_address1 <= w_digits_data_V_addr_6_reg_552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            w_digits_data_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            w_digits_data_V_address1 <= w_digits_data_V_addr_7_reg_520_pp0_iter3_reg;
        else 
            w_digits_data_V_address1 <= "XXXXX";
        end if; 
    end process;


    w_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            w_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            w_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_state11, ap_enable_reg_pp0_iter4, ap_CS_fsm_state14, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            w_digits_data_V_ce1 <= ap_const_logic_1;
        else 
            w_digits_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_d0_assign_proc : process(ap_CS_fsm_state2, x0_digits_data_V_loa_reg_501, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_digits_data_V_d0 <= x0_digits_data_V_loa_reg_501;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_V_d0 <= ap_const_lv64_0;
        else 
            w_digits_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_digits_data_V_d1_assign_proc : process(add_ln209_10_reg_542, add_ln209_3_reg_562, add_ln209_11_reg_603, ap_enable_reg_pp0_iter4, ap_CS_fsm_state14, ap_enable_reg_pp1_iter4, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            w_digits_data_V_d1 <= add_ln209_11_reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            w_digits_data_V_d1 <= add_ln209_3_reg_562;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            w_digits_data_V_d1 <= add_ln209_10_reg_542;
        else 
            w_digits_data_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_digits_data_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln162_fu_255_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln162_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            w_digits_data_V_we0 <= ap_const_logic_1;
        else 
            w_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, icmp_ln169_reg_506_pp0_iter3_reg, icmp_ln185_reg_567_pp1_iter3_reg, ap_enable_reg_pp0_iter4, ap_CS_fsm_state14, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln169_reg_506_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln185_reg_567_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            w_digits_data_V_we1 <= ap_const_logic_1;
        else 
            w_digits_data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x0_digits_data_V_address0 <= zext_ln164_fu_284_p1(4 - 1 downto 0);

    x0_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x0_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            x0_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x1_digits_data_V_address0 <= zext_ln174_fu_301_p1(4 - 1 downto 0);

    x1_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            x1_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            x1_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x2_digits_data_V_address0 <= zext_ln190_fu_402_p1(4 - 1 downto 0);

    x2_digits_data_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            x2_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            x2_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1468_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_0_reg_178),33));
    zext_ln162_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_156),64));
    zext_ln164_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_167),64));
    zext_ln169_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0136_0_phi_fu_182_p4),66));
    zext_ln174_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_201),64));
    zext_ln175_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_digits_data_V_loa_reg_531),65));
    zext_ln175_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_190),64));
    zext_ln185_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0136_2_phi_fu_216_p4),66));
    zext_ln190_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_235),64));
    zext_ln191_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x2_digits_data_V_loa_reg_592),65));
    zext_ln191_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_1_reg_224),64));
    zext_ln209_3_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_reg_557),64));
    zext_ln209_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln158_reg_469),33));
    zext_ln700_26_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0136_0_phi_fu_182_p4),64));
    zext_ln700_27_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_reg_537),66));
    zext_ln700_28_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_246),65));
    zext_ln700_29_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0136_2_phi_fu_216_p4),64));
    zext_ln700_30_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_26_reg_598),66));
    zext_ln700_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_246),65));
end behav;
