-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul_I_O is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    u_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
    u_digits_data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    u_digits_data_ce0 : OUT STD_LOGIC;
    u_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
    v_digits_data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v_digits_data_ce0 : OUT STD_LOGIC;
    v_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_digits_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_digits_data_ce0 : OUT STD_LOGIC;
    w_digits_data_we0 : OUT STD_LOGIC;
    w_digits_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_digits_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_digits_data_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_digits_data_ce1 : OUT STD_LOGIC;
    w_digits_data_we1 : OUT STD_LOGIC;
    w_digits_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_digits_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of mul_I_O is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_1_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_0_reg_216 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_0_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal j3_0_reg_239 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_0_reg_262 : STD_LOGIC_VECTOR (1 downto 0);
    signal i6_0_reg_274 : STD_LOGIC_VECTOR (3 downto 0);
    signal j7_0_reg_285 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln106_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln128_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state21_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln142_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln106_reg_701_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln103_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_2_fu_341_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_687 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_digits_data_addr_reg_692 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln124_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln106_reg_701_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln106_fu_363_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln106_reg_705 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln109_fu_374_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln109_reg_715 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln109_reg_715_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln111_reg_730 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_digits_data_addr_1_reg_735 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln111_fu_402_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln111_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln111_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln111_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln116_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal w_digits_data_addr_3_reg_759 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_digits_data_load_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln128_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_769_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_465_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal w_digits_data_addr_2_reg_783 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_digits_data_addr_2_reg_783_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_fu_481_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln132_fu_495_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln132_reg_794 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal zext_ln138_fu_541_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln138_reg_804 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln138_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_reg_814_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_556_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal w_digits_data_addr_4_reg_828 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_digits_data_addr_4_reg_828_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_fu_572_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln146_fu_586_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln146_reg_839 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal add_ln150_fu_636_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state21 : STD_LOGIC;
    signal j_0_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln100_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_0_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_phi_mux_i_0_phi_fu_208_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal w_tmp_bits_0_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal w_tmp_bits_1_reg_296 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln100_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_3_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_4_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_5_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln132_1_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln146_1_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln112_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal add_ln119_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_388_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln106_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_2_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_415_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln118_fu_442_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln132_fu_487_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln131_1_fu_491_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln132_2_fu_509_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln128_fu_501_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln131_2_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln133_1_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_512_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln146_fu_578_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln145_1_fu_582_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln146_2_fu_600_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln142_fu_592_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln145_2_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_1_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_603_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln150_fu_632_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal mul_ln152_fu_651_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln152_fu_651_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln152_fu_641_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln152_fu_651_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln152_fu_657_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_388_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_388_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln152_fu_651_p00 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln152_fu_651_p10 : STD_LOGIC_VECTOR (3 downto 0);

    component karastuba_mul_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    karastuba_mul_mulbkb_U1 : component karastuba_mul_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_388_p0,
        din1 => grp_fu_388_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_388_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln103_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln103_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln124_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_335_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((icmp_ln124_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_335_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln138_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((icmp_ln138_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_return_preg <= add_ln152_fu_657_p2;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_335_p2 = ap_const_lv1_1))) then 
                i2_0_reg_216 <= ap_const_lv4_0;
            elsif (((icmp_ln128_fu_459_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i2_0_reg_216 <= i_fu_465_p2;
            end if; 
        end if;
    end process;

    i6_0_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i6_0_reg_274 <= ap_const_lv4_0;
            elsif (((icmp_ln142_fu_550_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i6_0_reg_274 <= i_1_fu_556_p2;
            end if; 
        end if;
    end process;

    i_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_204 <= ap_const_lv4_0;
            elsif (((icmp_ln106_reg_701 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_204 <= add_ln106_reg_705;
            end if; 
        end if;
    end process;

    j1_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln100_fu_318_p2 = ap_const_lv1_1))) then 
                j1_0_reg_180 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j1_0_reg_180 <= j_2_reg_687;
            end if; 
        end if;
    end process;

    j3_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_335_p2 = ap_const_lv1_1))) then 
                j3_0_reg_239 <= ap_const_lv5_8;
            elsif (((icmp_ln128_fu_459_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j3_0_reg_239 <= j_1_fu_481_p2;
            end if; 
        end if;
    end process;

    j7_0_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                j7_0_reg_285 <= ap_const_lv5_8;
            elsif (((icmp_ln142_fu_550_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                j7_0_reg_285 <= j_3_fu_572_p2;
            end if; 
        end if;
    end process;

    j_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_169 <= j_fu_324_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_1_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_1_reg_192 <= ap_const_lv32_0;
            elsif (((icmp_ln106_reg_701_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                k_1_reg_192 <= k_fu_415_p2(63 downto 32);
            end if; 
        end if;
    end process;

    reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_reg_814 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                reg_313 <= w_digits_data_q1;
            elsif ((((icmp_ln106_reg_701_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln128_reg_769 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
                reg_313 <= w_digits_data_q0;
            end if; 
        end if;
    end process;

    tmp5_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                tmp5_0_reg_262 <= ap_const_lv2_0;
            elsif (((icmp_ln142_reg_814_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                tmp5_0_reg_262 <= tmp_2_fu_603_p2(33 downto 32);
            end if; 
        end if;
    end process;

    tmp_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_335_p2 = ap_const_lv1_1))) then 
                tmp_0_reg_227 <= ap_const_lv2_0;
            elsif (((icmp_ln128_reg_769_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_0_reg_227 <= tmp_fu_512_p2(33 downto 32);
            end if; 
        end if;
    end process;

    w_tmp_bits_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                w_tmp_bits_0_reg_250 <= tmp_0_reg_227;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln124_fu_352_p2 = ap_const_lv1_1) and (icmp_ln103_fu_335_p2 = ap_const_lv1_1))) then 
                w_tmp_bits_0_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_tmp_bits_1_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_tmp_bits_1_reg_296 <= add_ln150_fu_636_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln138_fu_545_p2 = ap_const_lv1_1))) then 
                w_tmp_bits_1_reg_296 <= zext_ln138_fu_541_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln106_reg_705 <= add_ln106_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln109_reg_715 <= add_ln109_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln109_reg_715_pp0_iter1_reg <= add_ln109_reg_715;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_reg_701_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln111_reg_740 <= add_ln111_fu_402_p2;
                trunc_ln111_reg_745 <= trunc_ln111_fu_407_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_reg_769 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln132_reg_794 <= add_ln132_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_reg_814 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln146_reg_839 <= add_ln146_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln106_reg_701 <= icmp_ln106_fu_357_p2;
                icmp_ln106_reg_701_pp0_iter1_reg <= icmp_ln106_reg_701;
                icmp_ln106_reg_701_pp0_iter2_reg <= icmp_ln106_reg_701_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln116_reg_755 <= icmp_ln116_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln128_reg_769 <= icmp_ln128_fu_459_p2;
                icmp_ln128_reg_769_pp1_iter1_reg <= icmp_ln128_reg_769;
                w_digits_data_addr_2_reg_783_pp1_iter1_reg <= w_digits_data_addr_2_reg_783;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln142_reg_814 <= icmp_ln142_fu_550_p2;
                icmp_ln142_reg_814_pp2_iter1_reg <= icmp_ln142_reg_814;
                w_digits_data_addr_4_reg_828_pp2_iter1_reg <= w_digits_data_addr_4_reg_828;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_687 <= j_2_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_reg_701_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln111_reg_730 <= grp_fu_388_p2;
                w_digits_data_addr_1_reg_735 <= zext_ln111_5_fu_394_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln106_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln128_reg_769 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then
                reg_305 <= u_digits_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln106_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln142_reg_814 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
                reg_309 <= v_digits_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                v_digits_data_addr_reg_692 <= zext_ln111_3_fu_347_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                w_digits_data_addr_2_reg_783 <= zext_ln132_1_fu_476_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln116_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                w_digits_data_addr_3_reg_759 <= zext_ln118_fu_448_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_550_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                w_digits_data_addr_4_reg_828 <= zext_ln146_1_fu_567_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                w_digits_data_load_reg_764 <= w_digits_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    zext_ln138_reg_804(1 downto 0) <= zext_ln138_fu_541_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln138_reg_804(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, icmp_ln103_fu_335_p2, ap_CS_fsm_state3, icmp_ln124_fu_352_p2, icmp_ln106_fu_357_p2, ap_CS_fsm_pp0_stage2, icmp_ln116_fu_436_p2, ap_CS_fsm_state13, icmp_ln128_fu_459_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state20, icmp_ln138_fu_545_p2, icmp_ln142_fu_550_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, icmp_ln100_fu_318_p2, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln100_fu_318_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln124_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln124_fu_352_p2 = ap_const_lv1_1) and (icmp_ln103_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln106_fu_357_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln106_fu_357_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln116_fu_436_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln128_fu_459_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln128_fu_459_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln138_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln142_fu_550_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln142_fu_550_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln106_fu_363_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_208_p4) + unsigned(ap_const_lv4_1));
    add_ln109_fu_374_p2 <= std_logic_vector(unsigned(i_0_reg_204) + unsigned(j1_0_reg_180));
    add_ln111_fu_402_p2 <= std_logic_vector(unsigned(zext_ln106_fu_398_p1) + unsigned(mul_ln111_reg_730));
    add_ln112_fu_420_p2 <= std_logic_vector(unsigned(trunc_ln111_reg_745) + unsigned(reg_313));
    add_ln119_fu_453_p2 <= std_logic_vector(unsigned(w_digits_data_load_reg_764) + unsigned(k_1_reg_192));
    add_ln132_fu_495_p2 <= std_logic_vector(unsigned(zext_ln132_fu_487_p1) + unsigned(zext_ln131_1_fu_491_p1));
    add_ln133_1_fu_518_p2 <= std_logic_vector(unsigned(reg_313) + unsigned(zext_ln131_2_fu_505_p1));
    add_ln146_fu_586_p2 <= std_logic_vector(unsigned(zext_ln146_fu_578_p1) + unsigned(zext_ln145_1_fu_582_p1));
    add_ln147_1_fu_609_p2 <= std_logic_vector(unsigned(reg_313) + unsigned(zext_ln145_2_fu_596_p1));
    add_ln147_fu_615_p2 <= std_logic_vector(unsigned(add_ln147_1_fu_609_p2) + unsigned(reg_309));
    add_ln150_fu_636_p2 <= std_logic_vector(unsigned(zext_ln138_reg_804) + unsigned(zext_ln150_fu_632_p1));
    add_ln152_fu_657_p2 <= std_logic_vector(unsigned(zext_ln152_fu_641_p1) + unsigned(mul_ln152_fu_651_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(8);
    ap_CS_fsm_state19 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(11);
    ap_CS_fsm_state24 <= ap_CS_fsm(13);
    ap_CS_fsm_state25 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln106_fu_357_p2)
    begin
        if ((icmp_ln106_fu_357_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(icmp_ln128_fu_459_p2)
    begin
        if ((icmp_ln128_fu_459_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state21_assign_proc : process(icmp_ln142_fu_550_p2)
    begin
        if ((icmp_ln142_fu_550_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_208_p4_assign_proc : process(i_0_reg_204, icmp_ln106_reg_701, ap_CS_fsm_pp0_stage0, add_ln106_reg_705, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln106_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_208_p4 <= add_ln106_reg_705;
        else 
            ap_phi_mux_i_0_phi_fu_208_p4 <= i_0_reg_204;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state25, add_ln152_fu_657_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_return <= add_ln152_fu_657_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_fu_388_p0 <= grp_fu_388_p00(32 - 1 downto 0);
    grp_fu_388_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_305),64));
    grp_fu_388_p1 <= grp_fu_388_p10(32 - 1 downto 0);
    grp_fu_388_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_309),64));
    i_1_fu_556_p2 <= std_logic_vector(unsigned(i6_0_reg_274) + unsigned(ap_const_lv4_1));
    i_fu_465_p2 <= std_logic_vector(unsigned(i2_0_reg_216) + unsigned(ap_const_lv4_1));
    icmp_ln100_fu_318_p2 <= "1" when (j_0_reg_169 = ap_const_lv5_10) else "0";
    icmp_ln103_fu_335_p2 <= "1" when (j1_0_reg_180 = ap_const_lv4_8) else "0";
    icmp_ln106_fu_357_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_208_p4 = ap_const_lv4_8) else "0";
    icmp_ln116_fu_436_p2 <= "1" when (k_1_reg_192 = ap_const_lv32_0) else "0";
    icmp_ln124_fu_352_p2 <= "1" when (v_tmp_bits_read = ap_const_lv2_0) else "0";
    icmp_ln128_fu_459_p2 <= "1" when (i2_0_reg_216 = ap_const_lv4_8) else "0";
    icmp_ln138_fu_545_p2 <= "1" when (u_tmp_bits_read = ap_const_lv2_0) else "0";
    icmp_ln142_fu_550_p2 <= "1" when (i6_0_reg_274 = ap_const_lv4_8) else "0";
    j_1_fu_481_p2 <= std_logic_vector(unsigned(j3_0_reg_239) + unsigned(ap_const_lv5_1));
    j_2_fu_341_p2 <= std_logic_vector(unsigned(j1_0_reg_180) + unsigned(ap_const_lv4_1));
    j_3_fu_572_p2 <= std_logic_vector(unsigned(j7_0_reg_285) + unsigned(ap_const_lv5_1));
    j_fu_324_p2 <= std_logic_vector(unsigned(j_0_reg_169) + unsigned(ap_const_lv5_1));
    k_fu_415_p2 <= std_logic_vector(unsigned(zext_ln111_2_fu_411_p1) + unsigned(add_ln111_reg_740));
    mul_ln152_fu_651_p0 <= mul_ln152_fu_651_p00(2 - 1 downto 0);
    mul_ln152_fu_651_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_tmp_bits_read),4));
    mul_ln152_fu_651_p1 <= mul_ln152_fu_651_p10(2 - 1 downto 0);
    mul_ln152_fu_651_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_tmp_bits_read),4));
    mul_ln152_fu_651_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln152_fu_651_p0) * unsigned(mul_ln152_fu_651_p1), 4));
    tmp_2_fu_603_p2 <= std_logic_vector(unsigned(zext_ln146_2_fu_600_p1) + unsigned(zext_ln142_fu_592_p1));
    tmp_fu_512_p2 <= std_logic_vector(unsigned(zext_ln132_2_fu_509_p1) + unsigned(zext_ln128_fu_501_p1));
    trunc_ln111_fu_407_p1 <= add_ln111_fu_402_p2(32 - 1 downto 0);

    u_digits_data_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, zext_ln111_4_fu_369_p1, zext_ln131_fu_471_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            u_digits_data_address0 <= zext_ln131_fu_471_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            u_digits_data_address0 <= zext_ln111_4_fu_369_p1(3 - 1 downto 0);
        else 
            u_digits_data_address0 <= "XXX";
        end if; 
    end process;


    u_digits_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            u_digits_data_ce0 <= ap_const_logic_1;
        else 
            u_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_digits_data_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp2_stage0, v_digits_data_addr_reg_692, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0, zext_ln145_fu_562_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            v_digits_data_address0 <= zext_ln145_fu_562_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v_digits_data_address0 <= v_digits_data_addr_reg_692;
        else 
            v_digits_data_address0 <= "XXX";
        end if; 
    end process;


    v_digits_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            v_digits_data_ce0 <= ap_const_logic_1;
        else 
            v_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, w_digits_data_addr_1_reg_735, ap_CS_fsm_state13, w_digits_data_addr_3_reg_759, ap_enable_reg_pp1_iter0, w_digits_data_addr_4_reg_828_pp2_iter1_reg, ap_enable_reg_pp2_iter2, ap_CS_fsm_state15, ap_block_pp0_stage0, zext_ln100_fu_330_p1, zext_ln111_5_fu_394_p1, zext_ln118_fu_448_p1, ap_block_pp1_stage0, zext_ln132_1_fu_476_p1, ap_block_pp2_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            w_digits_data_address0 <= w_digits_data_addr_4_reg_828_pp2_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            w_digits_data_address0 <= zext_ln132_1_fu_476_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            w_digits_data_address0 <= w_digits_data_addr_3_reg_759;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            w_digits_data_address0 <= zext_ln118_fu_448_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            w_digits_data_address0 <= w_digits_data_addr_1_reg_735;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            w_digits_data_address0 <= zext_ln111_5_fu_394_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_address0 <= zext_ln100_fu_330_p1(4 - 1 downto 0);
        else 
            w_digits_data_address0 <= "XXXX";
        end if; 
    end process;


    w_digits_data_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, w_digits_data_addr_2_reg_783_pp1_iter1_reg, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln146_1_fu_567_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            w_digits_data_address1 <= zext_ln146_1_fu_567_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            w_digits_data_address1 <= w_digits_data_addr_2_reg_783_pp1_iter1_reg;
        else 
            w_digits_data_address1 <= "XXXX";
        end if; 
    end process;


    w_digits_data_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_state13, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter2, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            w_digits_data_ce0 <= ap_const_logic_1;
        else 
            w_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            w_digits_data_ce1 <= ap_const_logic_1;
        else 
            w_digits_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_d0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp2_iter2, ap_CS_fsm_state15, ap_block_pp2_stage0, add_ln112_fu_420_p2, ap_block_pp0_stage2, add_ln119_fu_453_p2, add_ln147_fu_615_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            w_digits_data_d0 <= add_ln147_fu_615_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            w_digits_data_d0 <= add_ln119_fu_453_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            w_digits_data_d0 <= add_ln112_fu_420_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_d0 <= ap_const_lv32_0;
        else 
            w_digits_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    w_digits_data_d1 <= std_logic_vector(unsigned(add_ln133_1_fu_518_p2) + unsigned(reg_305));

    w_digits_data_we0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, icmp_ln106_reg_701_pp0_iter2_reg, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln116_reg_755, icmp_ln142_reg_814_pp2_iter1_reg, ap_enable_reg_pp2_iter2, icmp_ln100_fu_318_p2, ap_CS_fsm_state15)
    begin
        if ((((icmp_ln116_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((icmp_ln100_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln106_reg_701_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln142_reg_814_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            w_digits_data_we0 <= ap_const_logic_1;
        else 
            w_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln128_reg_769_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((icmp_ln128_reg_769_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w_digits_data_we1 <= ap_const_logic_1;
        else 
            w_digits_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln118_fu_442_p2 <= (j1_0_reg_180 xor ap_const_lv4_8);
    zext_ln100_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_169),64));
    zext_ln106_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_192),64));
    zext_ln111_2_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_313),64));
    zext_ln111_3_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_180),64));
    zext_ln111_4_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_208_p4),64));
    zext_ln111_5_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_reg_715_pp0_iter1_reg),64));
    zext_ln118_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln118_fu_442_p2),64));
    zext_ln128_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_reg_227),34));
    zext_ln131_1_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_digits_data_q0),33));
    zext_ln131_2_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_reg_227),32));
    zext_ln131_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_216),64));
    zext_ln132_1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_0_reg_239),64));
    zext_ln132_2_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln132_reg_794),34));
    zext_ln132_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_digits_data_q0),33));
    zext_ln138_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_tmp_bits_0_reg_250),3));
    zext_ln142_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_reg_262),34));
    zext_ln145_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_digits_data_q1),33));
    zext_ln145_2_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_reg_262),32));
    zext_ln145_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_reg_274),64));
    zext_ln146_1_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_0_reg_285),64));
    zext_ln146_2_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln146_reg_839),34));
    zext_ln146_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_digits_data_q0),33));
    zext_ln150_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_reg_262),3));
    zext_ln152_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_tmp_bits_1_reg_296),4));
end behav;
