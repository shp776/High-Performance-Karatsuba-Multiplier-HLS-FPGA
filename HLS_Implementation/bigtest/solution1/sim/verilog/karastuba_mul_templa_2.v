// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module karastuba_mul_templa_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lhs0_tmp_digits_data_address0,
        lhs0_tmp_digits_data_ce0,
        lhs0_tmp_digits_data_q0,
        lhs1_tmp_digits_data_address0,
        lhs1_tmp_digits_data_ce0,
        lhs1_tmp_digits_data_q0,
        rhs0_tmp_digits_data_address0,
        rhs0_tmp_digits_data_ce0,
        rhs0_tmp_digits_data_q0,
        rhs1_tmp_digits_data_address0,
        rhs1_tmp_digits_data_ce0,
        rhs1_tmp_digits_data_q0,
        cross_mul_digits_data_address0,
        cross_mul_digits_data_ce0,
        cross_mul_digits_data_we0,
        cross_mul_digits_data_d0,
        cross_mul_digits_data_q0,
        cross_mul_digits_data_address1,
        cross_mul_digits_data_ce1,
        cross_mul_digits_data_we1,
        cross_mul_digits_data_d1,
        cross_mul_digits_data_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state5 = 6'd4;
parameter    ap_ST_fsm_pp1_stage0 = 6'd8;
parameter    ap_ST_fsm_state9 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] lhs0_tmp_digits_data_address0;
output   lhs0_tmp_digits_data_ce0;
input  [31:0] lhs0_tmp_digits_data_q0;
output  [2:0] lhs1_tmp_digits_data_address0;
output   lhs1_tmp_digits_data_ce0;
input  [31:0] lhs1_tmp_digits_data_q0;
output  [2:0] rhs0_tmp_digits_data_address0;
output   rhs0_tmp_digits_data_ce0;
input  [31:0] rhs0_tmp_digits_data_q0;
output  [2:0] rhs1_tmp_digits_data_address0;
output   rhs1_tmp_digits_data_ce0;
input  [31:0] rhs1_tmp_digits_data_q0;
output  [3:0] cross_mul_digits_data_address0;
output   cross_mul_digits_data_ce0;
output   cross_mul_digits_data_we0;
output  [31:0] cross_mul_digits_data_d0;
input  [31:0] cross_mul_digits_data_q0;
output  [3:0] cross_mul_digits_data_address1;
output   cross_mul_digits_data_ce1;
output   cross_mul_digits_data_we1;
output  [31:0] cross_mul_digits_data_d1;
input  [31:0] cross_mul_digits_data_q1;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg lhs0_tmp_digits_data_ce0;
reg lhs1_tmp_digits_data_ce0;
reg rhs0_tmp_digits_data_ce0;
reg rhs1_tmp_digits_data_ce0;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] tmp_0_i_reg_134;
reg   [3:0] i_0_i_reg_146;
reg   [1:0] tmp_0_i1_reg_157;
reg   [3:0] i_0_i2_reg_169;
wire   [0:0] icmp_ln53_fu_192_p2;
reg   [0:0] icmp_ln53_reg_332;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln53_reg_332_pp0_iter1_reg;
wire   [3:0] i_fu_198_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln58_fu_204_p1;
reg   [63:0] zext_ln58_reg_341;
reg   [63:0] zext_ln58_reg_341_pp0_iter1_reg;
reg   [31:0] lhs0_tmp_digits_data_8_reg_356;
reg   [31:0] lhs1_tmp_digits_data_8_reg_361;
wire   [32:0] add_ln59_fu_218_p2;
reg   [32:0] add_ln59_reg_366;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] icmp_ln53_1_fu_262_p2;
reg   [0:0] icmp_ln53_1_reg_376;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_state8_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln53_1_reg_376_pp1_iter1_reg;
wire   [3:0] i_29_fu_268_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln58_2_fu_274_p1;
reg   [63:0] zext_ln58_2_reg_385;
reg   [63:0] zext_ln58_2_reg_385_pp1_iter1_reg;
reg   [31:0] rhs0_tmp_digits_data_8_reg_400;
reg   [31:0] rhs1_tmp_digits_data_8_reg_405;
wire   [32:0] add_ln59_8_fu_288_p2;
reg   [32:0] add_ln59_8_reg_410;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
reg   [2:0] add0_digits_data_address0;
reg    add0_digits_data_ce0;
reg    add0_digits_data_we0;
wire   [31:0] add0_digits_data_d0;
wire   [31:0] add0_digits_data_q0;
reg   [2:0] add1_digits_data_address0;
reg    add1_digits_data_ce0;
reg    add1_digits_data_we0;
wire   [31:0] add1_digits_data_d0;
wire   [31:0] add1_digits_data_q0;
wire    grp_mul_I_O_fu_180_ap_start;
wire    grp_mul_I_O_fu_180_ap_done;
wire    grp_mul_I_O_fu_180_ap_idle;
wire    grp_mul_I_O_fu_180_ap_ready;
wire   [2:0] grp_mul_I_O_fu_180_u_digits_data_address0;
wire    grp_mul_I_O_fu_180_u_digits_data_ce0;
wire   [2:0] grp_mul_I_O_fu_180_v_digits_data_address0;
wire    grp_mul_I_O_fu_180_v_digits_data_ce0;
wire   [3:0] grp_mul_I_O_fu_180_w_digits_data_address0;
wire    grp_mul_I_O_fu_180_w_digits_data_ce0;
wire    grp_mul_I_O_fu_180_w_digits_data_we0;
wire   [31:0] grp_mul_I_O_fu_180_w_digits_data_d0;
wire   [3:0] grp_mul_I_O_fu_180_w_digits_data_address1;
wire    grp_mul_I_O_fu_180_w_digits_data_ce1;
wire    grp_mul_I_O_fu_180_w_digits_data_we1;
wire   [31:0] grp_mul_I_O_fu_180_w_digits_data_d1;
wire   [3:0] grp_mul_I_O_fu_180_ap_return;
reg    grp_mul_I_O_fu_180_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_block_pp0_stage0;
wire    ap_block_pp1_stage0;
wire   [32:0] zext_ln59_fu_210_p1;
wire   [32:0] zext_ln58_11_fu_214_p1;
wire   [33:0] zext_ln59_7_fu_232_p1;
wire   [33:0] zext_ln53_fu_224_p1;
wire   [31:0] zext_ln58_12_fu_228_p1;
wire   [31:0] add_ln60_7_fu_241_p2;
wire   [33:0] tmp_fu_235_p2;
wire   [32:0] zext_ln59_8_fu_280_p1;
wire   [32:0] zext_ln58_13_fu_284_p1;
wire   [33:0] zext_ln59_9_fu_302_p1;
wire   [33:0] zext_ln53_2_fu_294_p1;
wire   [31:0] zext_ln58_14_fu_298_p1;
wire   [31:0] add_ln60_8_fu_311_p2;
wire   [33:0] tmp_26_fu_305_p2;
reg   [3:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_mul_I_O_fu_180_ap_start_reg = 1'b0;
#0 ap_return_preg = 4'd0;
end

karastuba_mul_temcud #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
add0_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(add0_digits_data_address0),
    .ce0(add0_digits_data_ce0),
    .we0(add0_digits_data_we0),
    .d0(add0_digits_data_d0),
    .q0(add0_digits_data_q0)
);

karastuba_mul_temcud #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
add1_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(add1_digits_data_address0),
    .ce0(add1_digits_data_ce0),
    .we0(add1_digits_data_we0),
    .d0(add1_digits_data_d0),
    .q0(add1_digits_data_q0)
);

mul_I_O grp_mul_I_O_fu_180(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mul_I_O_fu_180_ap_start),
    .ap_done(grp_mul_I_O_fu_180_ap_done),
    .ap_idle(grp_mul_I_O_fu_180_ap_idle),
    .ap_ready(grp_mul_I_O_fu_180_ap_ready),
    .u_tmp_bits_read(tmp_0_i_reg_134),
    .u_digits_data_address0(grp_mul_I_O_fu_180_u_digits_data_address0),
    .u_digits_data_ce0(grp_mul_I_O_fu_180_u_digits_data_ce0),
    .u_digits_data_q0(add0_digits_data_q0),
    .v_tmp_bits_read(tmp_0_i1_reg_157),
    .v_digits_data_address0(grp_mul_I_O_fu_180_v_digits_data_address0),
    .v_digits_data_ce0(grp_mul_I_O_fu_180_v_digits_data_ce0),
    .v_digits_data_q0(add1_digits_data_q0),
    .w_digits_data_address0(grp_mul_I_O_fu_180_w_digits_data_address0),
    .w_digits_data_ce0(grp_mul_I_O_fu_180_w_digits_data_ce0),
    .w_digits_data_we0(grp_mul_I_O_fu_180_w_digits_data_we0),
    .w_digits_data_d0(grp_mul_I_O_fu_180_w_digits_data_d0),
    .w_digits_data_q0(cross_mul_digits_data_q0),
    .w_digits_data_address1(grp_mul_I_O_fu_180_w_digits_data_address1),
    .w_digits_data_ce1(grp_mul_I_O_fu_180_w_digits_data_ce1),
    .w_digits_data_we1(grp_mul_I_O_fu_180_w_digits_data_we1),
    .w_digits_data_d1(grp_mul_I_O_fu_180_w_digits_data_d1),
    .w_digits_data_q1(cross_mul_digits_data_q1),
    .ap_return(grp_mul_I_O_fu_180_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state6)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 4'd0;
    end else begin
        if (((grp_mul_I_O_fu_180_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_return_preg <= grp_mul_I_O_fu_180_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mul_I_O_fu_180_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_mul_I_O_fu_180_ap_start_reg <= 1'b1;
        end else if ((grp_mul_I_O_fu_180_ap_ready == 1'b1)) begin
            grp_mul_I_O_fu_180_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_i2_reg_169 <= 4'd0;
    end else if (((icmp_ln53_1_fu_262_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_0_i2_reg_169 <= i_29_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_146 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_fu_192_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_reg_146 <= i_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_0_i1_reg_157 <= 2'd0;
    end else if (((icmp_ln53_1_reg_376_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_0_i1_reg_157 <= {{tmp_26_fu_305_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_0_i_reg_134 <= 2'd0;
    end else if (((icmp_ln53_reg_332_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_0_i_reg_134 <= {{tmp_fu_235_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_reg_376 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln59_8_reg_410 <= add_ln59_8_fu_288_p2;
        rhs0_tmp_digits_data_8_reg_400 <= rhs0_tmp_digits_data_q0;
        rhs1_tmp_digits_data_8_reg_405 <= rhs1_tmp_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_332 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln59_reg_366 <= add_ln59_fu_218_p2;
        lhs0_tmp_digits_data_8_reg_356 <= lhs0_tmp_digits_data_q0;
        lhs1_tmp_digits_data_8_reg_361 <= lhs1_tmp_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln53_1_reg_376 <= icmp_ln53_1_fu_262_p2;
        icmp_ln53_1_reg_376_pp1_iter1_reg <= icmp_ln53_1_reg_376;
        zext_ln58_2_reg_385_pp1_iter1_reg[3 : 0] <= zext_ln58_2_reg_385[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln53_reg_332 <= icmp_ln53_fu_192_p2;
        icmp_ln53_reg_332_pp0_iter1_reg <= icmp_ln53_reg_332;
        zext_ln58_reg_341_pp0_iter1_reg[3 : 0] <= zext_ln58_reg_341[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln58_2_reg_385[3 : 0] <= zext_ln58_2_fu_274_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln58_reg_341[3 : 0] <= zext_ln58_fu_204_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        add0_digits_data_address0 = zext_ln58_reg_341_pp0_iter1_reg;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        add0_digits_data_address0 = grp_mul_I_O_fu_180_u_digits_data_address0;
    end else begin
        add0_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        add0_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        add0_digits_data_ce0 = grp_mul_I_O_fu_180_u_digits_data_ce0;
    end else begin
        add0_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_332_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        add0_digits_data_we0 = 1'b1;
    end else begin
        add0_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        add1_digits_data_address0 = zext_ln58_2_reg_385_pp1_iter1_reg;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        add1_digits_data_address0 = grp_mul_I_O_fu_180_v_digits_data_address0;
    end else begin
        add1_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add1_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        add1_digits_data_ce0 = grp_mul_I_O_fu_180_v_digits_data_ce0;
    end else begin
        add1_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_1_reg_376_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add1_digits_data_we0 = 1'b1;
    end else begin
        add1_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln53_fu_192_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln53_1_fu_262_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_mul_I_O_fu_180_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_mul_I_O_fu_180_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_mul_I_O_fu_180_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_return = grp_mul_I_O_fu_180_ap_return;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs0_tmp_digits_data_ce0 = 1'b1;
    end else begin
        lhs0_tmp_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs1_tmp_digits_data_ce0 = 1'b1;
    end else begin
        lhs1_tmp_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        rhs0_tmp_digits_data_ce0 = 1'b1;
    end else begin
        rhs0_tmp_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        rhs1_tmp_digits_data_ce0 = 1'b1;
    end else begin
        rhs1_tmp_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln53_fu_192_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln53_fu_192_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln53_1_fu_262_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln53_1_fu_262_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_mul_I_O_fu_180_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add0_digits_data_d0 = (add_ln60_7_fu_241_p2 + lhs0_tmp_digits_data_8_reg_356);

assign add1_digits_data_d0 = (add_ln60_8_fu_311_p2 + rhs0_tmp_digits_data_8_reg_400);

assign add_ln59_8_fu_288_p2 = (zext_ln59_8_fu_280_p1 + zext_ln58_13_fu_284_p1);

assign add_ln59_fu_218_p2 = (zext_ln59_fu_210_p1 + zext_ln58_11_fu_214_p1);

assign add_ln60_7_fu_241_p2 = (lhs1_tmp_digits_data_8_reg_361 + zext_ln58_12_fu_228_p1);

assign add_ln60_8_fu_311_p2 = (rhs1_tmp_digits_data_8_reg_405 + zext_ln58_14_fu_298_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign cross_mul_digits_data_address0 = grp_mul_I_O_fu_180_w_digits_data_address0;

assign cross_mul_digits_data_address1 = grp_mul_I_O_fu_180_w_digits_data_address1;

assign cross_mul_digits_data_ce0 = grp_mul_I_O_fu_180_w_digits_data_ce0;

assign cross_mul_digits_data_ce1 = grp_mul_I_O_fu_180_w_digits_data_ce1;

assign cross_mul_digits_data_d0 = grp_mul_I_O_fu_180_w_digits_data_d0;

assign cross_mul_digits_data_d1 = grp_mul_I_O_fu_180_w_digits_data_d1;

assign cross_mul_digits_data_we0 = grp_mul_I_O_fu_180_w_digits_data_we0;

assign cross_mul_digits_data_we1 = grp_mul_I_O_fu_180_w_digits_data_we1;

assign grp_mul_I_O_fu_180_ap_start = grp_mul_I_O_fu_180_ap_start_reg;

assign i_29_fu_268_p2 = (i_0_i2_reg_169 + 4'd1);

assign i_fu_198_p2 = (i_0_i_reg_146 + 4'd1);

assign icmp_ln53_1_fu_262_p2 = ((i_0_i2_reg_169 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_192_p2 = ((i_0_i_reg_146 == 4'd8) ? 1'b1 : 1'b0);

assign lhs0_tmp_digits_data_address0 = zext_ln58_fu_204_p1;

assign lhs1_tmp_digits_data_address0 = zext_ln58_fu_204_p1;

assign rhs0_tmp_digits_data_address0 = zext_ln58_2_fu_274_p1;

assign rhs1_tmp_digits_data_address0 = zext_ln58_2_fu_274_p1;

assign tmp_26_fu_305_p2 = (zext_ln59_9_fu_302_p1 + zext_ln53_2_fu_294_p1);

assign tmp_fu_235_p2 = (zext_ln59_7_fu_232_p1 + zext_ln53_fu_224_p1);

assign zext_ln53_2_fu_294_p1 = tmp_0_i1_reg_157;

assign zext_ln53_fu_224_p1 = tmp_0_i_reg_134;

assign zext_ln58_11_fu_214_p1 = lhs1_tmp_digits_data_q0;

assign zext_ln58_12_fu_228_p1 = tmp_0_i_reg_134;

assign zext_ln58_13_fu_284_p1 = rhs1_tmp_digits_data_q0;

assign zext_ln58_14_fu_298_p1 = tmp_0_i1_reg_157;

assign zext_ln58_2_fu_274_p1 = i_0_i2_reg_169;

assign zext_ln58_fu_204_p1 = i_0_i_reg_146;

assign zext_ln59_7_fu_232_p1 = add_ln59_reg_366;

assign zext_ln59_8_fu_280_p1 = rhs0_tmp_digits_data_q0;

assign zext_ln59_9_fu_302_p1 = add_ln59_8_reg_410;

assign zext_ln59_fu_210_p1 = lhs0_tmp_digits_data_q0;

always @ (posedge ap_clk) begin
    zext_ln58_reg_341[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln58_reg_341_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln58_2_reg_385[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln58_2_reg_385_pp1_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //karastuba_mul_templa_2
