// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CAT_I_I_I_O (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x0_digits_data_address0,
        x0_digits_data_ce0,
        x0_digits_data_q0,
        x1_tmp_bits_read,
        x1_digits_data_address0,
        x1_digits_data_ce0,
        x1_digits_data_q0,
        x2_digits_data_address0,
        x2_digits_data_ce0,
        x2_digits_data_q0,
        w_digits_data_address0,
        w_digits_data_ce0,
        w_digits_data_we0,
        w_digits_data_d0,
        w_digits_data_q0,
        w_digits_data_address1,
        w_digits_data_ce1,
        w_digits_data_we1,
        w_digits_data_d1,
        w_digits_data_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_pp0_stage0 = 11'd16;
parameter    ap_ST_fsm_state10 = 11'd32;
parameter    ap_ST_fsm_state11 = 11'd64;
parameter    ap_ST_fsm_state12 = 11'd128;
parameter    ap_ST_fsm_state13 = 11'd256;
parameter    ap_ST_fsm_pp1_stage0 = 11'd512;
parameter    ap_ST_fsm_state19 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] x0_digits_data_address0;
output   x0_digits_data_ce0;
input  [31:0] x0_digits_data_q0;
input  [6:0] x1_tmp_bits_read;
output  [3:0] x1_digits_data_address0;
output   x1_digits_data_ce0;
input  [31:0] x1_digits_data_q0;
output  [3:0] x2_digits_data_address0;
output   x2_digits_data_ce0;
input  [31:0] x2_digits_data_q0;
output  [4:0] w_digits_data_address0;
output   w_digits_data_ce0;
output   w_digits_data_we0;
output  [31:0] w_digits_data_d0;
input  [31:0] w_digits_data_q0;
output  [4:0] w_digits_data_address1;
output   w_digits_data_ce1;
output   w_digits_data_we1;
output  [31:0] w_digits_data_d1;
input  [31:0] w_digits_data_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x0_digits_data_ce0;
reg x1_digits_data_ce0;
reg x2_digits_data_ce0;
reg[4:0] w_digits_data_address0;
reg w_digits_data_ce0;
reg w_digits_data_we0;
reg[31:0] w_digits_data_d0;
reg[4:0] w_digits_data_address1;
reg w_digits_data_ce1;
reg w_digits_data_we1;
reg[31:0] w_digits_data_d1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] tmp_0_reg_179;
reg   [4:0] j1_0_reg_191;
reg   [4:0] i2_0_reg_202;
reg   [1:0] tmp_1_reg_214;
reg   [5:0] j1_1_reg_226;
reg   [4:0] i3_0_reg_237;
reg   [31:0] reg_249;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln169_reg_499;
reg   [31:0] reg_249_pp0_iter2_reg;
reg   [31:0] reg_249_pp1_iter2_reg;
wire    ap_block_state14_pp1_stage0_iter0;
wire    ap_block_state15_pp1_stage0_iter1;
wire    ap_block_state16_pp1_stage0_iter2;
wire    ap_block_state17_pp1_stage0_iter3;
wire    ap_block_state18_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln185_reg_554;
wire   [5:0] j_fu_265_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln162_fu_254_p2;
wire   [0:0] icmp_ln164_fu_271_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] i_fu_277_p2;
reg   [4:0] i_reg_484;
wire   [63:0] zext_ln164_fu_283_p1;
reg   [63:0] zext_ln164_reg_489;
wire   [0:0] icmp_ln169_fu_288_p2;
reg   [0:0] icmp_ln169_reg_499_pp0_iter1_reg;
reg   [0:0] icmp_ln169_reg_499_pp0_iter2_reg;
reg   [0:0] icmp_ln169_reg_499_pp0_iter3_reg;
wire   [4:0] i_10_fu_294_p2;
reg   [4:0] i_10_reg_503;
reg    ap_enable_reg_pp0_iter0;
reg   [4:0] w_digits_data_addr_7_reg_508;
reg   [4:0] w_digits_data_addr_7_reg_508_pp0_iter1_reg;
reg   [4:0] w_digits_data_addr_7_reg_508_pp0_iter2_reg;
reg   [4:0] w_digits_data_addr_7_reg_508_pp0_iter3_reg;
wire   [4:0] j_4_fu_305_p2;
reg   [31:0] x1_digits_data_load_reg_524;
wire   [32:0] add_ln175_fu_324_p2;
reg   [32:0] add_ln175_reg_529;
wire   [31:0] add_ln176_fu_353_p2;
reg   [31:0] add_ln176_reg_534;
reg   [1:0] trunc_ln_reg_539;
reg    ap_enable_reg_pp0_iter3;
wire   [4:0] w_digits_data_addr_6_reg_544;
wire    ap_CS_fsm_state10;
wire   [31:0] add_ln180_1_fu_381_p2;
reg   [31:0] add_ln180_1_reg_549;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln185_fu_387_p2;
reg   [0:0] icmp_ln185_reg_554_pp1_iter1_reg;
reg   [0:0] icmp_ln185_reg_554_pp1_iter2_reg;
reg   [0:0] icmp_ln185_reg_554_pp1_iter3_reg;
wire   [4:0] i_11_fu_393_p2;
reg   [4:0] i_11_reg_558;
reg    ap_enable_reg_pp1_iter0;
reg   [4:0] w_digits_data_addr_8_reg_563;
reg   [4:0] w_digits_data_addr_8_reg_563_pp1_iter1_reg;
reg   [4:0] w_digits_data_addr_8_reg_563_pp1_iter2_reg;
reg   [4:0] w_digits_data_addr_8_reg_563_pp1_iter3_reg;
wire   [5:0] j_5_fu_404_p2;
reg   [31:0] x2_digits_data_load_reg_579;
wire   [32:0] add_ln191_fu_423_p2;
reg   [32:0] add_ln191_reg_584;
wire   [31:0] add_ln192_fu_452_p2;
reg   [31:0] add_ln192_reg_589;
reg   [1:0] trunc_ln8_reg_594;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_CS_fsm_state13;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state14;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
reg   [5:0] j_0_reg_157;
reg   [4:0] i_0_reg_168;
wire    ap_CS_fsm_state4;
reg   [1:0] ap_phi_mux_tmp_0_phi_fu_183_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_i2_0_phi_fu_206_p4;
reg   [1:0] ap_phi_mux_tmp_1_phi_fu_218_p4;
wire    ap_block_pp1_stage0;
reg   [4:0] ap_phi_mux_i3_0_phi_fu_241_p4;
wire   [63:0] zext_ln162_fu_260_p1;
wire   [63:0] zext_ln175_1_fu_300_p1;
wire   [63:0] zext_ln174_fu_311_p1;
wire   [63:0] zext_ln191_1_fu_399_p1;
wire   [63:0] zext_ln190_fu_410_p1;
wire   [32:0] zext_ln175_fu_316_p1;
wire   [32:0] zext_ln174_1_fu_320_p1;
wire   [33:0] zext_ln175_2_fu_338_p1;
wire   [33:0] zext_ln169_fu_330_p1;
wire   [31:0] zext_ln174_2_fu_334_p1;
wire   [31:0] add_ln176_1_fu_347_p2;
wire   [33:0] tmp_fu_341_p2;
wire   [6:0] zext_ln180_fu_368_p1;
wire   [6:0] add_ln180_fu_372_p2;
wire  signed [31:0] sext_ln180_fu_377_p1;
wire   [32:0] zext_ln191_fu_415_p1;
wire   [32:0] zext_ln190_1_fu_419_p1;
wire   [33:0] zext_ln191_2_fu_437_p1;
wire   [33:0] zext_ln185_fu_429_p1;
wire   [31:0] zext_ln190_2_fu_433_p1;
wire   [31:0] add_ln192_1_fu_446_p2;
wire   [33:0] tmp_7_fu_440_p2;
wire    ap_CS_fsm_state19;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_271_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_271_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state14)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_271_p2 == 1'd1))) begin
        i2_0_reg_202 <= 5'd0;
    end else if (((icmp_ln169_reg_499 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i2_0_reg_202 <= i_10_reg_503;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_554 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i3_0_reg_237 <= i_11_reg_558;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i3_0_reg_237 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln162_fu_254_p2 == 1'd1))) begin
        i_0_reg_168 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_168 <= i_reg_484;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_271_p2 == 1'd1))) begin
        j1_0_reg_191 <= 5'd8;
    end else if (((icmp_ln169_fu_288_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j1_0_reg_191 <= j_4_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_fu_387_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j1_1_reg_226 <= j_5_fu_404_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j1_1_reg_226 <= 6'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln162_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_157 <= j_fu_265_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_157 <= 6'd16;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_249 <= w_digits_data_q1;
    end else if ((((icmp_ln169_reg_499 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln185_reg_554 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        reg_249 <= w_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_271_p2 == 1'd1))) begin
        tmp_0_reg_179 <= 2'd0;
    end else if (((icmp_ln169_reg_499_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        tmp_0_reg_179 <= trunc_ln_reg_539;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_554_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_1_reg_214 <= trunc_ln8_reg_594;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_1_reg_214 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln169_reg_499_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln175_reg_529 <= add_ln175_fu_324_p2;
        x1_digits_data_load_reg_524 <= x1_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln169_reg_499_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln176_reg_534 <= add_ln176_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln180_1_reg_549 <= add_ln180_1_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_554_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln191_reg_584 <= add_ln191_fu_423_p2;
        x2_digits_data_load_reg_579 <= x2_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_554_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln192_reg_589 <= add_ln192_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_10_reg_503 <= i_10_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_11_reg_558 <= i_11_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_484 <= i_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln169_reg_499 <= icmp_ln169_fu_288_p2;
        icmp_ln169_reg_499_pp0_iter1_reg <= icmp_ln169_reg_499;
        w_digits_data_addr_7_reg_508_pp0_iter1_reg <= w_digits_data_addr_7_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln169_reg_499_pp0_iter2_reg <= icmp_ln169_reg_499_pp0_iter1_reg;
        icmp_ln169_reg_499_pp0_iter3_reg <= icmp_ln169_reg_499_pp0_iter2_reg;
        reg_249_pp0_iter2_reg <= reg_249;
        w_digits_data_addr_7_reg_508_pp0_iter2_reg <= w_digits_data_addr_7_reg_508_pp0_iter1_reg;
        w_digits_data_addr_7_reg_508_pp0_iter3_reg <= w_digits_data_addr_7_reg_508_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln185_reg_554 <= icmp_ln185_fu_387_p2;
        icmp_ln185_reg_554_pp1_iter1_reg <= icmp_ln185_reg_554;
        w_digits_data_addr_8_reg_563_pp1_iter1_reg <= w_digits_data_addr_8_reg_563;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln185_reg_554_pp1_iter2_reg <= icmp_ln185_reg_554_pp1_iter1_reg;
        icmp_ln185_reg_554_pp1_iter3_reg <= icmp_ln185_reg_554_pp1_iter2_reg;
        reg_249_pp1_iter2_reg <= reg_249;
        w_digits_data_addr_8_reg_563_pp1_iter2_reg <= w_digits_data_addr_8_reg_563_pp1_iter1_reg;
        w_digits_data_addr_8_reg_563_pp1_iter3_reg <= w_digits_data_addr_8_reg_563_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_554_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln8_reg_594 <= {{tmp_7_fu_440_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln169_reg_499_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        trunc_ln_reg_539 <= {{tmp_fu_341_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln169_fu_288_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_digits_data_addr_7_reg_508 <= zext_ln175_1_fu_300_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_digits_data_addr_8_reg_563 <= zext_ln191_1_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln164_reg_489[4 : 0] <= zext_ln164_fu_283_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln169_fu_288_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln185_fu_387_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln169_reg_499 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i2_0_phi_fu_206_p4 = i_10_reg_503;
    end else begin
        ap_phi_mux_i2_0_phi_fu_206_p4 = i2_0_reg_202;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_554 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i3_0_phi_fu_241_p4 = i_11_reg_558;
    end else begin
        ap_phi_mux_i3_0_phi_fu_241_p4 = i3_0_reg_237;
    end
end

always @ (*) begin
    if (((icmp_ln169_reg_499_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_phi_mux_tmp_0_phi_fu_183_p4 = trunc_ln_reg_539;
    end else begin
        ap_phi_mux_tmp_0_phi_fu_183_p4 = tmp_0_reg_179;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_554_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ap_phi_mux_tmp_1_phi_fu_218_p4 = trunc_ln8_reg_594;
    end else begin
        ap_phi_mux_tmp_1_phi_fu_218_p4 = tmp_1_reg_214;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        w_digits_data_address0 = zext_ln191_1_fu_399_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_digits_data_address0 = zext_ln175_1_fu_300_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        w_digits_data_address0 = zext_ln164_reg_489;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_digits_data_address0 = zext_ln162_fu_260_p1;
    end else begin
        w_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        w_digits_data_address1 = w_digits_data_addr_8_reg_563_pp1_iter3_reg;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_digits_data_address1 = w_digits_data_addr_6_reg_544;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        w_digits_data_address1 = 64'd24;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        w_digits_data_address1 = w_digits_data_addr_7_reg_508_pp0_iter3_reg;
    end else begin
        w_digits_data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        w_digits_data_ce0 = 1'b1;
    end else begin
        w_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        w_digits_data_ce1 = 1'b1;
    end else begin
        w_digits_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_digits_data_d0 = x0_digits_data_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_digits_data_d0 = 32'd0;
    end else begin
        w_digits_data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        w_digits_data_d1 = add_ln192_reg_589;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_digits_data_d1 = add_ln180_1_reg_549;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        w_digits_data_d1 = add_ln176_reg_534;
    end else begin
        w_digits_data_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln162_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        w_digits_data_we0 = 1'b1;
    end else begin
        w_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((icmp_ln169_reg_499_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln185_reg_554_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        w_digits_data_we1 = 1'b1;
    end else begin
        w_digits_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x0_digits_data_ce0 = 1'b1;
    end else begin
        x0_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x1_digits_data_ce0 = 1'b1;
    end else begin
        x1_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        x2_digits_data_ce0 = 1'b1;
    end else begin
        x2_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln162_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln169_fu_288_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln169_fu_288_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln185_fu_387_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln185_fu_387_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln175_fu_324_p2 = (zext_ln175_fu_316_p1 + zext_ln174_1_fu_320_p1);

assign add_ln176_1_fu_347_p2 = (reg_249_pp0_iter2_reg + zext_ln174_2_fu_334_p1);

assign add_ln176_fu_353_p2 = (add_ln176_1_fu_347_p2 + x1_digits_data_load_reg_524);

assign add_ln180_1_fu_381_p2 = ($signed(reg_249) + $signed(sext_ln180_fu_377_p1));

assign add_ln180_fu_372_p2 = (x1_tmp_bits_read + zext_ln180_fu_368_p1);

assign add_ln191_fu_423_p2 = (zext_ln191_fu_415_p1 + zext_ln190_1_fu_419_p1);

assign add_ln192_1_fu_446_p2 = (reg_249_pp1_iter2_reg + zext_ln190_2_fu_433_p1);

assign add_ln192_fu_452_p2 = (add_ln192_1_fu_446_p2 + x2_digits_data_load_reg_579);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i_10_fu_294_p2 = (ap_phi_mux_i2_0_phi_fu_206_p4 + 5'd1);

assign i_11_fu_393_p2 = (ap_phi_mux_i3_0_phi_fu_241_p4 + 5'd1);

assign i_fu_277_p2 = (i_0_reg_168 + 5'd1);

assign icmp_ln162_fu_254_p2 = ((j_0_reg_157 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_271_p2 = ((i_0_reg_168 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_288_p2 = ((ap_phi_mux_i2_0_phi_fu_206_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_387_p2 = ((ap_phi_mux_i3_0_phi_fu_241_p4 == 5'd16) ? 1'b1 : 1'b0);

assign j_4_fu_305_p2 = (j1_0_reg_191 + 5'd1);

assign j_5_fu_404_p2 = (j1_1_reg_226 + 6'd1);

assign j_fu_265_p2 = (j_0_reg_157 + 6'd1);

assign sext_ln180_fu_377_p1 = $signed(add_ln180_fu_372_p2);

assign tmp_7_fu_440_p2 = (zext_ln191_2_fu_437_p1 + zext_ln185_fu_429_p1);

assign tmp_fu_341_p2 = (zext_ln175_2_fu_338_p1 + zext_ln169_fu_330_p1);

assign w_digits_data_addr_6_reg_544 = 64'd24;

assign x0_digits_data_address0 = zext_ln164_fu_283_p1;

assign x1_digits_data_address0 = zext_ln174_fu_311_p1;

assign x2_digits_data_address0 = zext_ln190_fu_410_p1;

assign zext_ln162_fu_260_p1 = j_0_reg_157;

assign zext_ln164_fu_283_p1 = i_0_reg_168;

assign zext_ln169_fu_330_p1 = ap_phi_mux_tmp_0_phi_fu_183_p4;

assign zext_ln174_1_fu_320_p1 = reg_249;

assign zext_ln174_2_fu_334_p1 = ap_phi_mux_tmp_0_phi_fu_183_p4;

assign zext_ln174_fu_311_p1 = i2_0_reg_202;

assign zext_ln175_1_fu_300_p1 = j1_0_reg_191;

assign zext_ln175_2_fu_338_p1 = add_ln175_reg_529;

assign zext_ln175_fu_316_p1 = x1_digits_data_q0;

assign zext_ln180_fu_368_p1 = tmp_0_reg_179;

assign zext_ln185_fu_429_p1 = ap_phi_mux_tmp_1_phi_fu_218_p4;

assign zext_ln190_1_fu_419_p1 = reg_249;

assign zext_ln190_2_fu_433_p1 = ap_phi_mux_tmp_1_phi_fu_218_p4;

assign zext_ln190_fu_410_p1 = i3_0_reg_237;

assign zext_ln191_1_fu_399_p1 = j1_1_reg_226;

assign zext_ln191_2_fu_437_p1 = add_ln191_reg_584;

assign zext_ln191_fu_415_p1 = x2_digits_data_q0;

always @ (posedge ap_clk) begin
    zext_ln164_reg_489[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //CAT_I_I_I_O
