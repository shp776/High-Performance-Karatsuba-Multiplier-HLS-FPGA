-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity karastuba_mul_ADD_SU_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z0_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    z0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    z0_digits_data_V_ce0 : OUT STD_LOGIC;
    z0_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    z2_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    z2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    z2_digits_data_V_ce0 : OUT STD_LOGIC;
    z2_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    cross_mul_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    cross_mul_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cross_mul_digits_data_V_ce0 : OUT STD_LOGIC;
    cross_mul_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    lhs_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    lhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lhs_digits_data_V_ce0 : OUT STD_LOGIC;
    lhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    rhs_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rhs_digits_data_V_ce0 : OUT STD_LOGIC;
    rhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    res_tmp_bits : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_tmp_bits_ap_vld : OUT STD_LOGIC;
    res_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_digits_data_V_ce0 : OUT STD_LOGIC;
    res_digits_data_V_we0 : OUT STD_LOGIC;
    res_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of karastuba_mul_ADD_SU_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv65_1FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (64 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_088_0_i_reg_280 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_i_reg_292 : STD_LOGIC_VECTOR (5 downto 0);
    signal op2_assign_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i11_reg_315 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0106_0_reg_326 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_reg_338 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_349 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0103_0_reg_373 : STD_LOGIC_VECTOR (1 downto 0);
    signal i3_0_reg_385 : STD_LOGIC_VECTOR (5 downto 0);
    signal j4_0_reg_396 : STD_LOGIC_VECTOR (6 downto 0);
    signal i5_0_reg_417 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_res_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_439 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state15_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal icmp_ln338_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state20_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state22_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal icmp_ln352_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state29_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state31_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln364_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln54_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_850_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_27_fu_450_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_27_reg_854 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln59_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_859 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_859_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z0_digits_data_V_loa_reg_874 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal z2_digits_data_V_loa_reg_880 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_473_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln700_reg_886 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_6_fu_484_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_6_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add2_tmp_bits_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_tmp_bits_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_i_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_i_reg_906_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_906_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_906_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_28_fu_531_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln81_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_reg_915 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_reg_915_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_reg_915_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_reg_915_pp1_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal cross_mul_digits_dat_4_reg_930 : STD_LOGIC_VECTOR (63 downto 0);
    signal add2_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal add2_digits_data_V_l_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal tmp_V_18_fu_549_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_18_reg_940 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_3_reg_946 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal add_ln700_21_fu_587_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_21_reg_951 : STD_LOGIC_VECTOR (63 downto 0);
    signal z1_tmp_bits_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal z1_tmp_bits_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln334_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln334_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_CAT_I_I_I_O_1_fu_428_ap_ready : STD_LOGIC;
    signal grp_CAT_I_I_I_O_1_fu_428_ap_done : STD_LOGIC;
    signal icmp_ln338_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state14_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln338_reg_965_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_623_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_969 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_res_digits_data_V_a_reg_979 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_res_digits_data_V_a_reg_979_pp2_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_digits_data_V_lo_reg_984 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_639_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_990 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_23_fu_656_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_23_reg_995 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_fu_668_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_reg_1000 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal zext_ln348_fu_696_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln348_reg_1010 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln348_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln352_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state19_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln352_reg_1020_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_29_fu_711_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_29_reg_1024 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_res_digits_data_V_a_3_reg_1034 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_res_digits_data_V_a_3_reg_1034_pp3_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_digits_data_V_lo_reg_1039 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_5_fu_727_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_5_reg_1045 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_24_fu_744_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_24_reg_1050 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_5_fu_756_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_5_reg_1055 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal p_res_tmp_bits_fu_788_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln362_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal p_res_tmp_bits_3_fu_801_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_res_tmp_bits_3_reg_1075 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln364_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1080_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_30_fu_812_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal zext_ln367_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_reg_1089 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_reg_1089_pp4_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state14 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state19 : STD_LOGIC;
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state29 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal add2_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal add2_digits_data_V_ce0 : STD_LOGIC;
    signal add2_digits_data_V_we0 : STD_LOGIC;
    signal z1_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal z1_digits_data_V_ce0 : STD_LOGIC;
    signal z1_digits_data_V_we0 : STD_LOGIC;
    signal z1_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_res_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_res_digits_data_V_ce0 : STD_LOGIC;
    signal p_res_digits_data_V_we0 : STD_LOGIC;
    signal p_res_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_CAT_I_I_I_O_1_fu_428_ap_start : STD_LOGIC;
    signal grp_CAT_I_I_I_O_1_fu_428_ap_idle : STD_LOGIC;
    signal grp_CAT_I_I_I_O_1_fu_428_x0_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_CAT_I_I_I_O_1_fu_428_x0_digits_data_V_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_1_fu_428_x1_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_CAT_I_I_I_O_1_fu_428_x1_digits_data_V_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_1_fu_428_x2_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_CAT_I_I_I_O_1_fu_428_x2_digits_data_V_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_we0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_0_i_phi_fu_296_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_op2_assign_phi_fu_307_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_342_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_353_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_p_res_tmp_bits_0_phi_fu_365_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_res_tmp_bits_0_reg_361 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_i3_0_phi_fu_389_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_j4_0_phi_fu_400_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_res_tmp_bits_1_reg_408 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_CAT_I_I_I_O_1_fu_428_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln341_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln355_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln356_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal zext_ln209_fu_466_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln54_fu_462_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_26_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_14_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_27_fu_492_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_fu_489_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_17_fu_495_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln64_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln64_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln180_fu_543_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln701_fu_546_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal select_ln701_fu_555_p3 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_19_fu_574_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal trunc_ln701_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln701_2_fu_563_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_neg207_i_fu_593_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln96_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln334_fu_612_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln700_28_fu_649_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln338_fu_645_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_30_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_15_fu_662_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_31_fu_677_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_29_fu_673_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_fu_680_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal icmp_ln348_fu_700_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln700_32_fu_737_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln352_fu_733_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_34_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_16_fu_750_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_35_fu_765_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_33_fu_761_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_22_fu_768_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln360_fu_784_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln362_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component CAT_I_I_I_O_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x0_digits_data_V_ce0 : OUT STD_LOGIC;
        x0_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        x1_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
        x1_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x1_digits_data_V_ce0 : OUT STD_LOGIC;
        x1_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        x2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x2_digits_data_V_ce0 : OUT STD_LOGIC;
        x2_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_digits_data_V_ce0 : OUT STD_LOGIC;
        w_digits_data_V_we0 : OUT STD_LOGIC;
        w_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        w_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component karastuba_mul_mulsc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component karastuba_mul_ADDrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component karastuba_mul_ADDNgs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    add2_digits_data_V_U : component karastuba_mul_ADDrcU
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => add2_digits_data_V_address0,
        ce0 => add2_digits_data_V_ce0,
        we0 => add2_digits_data_V_we0,
        d0 => add_ln209_6_reg_891,
        q0 => add2_digits_data_V_q0);

    z1_digits_data_V_U : component karastuba_mul_ADDrcU
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z1_digits_data_V_address0,
        ce0 => z1_digits_data_V_ce0,
        we0 => z1_digits_data_V_we0,
        d0 => add_ln700_21_reg_951,
        q0 => z1_digits_data_V_q0);

    p_res_digits_data_V_U : component karastuba_mul_ADDNgs
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_res_digits_data_V_address0,
        ce0 => p_res_digits_data_V_ce0,
        we0 => p_res_digits_data_V_we0,
        d0 => p_res_digits_data_V_d0,
        q0 => p_res_digits_data_V_q0);

    grp_CAT_I_I_I_O_1_fu_428 : component CAT_I_I_I_O_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_CAT_I_I_I_O_1_fu_428_ap_start,
        ap_done => grp_CAT_I_I_I_O_1_fu_428_ap_done,
        ap_idle => grp_CAT_I_I_I_O_1_fu_428_ap_idle,
        ap_ready => grp_CAT_I_I_I_O_1_fu_428_ap_ready,
        x0_digits_data_V_address0 => grp_CAT_I_I_I_O_1_fu_428_x0_digits_data_V_address0,
        x0_digits_data_V_ce0 => grp_CAT_I_I_I_O_1_fu_428_x0_digits_data_V_ce0,
        x0_digits_data_V_q0 => z0_digits_data_V_q0,
        x1_tmp_bits_read => z1_tmp_bits_reg_956,
        x1_digits_data_V_address0 => grp_CAT_I_I_I_O_1_fu_428_x1_digits_data_V_address0,
        x1_digits_data_V_ce0 => grp_CAT_I_I_I_O_1_fu_428_x1_digits_data_V_ce0,
        x1_digits_data_V_q0 => z1_digits_data_V_q0,
        x2_digits_data_V_address0 => grp_CAT_I_I_I_O_1_fu_428_x2_digits_data_V_address0,
        x2_digits_data_V_ce0 => grp_CAT_I_I_I_O_1_fu_428_x2_digits_data_V_ce0,
        x2_digits_data_V_q0 => z2_digits_data_V_q0,
        w_digits_data_V_address0 => grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_address0,
        w_digits_data_V_ce0 => grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_ce0,
        w_digits_data_V_we0 => grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_we0,
        w_digits_data_V_d0 => grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_d0,
        w_digits_data_V_q0 => p_res_digits_data_V_q0);

    karastuba_mul_mulsc4_U80 : component karastuba_mul_mulsc4
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lhs_tmp_bits_read,
        din1 => rhs_tmp_bits_read,
        ce => ap_const_logic_1,
        dout => grp_fu_793_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln334_fu_612_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln334_fu_612_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln348_fu_700_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln348_fu_700_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state29) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state29)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state29);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_CAT_I_I_I_O_1_fu_428_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_CAT_I_I_I_O_1_fu_428_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_CAT_I_I_I_O_1_fu_428_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_CAT_I_I_I_O_1_fu_428_ap_ready = ap_const_logic_1)) then 
                    grp_CAT_I_I_I_O_1_fu_428_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i3_0_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln348_fu_700_p2 = ap_const_lv1_0))) then 
                i3_0_reg_385 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
                i3_0_reg_385 <= i_29_reg_1024;
            end if; 
        end if;
    end process;

    i5_0_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln364_fu_806_p2 = ap_const_lv1_0))) then 
                i5_0_reg_417 <= i_30_fu_812_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i5_0_reg_417 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_i11_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i11_reg_315 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_fu_525_p2 = ap_const_lv1_0))) then 
                i_0_i11_reg_315 <= i_28_fu_531_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_292 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_850 = ap_const_lv1_0))) then 
                i_0_i_reg_292 <= i_27_reg_854;
            end if; 
        end if;
    end process;

    i_0_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln334_fu_612_p2 = ap_const_lv1_0))) then 
                i_0_reg_338 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln338_reg_965 = ap_const_lv1_0))) then 
                i_0_reg_338 <= i_reg_969;
            end if; 
        end if;
    end process;

    j4_0_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln348_fu_700_p2 = ap_const_lv1_0))) then 
                j4_0_reg_396 <= ap_const_lv7_20;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
                j4_0_reg_396 <= j_5_reg_1045;
            end if; 
        end if;
    end process;

    j_0_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln334_fu_612_p2 = ap_const_lv1_0))) then 
                j_0_reg_349 <= ap_const_lv7_20;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln338_reg_965 = ap_const_lv1_0))) then 
                j_0_reg_349 <= j_reg_990;
            end if; 
        end if;
    end process;

    op2_assign_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                op2_assign_reg_303 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (exitcond_i_reg_906_pp1_iter3_reg = ap_const_lv1_0))) then 
                op2_assign_reg_303 <= tmp_3_reg_946;
            end if; 
        end if;
    end process;

    p_0103_0_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln348_fu_700_p2 = ap_const_lv1_0))) then 
                p_0103_0_reg_373 <= ap_const_lv2_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (icmp_ln352_reg_1020_pp3_iter1_reg = ap_const_lv1_0))) then 
                p_0103_0_reg_373 <= tmp_V_22_fu_768_p2(65 downto 64);
            end if; 
        end if;
    end process;

    p_0106_0_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln334_fu_612_p2 = ap_const_lv1_0))) then 
                p_0106_0_reg_326 <= ap_const_lv2_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln338_reg_965_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then 
                p_0106_0_reg_326 <= tmp_V_fu_680_p2(65 downto 64);
            end if; 
        end if;
    end process;

    p_088_0_i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_088_0_i_reg_280 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln54_reg_850_pp0_iter1_reg = ap_const_lv1_0))) then 
                p_088_0_i_reg_280 <= tmp_V_17_fu_495_p2(65 downto 64);
            end if; 
        end if;
    end process;

    p_res_tmp_bits_0_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln334_reg_961 = ap_const_lv1_0))) then 
                p_res_tmp_bits_0_reg_361 <= p_0106_0_reg_326;
            elsif (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (icmp_ln334_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p_res_tmp_bits_0_reg_361 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_res_tmp_bits_1_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln348_reg_1016 = ap_const_lv1_0))) then 
                p_res_tmp_bits_1_reg_408 <= p_res_tmp_bits_fu_788_p2;
            elsif (((icmp_ln348_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                p_res_tmp_bits_1_reg_408 <= zext_ln348_fu_696_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_906 = ap_const_lv1_0))) then
                add2_digits_data_V_l_reg_935 <= add2_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add2_tmp_bits_reg_901 <= add2_tmp_bits_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then
                add_ln209_5_reg_1055 <= add_ln209_5_fu_756_p2;
                tmp_V_24_reg_1050 <= tmp_V_24_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_850 = ap_const_lv1_0))) then
                add_ln209_6_reg_891 <= add_ln209_6_fu_484_p2;
                add_ln700_reg_886 <= add_ln700_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln338_reg_965 = ap_const_lv1_0))) then
                add_ln209_reg_1000 <= add_ln209_fu_668_p2;
                tmp_V_23_reg_995 <= tmp_V_23_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_906_pp1_iter2_reg = ap_const_lv1_0))) then
                add_ln700_21_reg_951 <= add_ln700_21_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_906 = ap_const_lv1_0))) then
                cross_mul_digits_dat_4_reg_930 <= cross_mul_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_i_reg_906 <= exitcond_i_fu_525_p2;
                exitcond_i_reg_906_pp1_iter1_reg <= exitcond_i_reg_906;
                    zext_ln81_reg_915_pp1_iter1_reg(5 downto 0) <= zext_ln81_reg_915(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                exitcond_i_reg_906_pp1_iter2_reg <= exitcond_i_reg_906_pp1_iter1_reg;
                exitcond_i_reg_906_pp1_iter3_reg <= exitcond_i_reg_906_pp1_iter2_reg;
                    zext_ln81_reg_915_pp1_iter2_reg(5 downto 0) <= zext_ln81_reg_915_pp1_iter1_reg(5 downto 0);
                    zext_ln81_reg_915_pp1_iter3_reg(5 downto 0) <= zext_ln81_reg_915_pp1_iter2_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_27_reg_854 <= i_27_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                i_29_reg_1024 <= i_29_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                i_reg_969 <= i_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                icmp_ln334_reg_961 <= icmp_ln334_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln338_reg_965 <= icmp_ln338_fu_617_p2;
                icmp_ln338_reg_965_pp2_iter1_reg <= icmp_ln338_reg_965;
                p_res_digits_data_V_a_reg_979_pp2_iter1_reg <= p_res_digits_data_V_a_reg_979;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                icmp_ln348_reg_1016 <= icmp_ln348_fu_700_p2;
                    zext_ln348_reg_1010(1 downto 0) <= zext_ln348_fu_696_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln352_reg_1020 <= icmp_ln352_fu_705_p2;
                icmp_ln352_reg_1020_pp3_iter1_reg <= icmp_ln352_reg_1020;
                p_res_digits_data_V_a_3_reg_1034_pp3_iter1_reg <= p_res_digits_data_V_a_3_reg_1034;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln364_reg_1080 <= icmp_ln364_fu_806_p2;
                icmp_ln364_reg_1080_pp4_iter1_reg <= icmp_ln364_reg_1080;
                    zext_ln367_reg_1089_pp4_iter1_reg(6 downto 0) <= zext_ln367_reg_1089(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln54_reg_850 <= icmp_ln54_fu_444_p2;
                icmp_ln54_reg_850_pp0_iter1_reg <= icmp_ln54_reg_850;
                    zext_ln59_reg_859_pp0_iter1_reg(5 downto 0) <= zext_ln59_reg_859(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then
                j_5_reg_1045 <= j_5_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln338_reg_965 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                j_reg_990 <= j_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln338_reg_965 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                lhs_digits_data_V_lo_reg_984 <= lhs_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                mul_ln362_reg_1070 <= grp_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln352_fu_705_p2 = ap_const_lv1_0))) then
                p_res_digits_data_V_a_3_reg_1034 <= zext_ln356_fu_722_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln338_fu_617_p2 = ap_const_lv1_0))) then
                p_res_digits_data_V_a_reg_979 <= zext_ln342_fu_634_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                p_res_tmp_bits_3_reg_1075 <= p_res_tmp_bits_3_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln364_reg_1080 = ap_const_lv1_0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln338_reg_965 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then
                reg_439 <= p_res_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then
                rhs_digits_data_V_lo_reg_1039 <= rhs_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (exitcond_i_reg_906_pp1_iter2_reg = ap_const_lv1_0))) then
                tmp_3_reg_946 <= tmp_V_19_fu_574_p2(64 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_906_pp1_iter1_reg = ap_const_lv1_0))) then
                tmp_V_18_reg_940 <= tmp_V_18_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln54_reg_850 = ap_const_lv1_0))) then
                z0_digits_data_V_loa_reg_874 <= z0_digits_data_V_q0;
                z2_digits_data_V_loa_reg_880 <= z2_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                z1_tmp_bits_reg_956 <= z1_tmp_bits_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln364_fu_806_p2 = ap_const_lv1_0))) then
                    zext_ln367_reg_1089(6 downto 0) <= zext_ln367_fu_818_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_444_p2 = ap_const_lv1_0))) then
                    zext_ln59_reg_859(5 downto 0) <= zext_ln59_fu_456_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_fu_525_p2 = ap_const_lv1_0))) then
                    zext_ln81_reg_915(5 downto 0) <= zext_ln81_fu_537_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln59_reg_859(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln59_reg_859_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_915(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_915_pp1_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_915_pp1_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_915_pp1_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln348_reg_1010(2) <= '0';
    zext_ln367_reg_1089(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln367_reg_1089_pp4_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp4_iter1, icmp_ln54_fu_444_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, exitcond_i_fu_525_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, icmp_ln334_fu_612_p2, ap_CS_fsm_state13, grp_CAT_I_I_I_O_1_fu_428_ap_done, icmp_ln338_fu_617_p2, ap_enable_reg_pp2_iter1, ap_CS_fsm_state18, icmp_ln348_fu_700_p2, icmp_ln352_fu_705_p2, ap_enable_reg_pp3_iter1, icmp_ln364_fu_806_p2, ap_enable_reg_pp4_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter4, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp3_stage0_subdone, ap_block_pp3_stage1_subdone, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_444_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_444_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_i_fu_525_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_i_fu_525_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln334_fu_612_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((grp_CAT_I_I_I_O_1_fu_428_ap_done = ap_const_logic_1) and (icmp_ln334_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln338_fu_617_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln338_fu_617_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln348_fu_700_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln352_fu_705_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln352_fu_705_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln364_fu_806_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln364_fu_806_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    add2_digits_data_V_address0_assign_proc : process(zext_ln59_reg_859_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln81_fu_537_p1, ap_block_pp1_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            add2_digits_data_V_address0 <= zext_ln81_fu_537_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add2_digits_data_V_address0 <= zext_ln59_reg_859_pp0_iter1_reg(5 - 1 downto 0);
        else 
            add2_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    add2_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            add2_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            add2_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    add2_digits_data_V_we0_assign_proc : process(icmp_ln54_reg_850_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln54_reg_850_pp0_iter1_reg = ap_const_lv1_0))) then 
            add2_digits_data_V_we0 <= ap_const_logic_1;
        else 
            add2_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add2_tmp_bits_fu_520_p2 <= std_logic_vector(unsigned(add_ln64_fu_515_p2) + unsigned(z2_tmp_bits_read));
    add_ln209_14_fu_479_p2 <= std_logic_vector(unsigned(z2_digits_data_V_loa_reg_880) + unsigned(zext_ln700_26_fu_469_p1));
    add_ln209_15_fu_662_p2 <= std_logic_vector(unsigned(reg_439) + unsigned(zext_ln700_30_fu_652_p1));
    add_ln209_16_fu_750_p2 <= std_logic_vector(unsigned(reg_439) + unsigned(zext_ln700_34_fu_740_p1));
    add_ln209_5_fu_756_p2 <= std_logic_vector(unsigned(add_ln209_16_fu_750_p2) + unsigned(rhs_digits_data_V_lo_reg_1039));
    add_ln209_6_fu_484_p2 <= std_logic_vector(unsigned(add_ln209_14_fu_479_p2) + unsigned(z0_digits_data_V_loa_reg_874));
    add_ln209_fu_668_p2 <= std_logic_vector(unsigned(add_ln209_15_fu_662_p2) + unsigned(lhs_digits_data_V_lo_reg_984));
    add_ln64_fu_515_p2 <= std_logic_vector(unsigned(zext_ln64_fu_511_p1) + unsigned(z0_tmp_bits_read));
    add_ln700_21_fu_587_p2 <= std_logic_vector(unsigned(trunc_ln701_fu_571_p1) + unsigned(select_ln701_2_fu_563_p3));
    add_ln700_fu_473_p2 <= std_logic_vector(unsigned(zext_ln209_fu_466_p1) + unsigned(zext_ln54_fu_462_p1));
    add_ln96_fu_601_p2 <= std_logic_vector(unsigned(cross_mul_tmp_bits_read) + unsigned(p_neg207_i_fu_593_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(5);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state23 <= ap_CS_fsm(12);
    ap_CS_fsm_state27 <= ap_CS_fsm(16);
    ap_CS_fsm_state28 <= ap_CS_fsm(17);
    ap_CS_fsm_state32 <= ap_CS_fsm(19);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln54_fu_444_p2)
    begin
        if ((icmp_ln54_fu_444_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(exitcond_i_fu_525_p2)
    begin
        if ((exitcond_i_fu_525_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state14_assign_proc : process(icmp_ln338_fu_617_p2)
    begin
        if ((icmp_ln338_fu_617_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state19_assign_proc : process(icmp_ln352_fu_705_p2)
    begin
        if ((icmp_ln352_fu_705_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state29_assign_proc : process(icmp_ln364_fu_806_p2)
    begin
        if ((icmp_ln364_fu_806_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i3_0_phi_fu_389_p4_assign_proc : process(i3_0_reg_385, icmp_ln352_reg_1020, ap_CS_fsm_pp3_stage0, i_29_reg_1024, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
            ap_phi_mux_i3_0_phi_fu_389_p4 <= i_29_reg_1024;
        else 
            ap_phi_mux_i3_0_phi_fu_389_p4 <= i3_0_reg_385;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_296_p4_assign_proc : process(i_0_i_reg_292, icmp_ln54_reg_850, ap_CS_fsm_pp0_stage0, i_27_reg_854, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_850 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i_phi_fu_296_p4 <= i_27_reg_854;
        else 
            ap_phi_mux_i_0_i_phi_fu_296_p4 <= i_0_i_reg_292;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_342_p4_assign_proc : process(i_0_reg_338, icmp_ln338_reg_965, ap_CS_fsm_pp2_stage0, i_reg_969, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln338_reg_965 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_342_p4 <= i_reg_969;
        else 
            ap_phi_mux_i_0_phi_fu_342_p4 <= i_0_reg_338;
        end if; 
    end process;


    ap_phi_mux_j4_0_phi_fu_400_p4_assign_proc : process(j4_0_reg_396, icmp_ln352_reg_1020, ap_CS_fsm_pp3_stage0, j_5_reg_1045, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
            ap_phi_mux_j4_0_phi_fu_400_p4 <= j_5_reg_1045;
        else 
            ap_phi_mux_j4_0_phi_fu_400_p4 <= j4_0_reg_396;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_353_p4_assign_proc : process(j_0_reg_349, icmp_ln338_reg_965, ap_CS_fsm_pp2_stage0, j_reg_990, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln338_reg_965 = ap_const_lv1_0))) then 
            ap_phi_mux_j_0_phi_fu_353_p4 <= j_reg_990;
        else 
            ap_phi_mux_j_0_phi_fu_353_p4 <= j_0_reg_349;
        end if; 
    end process;


    ap_phi_mux_op2_assign_phi_fu_307_p4_assign_proc : process(op2_assign_reg_303, exitcond_i_reg_906_pp1_iter3_reg, tmp_3_reg_946, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (exitcond_i_reg_906_pp1_iter3_reg = ap_const_lv1_0))) then 
            ap_phi_mux_op2_assign_phi_fu_307_p4 <= tmp_3_reg_946;
        else 
            ap_phi_mux_op2_assign_phi_fu_307_p4 <= op2_assign_reg_303;
        end if; 
    end process;


    ap_phi_mux_p_res_tmp_bits_0_phi_fu_365_p4_assign_proc : process(p_0106_0_reg_326, icmp_ln334_reg_961, ap_CS_fsm_state18, p_res_tmp_bits_0_reg_361)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln334_reg_961 = ap_const_lv1_0))) then 
            ap_phi_mux_p_res_tmp_bits_0_phi_fu_365_p4 <= p_0106_0_reg_326;
        else 
            ap_phi_mux_p_res_tmp_bits_0_phi_fu_365_p4 <= p_res_tmp_bits_0_reg_361;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cross_mul_digits_data_V_address0 <= zext_ln81_fu_537_p1(5 - 1 downto 0);

    cross_mul_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            cross_mul_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            cross_mul_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_525_p2 <= "1" when (i_0_i11_reg_315 = ap_const_lv6_20) else "0";
    grp_CAT_I_I_I_O_1_fu_428_ap_start <= grp_CAT_I_I_I_O_1_fu_428_ap_start_reg;
    i_27_fu_450_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_296_p4) + unsigned(ap_const_lv6_1));
    i_28_fu_531_p2 <= std_logic_vector(unsigned(i_0_i11_reg_315) + unsigned(ap_const_lv6_1));
    i_29_fu_711_p2 <= std_logic_vector(unsigned(ap_phi_mux_i3_0_phi_fu_389_p4) + unsigned(ap_const_lv6_1));
    i_30_fu_812_p2 <= std_logic_vector(unsigned(i5_0_reg_417) + unsigned(ap_const_lv7_1));
    i_fu_623_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_342_p4) + unsigned(ap_const_lv6_1));
    icmp_ln334_fu_612_p0 <= rhs_tmp_bits_read;
    icmp_ln334_fu_612_p2 <= "1" when (icmp_ln334_fu_612_p0 = ap_const_lv32_0) else "0";
    icmp_ln338_fu_617_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_342_p4 = ap_const_lv6_20) else "0";
    icmp_ln348_fu_700_p0 <= lhs_tmp_bits_read;
    icmp_ln348_fu_700_p2 <= "1" when (icmp_ln348_fu_700_p0 = ap_const_lv32_0) else "0";
    icmp_ln352_fu_705_p2 <= "1" when (ap_phi_mux_i3_0_phi_fu_389_p4 = ap_const_lv6_20) else "0";
    icmp_ln364_fu_806_p2 <= "1" when (i5_0_reg_417 = ap_const_lv7_40) else "0";
    icmp_ln54_fu_444_p2 <= "1" when (ap_phi_mux_i_0_i_phi_fu_296_p4 = ap_const_lv6_20) else "0";
    j_5_fu_727_p2 <= std_logic_vector(unsigned(j4_0_reg_396) + unsigned(ap_const_lv7_1));
    j_fu_639_p2 <= std_logic_vector(unsigned(j_0_reg_349) + unsigned(ap_const_lv7_1));
    lhs_digits_data_V_address0 <= zext_ln341_fu_629_p1(5 - 1 downto 0);

    lhs_digits_data_V_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            lhs_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            lhs_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_neg207_i_fu_593_p3 <= 
        ap_const_lv32_FFFFFFFF when (op2_assign_reg_303(0) = '1') else 
        ap_const_lv32_0;

    p_res_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_CS_fsm_state13, ap_CS_fsm_pp2_stage0, p_res_digits_data_V_a_reg_979_pp2_iter1_reg, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, p_res_digits_data_V_a_3_reg_1034_pp3_iter1_reg, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, zext_ln367_fu_818_p1, grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_address0, ap_block_pp2_stage0, ap_block_pp3_stage0, zext_ln342_fu_634_p1, zext_ln356_fu_722_p1, ap_block_pp4_stage0, ap_block_pp2_stage1, ap_block_pp3_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            p_res_digits_data_V_address0 <= zext_ln367_fu_818_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            p_res_digits_data_V_address0 <= p_res_digits_data_V_a_3_reg_1034_pp3_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            p_res_digits_data_V_address0 <= zext_ln356_fu_722_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            p_res_digits_data_V_address0 <= p_res_digits_data_V_a_reg_979_pp2_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            p_res_digits_data_V_address0 <= zext_ln342_fu_634_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_res_digits_data_V_address0 <= grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_address0;
        else 
            p_res_digits_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_res_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state13, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_ce0)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then 
            p_res_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_res_digits_data_V_ce0 <= grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_ce0;
        else 
            p_res_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_res_digits_data_V_d0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp3_stage1, ap_CS_fsm_state13, add_ln209_reg_1000, ap_enable_reg_pp2_iter1, add_ln209_5_reg_1055, ap_enable_reg_pp3_iter1, grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_d0, ap_block_pp2_stage1, ap_block_pp3_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            p_res_digits_data_V_d0 <= add_ln209_5_reg_1055;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            p_res_digits_data_V_d0 <= add_ln209_reg_1000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_res_digits_data_V_d0 <= grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_d0;
        else 
            p_res_digits_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_res_digits_data_V_we0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_state13, icmp_ln338_reg_965_pp2_iter1_reg, ap_enable_reg_pp2_iter1, icmp_ln352_reg_1020_pp3_iter1_reg, ap_enable_reg_pp3_iter1, grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_we0)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (icmp_ln352_reg_1020_pp3_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln338_reg_965_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then 
            p_res_digits_data_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_res_digits_data_V_we0 <= grp_CAT_I_I_I_O_1_fu_428_w_digits_data_V_we0;
        else 
            p_res_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_res_tmp_bits_3_fu_801_p2 <= std_logic_vector(unsigned(mul_ln362_reg_1070) + unsigned(zext_ln362_fu_797_p1));
    p_res_tmp_bits_fu_788_p2 <= std_logic_vector(unsigned(zext_ln348_reg_1010) + unsigned(zext_ln360_fu_784_p1));
    res_digits_data_V_address0 <= zext_ln367_reg_1089_pp4_iter1_reg(6 - 1 downto 0);

    res_digits_data_V_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            res_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            res_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_digits_data_V_d0 <= reg_439;

    res_digits_data_V_we0_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln364_reg_1080_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln364_reg_1080_pp4_iter1_reg = ap_const_lv1_0))) then 
            res_digits_data_V_we0 <= ap_const_logic_1;
        else 
            res_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_tmp_bits <= p_res_tmp_bits_3_reg_1075;

    res_tmp_bits_ap_vld_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            res_tmp_bits_ap_vld <= ap_const_logic_1;
        else 
            res_tmp_bits_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rhs_digits_data_V_address0 <= zext_ln355_fu_717_p1(5 - 1 downto 0);

    rhs_digits_data_V_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            rhs_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            rhs_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln701_2_fu_563_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (ap_phi_mux_op2_assign_phi_fu_307_p4(0) = '1') else 
        ap_const_lv64_0;
    select_ln701_fu_555_p3 <= 
        ap_const_lv65_1FFFFFFFFFFFFFFFF when (ap_phi_mux_op2_assign_phi_fu_307_p4(0) = '1') else 
        ap_const_lv65_0;
    tmp_V_17_fu_495_p2 <= std_logic_vector(unsigned(zext_ln700_27_fu_492_p1) + unsigned(zext_ln700_fu_489_p1));
    tmp_V_18_fu_549_p2 <= std_logic_vector(unsigned(zext_ln180_fu_543_p1) - unsigned(zext_ln701_fu_546_p1));
    tmp_V_19_fu_574_p2 <= std_logic_vector(unsigned(select_ln701_fu_555_p3) + unsigned(tmp_V_18_reg_940));
    tmp_V_22_fu_768_p2 <= std_logic_vector(unsigned(zext_ln700_35_fu_765_p1) + unsigned(zext_ln700_33_fu_761_p1));
    tmp_V_23_fu_656_p2 <= std_logic_vector(unsigned(zext_ln700_28_fu_649_p1) + unsigned(zext_ln338_fu_645_p1));
    tmp_V_24_fu_744_p2 <= std_logic_vector(unsigned(zext_ln700_32_fu_737_p1) + unsigned(zext_ln352_fu_733_p1));
    tmp_V_fu_680_p2 <= std_logic_vector(unsigned(zext_ln700_31_fu_677_p1) + unsigned(zext_ln700_29_fu_673_p1));
    trunc_ln701_fu_571_p1 <= tmp_V_18_reg_940(64 - 1 downto 0);

    z0_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln59_fu_456_p1, ap_CS_fsm_state13, grp_CAT_I_I_I_O_1_fu_428_x0_digits_data_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z0_digits_data_V_address0 <= zext_ln59_fu_456_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z0_digits_data_V_address0 <= grp_CAT_I_I_I_O_1_fu_428_x0_digits_data_V_address0;
        else 
            z0_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    z0_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, grp_CAT_I_I_I_O_1_fu_428_x0_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            z0_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z0_digits_data_V_ce0 <= grp_CAT_I_I_I_O_1_fu_428_x0_digits_data_V_ce0;
        else 
            z0_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z1_digits_data_V_address0_assign_proc : process(zext_ln81_reg_915_pp1_iter3_reg, ap_CS_fsm_state13, ap_enable_reg_pp1_iter4, grp_CAT_I_I_I_O_1_fu_428_x1_digits_data_V_address0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            z1_digits_data_V_address0 <= zext_ln81_reg_915_pp1_iter3_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z1_digits_data_V_address0 <= grp_CAT_I_I_I_O_1_fu_428_x1_digits_data_V_address0;
        else 
            z1_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    z1_digits_data_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state13, ap_enable_reg_pp1_iter4, grp_CAT_I_I_I_O_1_fu_428_x1_digits_data_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            z1_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z1_digits_data_V_ce0 <= grp_CAT_I_I_I_O_1_fu_428_x1_digits_data_V_ce0;
        else 
            z1_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z1_digits_data_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_i_reg_906_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (exitcond_i_reg_906_pp1_iter3_reg = ap_const_lv1_0))) then 
            z1_digits_data_V_we0 <= ap_const_logic_1;
        else 
            z1_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_tmp_bits_fu_606_p2 <= std_logic_vector(unsigned(add_ln96_fu_601_p2) - unsigned(add2_tmp_bits_reg_901));

    z2_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln59_fu_456_p1, ap_CS_fsm_state13, grp_CAT_I_I_I_O_1_fu_428_x2_digits_data_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z2_digits_data_V_address0 <= zext_ln59_fu_456_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z2_digits_data_V_address0 <= grp_CAT_I_I_I_O_1_fu_428_x2_digits_data_V_address0;
        else 
            z2_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    z2_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, grp_CAT_I_I_I_O_1_fu_428_x2_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            z2_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z2_digits_data_V_ce0 <= grp_CAT_I_I_I_O_1_fu_428_x2_digits_data_V_ce0;
        else 
            z2_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln180_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cross_mul_digits_dat_4_reg_930),65));
    zext_ln209_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z0_digits_data_V_loa_reg_874),65));
    zext_ln338_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0106_0_reg_326),65));
    zext_ln341_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_342_p4),64));
    zext_ln342_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_phi_fu_353_p4),64));
    zext_ln348_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_res_tmp_bits_0_phi_fu_365_p4),3));
    zext_ln352_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0103_0_reg_373),65));
    zext_ln355_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i3_0_phi_fu_389_p4),64));
    zext_ln356_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j4_0_phi_fu_400_p4),64));
    zext_ln360_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0103_0_reg_373),3));
    zext_ln362_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_res_tmp_bits_1_reg_408),32));
    zext_ln367_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_417),64));
    zext_ln54_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_280),65));
    zext_ln59_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i_phi_fu_296_p4),64));
    zext_ln64_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_280),32));
    zext_ln700_26_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_280),64));
    zext_ln700_27_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_reg_886),66));
    zext_ln700_28_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_digits_data_V_lo_reg_984),65));
    zext_ln700_29_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_439),66));
    zext_ln700_30_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0106_0_reg_326),64));
    zext_ln700_31_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_23_reg_995),66));
    zext_ln700_32_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_digits_data_V_lo_reg_1039),65));
    zext_ln700_33_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_439),66));
    zext_ln700_34_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0103_0_reg_373),64));
    zext_ln700_35_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_24_reg_1050),66));
    zext_ln700_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z2_digits_data_V_loa_reg_880),66));
    zext_ln701_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add2_digits_data_V_l_reg_935),65));
    zext_ln81_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i11_reg_315),64));
end behav;
