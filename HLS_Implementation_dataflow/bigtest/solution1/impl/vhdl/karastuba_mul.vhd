-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity karastuba_mul is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    hs_input_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    res_output_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    hs_input_V_TVALID : IN STD_LOGIC;
    hs_input_V_TREADY : OUT STD_LOGIC;
    res_output_V_TVALID : OUT STD_LOGIC;
    res_output_V_TREADY : IN STD_LOGIC );
end;


architecture behav of karastuba_mul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "karastuba_mul,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu095-ffva2104-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.616000,HLS_SYN_LAT=3160,HLS_SYN_TPT=2042,HLS_SYN_MEM=372,HLS_SYN_DSP=117,HLS_SYN_FF=99686,HLS_SYN_LUT=107140,HLS_VERSION=2019_2_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal lhs_digits_data_V_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_digits_data_V_t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_digits_data_V_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_digits_data_V_t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_digits_data_V_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_digits_data_V_t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_hs_input_V_TREADY : STD_LOGIC;
    signal Loop_1_proc_U0_lhs_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_1_proc_U0_lhs_digits_data_V_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_lhs_digits_data_V_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_lhs_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_1_proc_U0_rhs_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_1_proc_U0_rhs_digits_data_V_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_rhs_digits_data_V_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_rhs_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_channel_done_rhs_digits_data_V : STD_LOGIC;
    signal Loop_1_proc_U0_rhs_digits_data_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rhs_digits_data_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_rhs_digits_data_V : STD_LOGIC;
    signal ap_channel_done_lhs_digits_data_V : STD_LOGIC;
    signal Loop_1_proc_U0_lhs_digits_data_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_lhs_digits_data_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_lhs_digits_data_V : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_we0 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_ce1 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_we1 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_we0 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_ce1 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_we1 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_res_digits_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal karastuba_mul_templa_3_U0_res_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_res_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_templa_3_U0_res_digits_data_V_we0 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_res_digits_data_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal karastuba_mul_templa_3_U0_res_digits_data_V_ce1 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_res_digits_data_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_templa_3_U0_res_digits_data_V_we1 : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_lhs_digits_data_V_read : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_rhs_digits_data_V_read : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_ap_start : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_res_digits_data_V_full_n : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_res_digits_data_V_write : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_ap_done : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_ap_ready : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_ap_idle : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_ap_continue : STD_LOGIC;
    signal ap_channel_done_res_digits_data_V : STD_LOGIC;
    signal Loop_2_proc_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc_U0_res_digits_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Loop_2_proc_U0_res_digits_data_V_ce0 : STD_LOGIC;
    signal Loop_2_proc_U0_res_output_V_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_2_proc_U0_res_output_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal lhs_digits_data_V_i_full_n : STD_LOGIC;
    signal lhs_digits_data_V_t_empty_n : STD_LOGIC;
    signal rhs_digits_data_V_i_full_n : STD_LOGIC;
    signal rhs_digits_data_V_t_empty_n : STD_LOGIC;
    signal res_digits_data_V_i_full_n : STD_LOGIC;
    signal res_digits_data_V_t_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Loop_1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_start_write : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_start_full_n : STD_LOGIC;
    signal karastuba_mul_templa_3_U0_start_write : STD_LOGIC;
    signal Loop_2_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_2_proc_U0_start_write : STD_LOGIC;

    component Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hs_input_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        hs_input_V_TVALID : IN STD_LOGIC;
        hs_input_V_TREADY : OUT STD_LOGIC;
        lhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lhs_digits_data_V_ce0 : OUT STD_LOGIC;
        lhs_digits_data_V_we0 : OUT STD_LOGIC;
        lhs_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        rhs_digits_data_V_ce0 : OUT STD_LOGIC;
        rhs_digits_data_V_we0 : OUT STD_LOGIC;
        rhs_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component karastuba_mul_templa_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        lhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lhs_digits_data_V_ce0 : OUT STD_LOGIC;
        lhs_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        lhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        lhs_digits_data_V_we0 : OUT STD_LOGIC;
        lhs_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lhs_digits_data_V_ce1 : OUT STD_LOGIC;
        lhs_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        lhs_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        lhs_digits_data_V_we1 : OUT STD_LOGIC;
        rhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        rhs_digits_data_V_ce0 : OUT STD_LOGIC;
        rhs_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_we0 : OUT STD_LOGIC;
        rhs_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        rhs_digits_data_V_ce1 : OUT STD_LOGIC;
        rhs_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_we1 : OUT STD_LOGIC;
        res_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        res_digits_data_V_ce0 : OUT STD_LOGIC;
        res_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        res_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        res_digits_data_V_we0 : OUT STD_LOGIC;
        res_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        res_digits_data_V_ce1 : OUT STD_LOGIC;
        res_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        res_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        res_digits_data_V_we1 : OUT STD_LOGIC;
        lhs_digits_data_V_empty_n : IN STD_LOGIC;
        lhs_digits_data_V_read : OUT STD_LOGIC;
        rhs_digits_data_V_empty_n : IN STD_LOGIC;
        rhs_digits_data_V_read : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        res_digits_data_V_full_n : IN STD_LOGIC;
        res_digits_data_V_write : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Loop_2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        res_digits_data_V_ce0 : OUT STD_LOGIC;
        res_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        res_output_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        res_output_V_TVALID : OUT STD_LOGIC;
        res_output_V_TREADY : IN STD_LOGIC );
    end component;


    component karastuba_mul_lhsbek IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component karastuba_mul_resbgk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component karastuba_mul_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    karastuba_mul_AXILiteS_s_axi_U : component karastuba_mul_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    lhs_digits_data_V_U : component karastuba_mul_lhsbek
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_1_proc_U0_lhs_digits_data_V_address0,
        i_ce0 => Loop_1_proc_U0_lhs_digits_data_V_ce0,
        i_we0 => Loop_1_proc_U0_lhs_digits_data_V_we0,
        i_d0 => Loop_1_proc_U0_lhs_digits_data_V_d0,
        i_q0 => lhs_digits_data_V_i_q0,
        t_address0 => karastuba_mul_templa_3_U0_lhs_digits_data_V_address0,
        t_ce0 => karastuba_mul_templa_3_U0_lhs_digits_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv64_0,
        t_q0 => lhs_digits_data_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => lhs_digits_data_V_i_full_n,
        i_write => ap_channel_done_lhs_digits_data_V,
        t_empty_n => lhs_digits_data_V_t_empty_n,
        t_read => karastuba_mul_templa_3_U0_ap_ready);

    rhs_digits_data_V_U : component karastuba_mul_lhsbek
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_1_proc_U0_rhs_digits_data_V_address0,
        i_ce0 => Loop_1_proc_U0_rhs_digits_data_V_ce0,
        i_we0 => Loop_1_proc_U0_rhs_digits_data_V_we0,
        i_d0 => Loop_1_proc_U0_rhs_digits_data_V_d0,
        i_q0 => rhs_digits_data_V_i_q0,
        t_address0 => karastuba_mul_templa_3_U0_rhs_digits_data_V_address0,
        t_ce0 => karastuba_mul_templa_3_U0_rhs_digits_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv64_0,
        t_q0 => rhs_digits_data_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => rhs_digits_data_V_i_full_n,
        i_write => ap_channel_done_rhs_digits_data_V,
        t_empty_n => rhs_digits_data_V_t_empty_n,
        t_read => karastuba_mul_templa_3_U0_ap_ready);

    res_digits_data_V_U : component karastuba_mul_resbgk
    generic map (
        DataWidth => 64,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => karastuba_mul_templa_3_U0_res_digits_data_V_address0,
        i_ce0 => karastuba_mul_templa_3_U0_res_digits_data_V_ce0,
        i_we0 => karastuba_mul_templa_3_U0_res_digits_data_V_we0,
        i_d0 => karastuba_mul_templa_3_U0_res_digits_data_V_d0,
        i_q0 => res_digits_data_V_i_q0,
        t_address0 => Loop_2_proc_U0_res_digits_data_V_address0,
        t_ce0 => Loop_2_proc_U0_res_digits_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv64_0,
        t_q0 => res_digits_data_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => res_digits_data_V_i_full_n,
        i_write => karastuba_mul_templa_3_U0_ap_done,
        t_empty_n => res_digits_data_V_t_empty_n,
        t_read => Loop_2_proc_U0_ap_ready);

    Loop_1_proc_U0 : component Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc_U0_ap_start,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        hs_input_V_TDATA => hs_input_V_TDATA,
        hs_input_V_TVALID => hs_input_V_TVALID,
        hs_input_V_TREADY => Loop_1_proc_U0_hs_input_V_TREADY,
        lhs_digits_data_V_address0 => Loop_1_proc_U0_lhs_digits_data_V_address0,
        lhs_digits_data_V_ce0 => Loop_1_proc_U0_lhs_digits_data_V_ce0,
        lhs_digits_data_V_we0 => Loop_1_proc_U0_lhs_digits_data_V_we0,
        lhs_digits_data_V_d0 => Loop_1_proc_U0_lhs_digits_data_V_d0,
        rhs_digits_data_V_address0 => Loop_1_proc_U0_rhs_digits_data_V_address0,
        rhs_digits_data_V_ce0 => Loop_1_proc_U0_rhs_digits_data_V_ce0,
        rhs_digits_data_V_we0 => Loop_1_proc_U0_rhs_digits_data_V_we0,
        rhs_digits_data_V_d0 => Loop_1_proc_U0_rhs_digits_data_V_d0);

    karastuba_mul_templa_3_U0 : component karastuba_mul_templa_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        lhs_digits_data_V_address0 => karastuba_mul_templa_3_U0_lhs_digits_data_V_address0,
        lhs_digits_data_V_ce0 => karastuba_mul_templa_3_U0_lhs_digits_data_V_ce0,
        lhs_digits_data_V_d0 => karastuba_mul_templa_3_U0_lhs_digits_data_V_d0,
        lhs_digits_data_V_q0 => lhs_digits_data_V_t_q0,
        lhs_digits_data_V_we0 => karastuba_mul_templa_3_U0_lhs_digits_data_V_we0,
        lhs_digits_data_V_address1 => karastuba_mul_templa_3_U0_lhs_digits_data_V_address1,
        lhs_digits_data_V_ce1 => karastuba_mul_templa_3_U0_lhs_digits_data_V_ce1,
        lhs_digits_data_V_d1 => karastuba_mul_templa_3_U0_lhs_digits_data_V_d1,
        lhs_digits_data_V_q1 => ap_const_lv64_0,
        lhs_digits_data_V_we1 => karastuba_mul_templa_3_U0_lhs_digits_data_V_we1,
        rhs_digits_data_V_address0 => karastuba_mul_templa_3_U0_rhs_digits_data_V_address0,
        rhs_digits_data_V_ce0 => karastuba_mul_templa_3_U0_rhs_digits_data_V_ce0,
        rhs_digits_data_V_d0 => karastuba_mul_templa_3_U0_rhs_digits_data_V_d0,
        rhs_digits_data_V_q0 => rhs_digits_data_V_t_q0,
        rhs_digits_data_V_we0 => karastuba_mul_templa_3_U0_rhs_digits_data_V_we0,
        rhs_digits_data_V_address1 => karastuba_mul_templa_3_U0_rhs_digits_data_V_address1,
        rhs_digits_data_V_ce1 => karastuba_mul_templa_3_U0_rhs_digits_data_V_ce1,
        rhs_digits_data_V_d1 => karastuba_mul_templa_3_U0_rhs_digits_data_V_d1,
        rhs_digits_data_V_q1 => ap_const_lv64_0,
        rhs_digits_data_V_we1 => karastuba_mul_templa_3_U0_rhs_digits_data_V_we1,
        res_digits_data_V_address0 => karastuba_mul_templa_3_U0_res_digits_data_V_address0,
        res_digits_data_V_ce0 => karastuba_mul_templa_3_U0_res_digits_data_V_ce0,
        res_digits_data_V_d0 => karastuba_mul_templa_3_U0_res_digits_data_V_d0,
        res_digits_data_V_q0 => ap_const_lv64_0,
        res_digits_data_V_we0 => karastuba_mul_templa_3_U0_res_digits_data_V_we0,
        res_digits_data_V_address1 => karastuba_mul_templa_3_U0_res_digits_data_V_address1,
        res_digits_data_V_ce1 => karastuba_mul_templa_3_U0_res_digits_data_V_ce1,
        res_digits_data_V_d1 => karastuba_mul_templa_3_U0_res_digits_data_V_d1,
        res_digits_data_V_q1 => ap_const_lv64_0,
        res_digits_data_V_we1 => karastuba_mul_templa_3_U0_res_digits_data_V_we1,
        lhs_digits_data_V_empty_n => ap_const_logic_0,
        lhs_digits_data_V_read => karastuba_mul_templa_3_U0_lhs_digits_data_V_read,
        rhs_digits_data_V_empty_n => ap_const_logic_0,
        rhs_digits_data_V_read => karastuba_mul_templa_3_U0_rhs_digits_data_V_read,
        ap_start => karastuba_mul_templa_3_U0_ap_start,
        res_digits_data_V_full_n => res_digits_data_V_i_full_n,
        res_digits_data_V_write => karastuba_mul_templa_3_U0_res_digits_data_V_write,
        ap_done => karastuba_mul_templa_3_U0_ap_done,
        ap_ready => karastuba_mul_templa_3_U0_ap_ready,
        ap_idle => karastuba_mul_templa_3_U0_ap_idle,
        ap_continue => karastuba_mul_templa_3_U0_ap_continue);

    Loop_2_proc_U0 : component Loop_2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc_U0_ap_start,
        ap_done => Loop_2_proc_U0_ap_done,
        ap_continue => Loop_2_proc_U0_ap_continue,
        ap_idle => Loop_2_proc_U0_ap_idle,
        ap_ready => Loop_2_proc_U0_ap_ready,
        res_digits_data_V_address0 => Loop_2_proc_U0_res_digits_data_V_address0,
        res_digits_data_V_ce0 => Loop_2_proc_U0_res_digits_data_V_ce0,
        res_digits_data_V_q0 => res_digits_data_V_t_q0,
        res_output_V_TDATA => Loop_2_proc_U0_res_output_V_TDATA,
        res_output_V_TVALID => Loop_2_proc_U0_res_output_V_TVALID,
        res_output_V_TREADY => res_output_V_TREADY);





    ap_sync_reg_channel_write_lhs_digits_data_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_lhs_digits_data_V <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_lhs_digits_data_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_lhs_digits_data_V <= ap_sync_channel_write_lhs_digits_data_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_rhs_digits_data_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_rhs_digits_data_V <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rhs_digits_data_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rhs_digits_data_V <= ap_sync_channel_write_rhs_digits_data_V;
                end if; 
            end if;
        end if;
    end process;

    Loop_1_proc_U0_ap_continue <= (ap_sync_channel_write_rhs_digits_data_V and ap_sync_channel_write_lhs_digits_data_V);
    Loop_1_proc_U0_ap_start <= ap_start;
    Loop_1_proc_U0_lhs_digits_data_V_full_n <= lhs_digits_data_V_i_full_n;
    Loop_1_proc_U0_rhs_digits_data_V_full_n <= rhs_digits_data_V_i_full_n;
    Loop_1_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc_U0_start_write <= ap_const_logic_0;
    Loop_2_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc_U0_ap_start <= res_digits_data_V_t_empty_n;
    Loop_2_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_2_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_lhs_digits_data_V <= ((ap_sync_reg_channel_write_lhs_digits_data_V xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_res_digits_data_V <= karastuba_mul_templa_3_U0_ap_done;
    ap_channel_done_rhs_digits_data_V <= ((ap_sync_reg_channel_write_rhs_digits_data_V xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_done <= Loop_2_proc_U0_ap_done;
    ap_idle <= (karastuba_mul_templa_3_U0_ap_idle and (res_digits_data_V_t_empty_n xor ap_const_logic_1) and (rhs_digits_data_V_t_empty_n xor ap_const_logic_1) and (lhs_digits_data_V_t_empty_n xor ap_const_logic_1) and Loop_2_proc_U0_ap_idle and Loop_1_proc_U0_ap_idle);
    ap_ready <= Loop_1_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_lhs_digits_data_V <= ((ap_channel_done_lhs_digits_data_V and Loop_1_proc_U0_lhs_digits_data_V_full_n) or ap_sync_reg_channel_write_lhs_digits_data_V);
    ap_sync_channel_write_rhs_digits_data_V <= ((ap_channel_done_rhs_digits_data_V and Loop_1_proc_U0_rhs_digits_data_V_full_n) or ap_sync_reg_channel_write_rhs_digits_data_V);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_2_proc_U0_ap_done;
    ap_sync_ready <= Loop_1_proc_U0_ap_ready;
    hs_input_V_TREADY <= Loop_1_proc_U0_hs_input_V_TREADY;
    karastuba_mul_templa_3_U0_ap_continue <= karastuba_mul_templa_3_U0_res_digits_data_V_full_n;
    karastuba_mul_templa_3_U0_ap_start <= (rhs_digits_data_V_t_empty_n and lhs_digits_data_V_t_empty_n);
    karastuba_mul_templa_3_U0_res_digits_data_V_full_n <= res_digits_data_V_i_full_n;
    karastuba_mul_templa_3_U0_start_full_n <= ap_const_logic_1;
    karastuba_mul_templa_3_U0_start_write <= ap_const_logic_0;
    res_output_V_TDATA <= Loop_2_proc_U0_res_output_V_TDATA;
    res_output_V_TVALID <= Loop_2_proc_U0_res_output_V_TVALID;
end behav;
