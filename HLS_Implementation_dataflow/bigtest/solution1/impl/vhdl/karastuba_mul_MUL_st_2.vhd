-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity karastuba_mul_MUL_st_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lhs_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
    lhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    lhs_digits_data_V_ce0 : OUT STD_LOGIC;
    lhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    rhs_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
    rhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rhs_digits_data_V_ce0 : OUT STD_LOGIC;
    rhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    z0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z0_digits_data_V_ce0 : OUT STD_LOGIC;
    z0_digits_data_V_we0 : OUT STD_LOGIC;
    z0_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    z2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    z2_digits_data_V_ce0 : OUT STD_LOGIC;
    z2_digits_data_V_we0 : OUT STD_LOGIC;
    z2_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    cross_mul_digits_dat_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cross_mul_digits_dat_ce0 : OUT STD_LOGIC;
    cross_mul_digits_dat_we0 : OUT STD_LOGIC;
    cross_mul_digits_dat_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inter_lhs_digits_dat_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    inter_lhs_digits_dat_ce0 : OUT STD_LOGIC;
    inter_lhs_digits_dat_we0 : OUT STD_LOGIC;
    inter_lhs_digits_dat_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inter_rhs_digits_dat_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    inter_rhs_digits_dat_ce0 : OUT STD_LOGIC;
    inter_rhs_digits_dat_we0 : OUT STD_LOGIC;
    inter_rhs_digits_dat_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of karastuba_mul_MUL_st_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_i_reg_397 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_0_i_reg_408 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_0_i_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal i3_0_i_reg_431 : STD_LOGIC_VECTOR (3 downto 0);
    signal i4_0_i_reg_443 : STD_LOGIC_VECTOR (4 downto 0);
    signal i5_0_i_reg_454 : STD_LOGIC_VECTOR (4 downto 0);
    signal i6_0_i_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln262_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln267_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_512 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state10_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln272_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state14_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln277_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_read1_cast_i_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_read1_cast_i_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_read_cast_i_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_read_cast_i_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln262_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln262_reg_715_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_531_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln265_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_reg_724 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_reg_724_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln267_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_reg_736_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_548_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_740 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln270_1_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_1_reg_745 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_1_reg_745_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln272_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln272_reg_755_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_577_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln275_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln275_reg_764 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln275_reg_764_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln277_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_776_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_594_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_780 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal zext_ln280_1_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln280_1_reg_785 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln280_1_reg_785_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mul_I_O_fu_485_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal z0_tmp_bits_i_reg_795 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_mul_I_O_fu_485_ap_ready : STD_LOGIC;
    signal grp_mul_I_O_fu_485_ap_done : STD_LOGIC;
    signal grp_mul_I_O_fu_496_ap_ready : STD_LOGIC;
    signal grp_mul_I_O_fu_496_ap_done : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_ap_ready : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_ap_done : STD_LOGIC;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal grp_mul_I_O_fu_496_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal z2_tmp_bits_i_reg_800 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cross_mul_tmp_bits_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cross_mul_tmp_bits_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln294_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state19_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln294_reg_810_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_627_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal zext_ln297_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln297_reg_819 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln297_reg_819_pp4_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_digits_data_V_as_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_digits_data_V_as_3_reg_829 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln300_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state23_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln300_reg_834_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_644_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal zext_ln303_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln303_reg_843 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln303_reg_843_pp5_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_digits_data_V_as_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_digits_data_V_as_5_reg_853 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln306_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state27_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln306_reg_858_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_661_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal zext_ln309_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln309_reg_867 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln309_reg_867_pp6_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cross_mul_digits_da_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cross_mul_digits_da_2_reg_877 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state27 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal lhs0_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs0_digits_data_V_ce0 : STD_LOGIC;
    signal lhs0_digits_data_V_we0 : STD_LOGIC;
    signal lhs0_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs1_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs1_digits_data_V_ce0 : STD_LOGIC;
    signal lhs1_digits_data_V_we0 : STD_LOGIC;
    signal lhs1_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs0_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs0_digits_data_V_ce0 : STD_LOGIC;
    signal rhs0_digits_data_V_we0 : STD_LOGIC;
    signal rhs0_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs1_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs1_digits_data_V_ce0 : STD_LOGIC;
    signal rhs1_digits_data_V_we0 : STD_LOGIC;
    signal rhs1_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs0_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs0_tmp_digits_data_ce0 : STD_LOGIC;
    signal lhs0_tmp_digits_data_we0 : STD_LOGIC;
    signal lhs0_tmp_digits_data_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs1_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs1_tmp_digits_data_ce0 : STD_LOGIC;
    signal lhs1_tmp_digits_data_we0 : STD_LOGIC;
    signal lhs1_tmp_digits_data_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs0_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs0_tmp_digits_data_ce0 : STD_LOGIC;
    signal rhs0_tmp_digits_data_we0 : STD_LOGIC;
    signal rhs0_tmp_digits_data_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs1_tmp_digits_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs1_tmp_digits_data_ce0 : STD_LOGIC;
    signal rhs1_tmp_digits_data_we0 : STD_LOGIC;
    signal rhs1_tmp_digits_data_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_digits_data_V_as_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_digits_data_V_as_ce0 : STD_LOGIC;
    signal res_digits_data_V_as_we0 : STD_LOGIC;
    signal res_digits_data_V_as_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_digits_data_V_as_1_ce0 : STD_LOGIC;
    signal res_digits_data_V_as_1_we0 : STD_LOGIC;
    signal p_cross_mul_digits_da_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cross_mul_digits_da_ce0 : STD_LOGIC;
    signal p_cross_mul_digits_da_we0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_ap_start : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_ap_idle : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_we0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_karastuba_mul_templa_2_fu_476_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_I_O_fu_485_ap_start : STD_LOGIC;
    signal grp_mul_I_O_fu_485_ap_idle : STD_LOGIC;
    signal grp_mul_I_O_fu_485_u_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_I_O_fu_485_u_digits_data_V_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_485_v_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_I_O_fu_485_v_digits_data_V_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_485_w_digits_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_I_O_fu_485_w_digits_data_V_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_485_w_digits_data_V_we0 : STD_LOGIC;
    signal grp_mul_I_O_fu_485_w_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mul_I_O_fu_496_ap_start : STD_LOGIC;
    signal grp_mul_I_O_fu_496_ap_idle : STD_LOGIC;
    signal grp_mul_I_O_fu_496_u_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_I_O_fu_496_u_digits_data_V_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_496_v_digits_data_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_I_O_fu_496_v_digits_data_V_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_496_w_digits_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_I_O_fu_496_w_digits_data_V_ce0 : STD_LOGIC;
    signal grp_mul_I_O_fu_496_w_digits_data_V_we0 : STD_LOGIC;
    signal grp_mul_I_O_fu_496_w_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i1_0_i_phi_fu_412_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i3_0_i_phi_fu_435_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal grp_karastuba_mul_templa_2_fu_476_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_mul_I_O_fu_485_ap_start_reg : STD_LOGIC := '0';
    signal grp_mul_I_O_fu_496_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln270_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln280_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal xor_ln270_fu_554_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln280_fu_600_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln312_fu_672_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln312_1_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;

    component karastuba_mul_templa_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lhs0_tmp_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        lhs0_tmp_digits_data_V_ce0 : OUT STD_LOGIC;
        lhs0_tmp_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        lhs1_tmp_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        lhs1_tmp_digits_data_V_ce0 : OUT STD_LOGIC;
        lhs1_tmp_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs0_tmp_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        rhs0_tmp_digits_data_V_ce0 : OUT STD_LOGIC;
        rhs0_tmp_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs1_tmp_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        rhs1_tmp_digits_data_V_ce0 : OUT STD_LOGIC;
        rhs1_tmp_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        cross_mul_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cross_mul_digits_data_V_ce0 : OUT STD_LOGIC;
        cross_mul_digits_data_V_we0 : OUT STD_LOGIC;
        cross_mul_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        cross_mul_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component mul_I_O IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
        u_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        u_digits_data_V_ce0 : OUT STD_LOGIC;
        u_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        v_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
        v_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        v_digits_data_V_ce0 : OUT STD_LOGIC;
        v_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        w_digits_data_V_ce0 : OUT STD_LOGIC;
        w_digits_data_V_we0 : OUT STD_LOGIC;
        w_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        w_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component karastuba_mul_temcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component karastuba_mul_MULmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    lhs0_digits_data_V_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lhs0_digits_data_V_address0,
        ce0 => lhs0_digits_data_V_ce0,
        we0 => lhs0_digits_data_V_we0,
        d0 => lhs_digits_data_V_q0,
        q0 => lhs0_digits_data_V_q0);

    lhs1_digits_data_V_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lhs1_digits_data_V_address0,
        ce0 => lhs1_digits_data_V_ce0,
        we0 => lhs1_digits_data_V_we0,
        d0 => lhs_digits_data_V_q0,
        q0 => lhs1_digits_data_V_q0);

    rhs0_digits_data_V_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rhs0_digits_data_V_address0,
        ce0 => rhs0_digits_data_V_ce0,
        we0 => rhs0_digits_data_V_we0,
        d0 => rhs_digits_data_V_q0,
        q0 => rhs0_digits_data_V_q0);

    rhs1_digits_data_V_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rhs1_digits_data_V_address0,
        ce0 => rhs1_digits_data_V_ce0,
        we0 => rhs1_digits_data_V_we0,
        d0 => rhs_digits_data_V_q0,
        q0 => rhs1_digits_data_V_q0);

    lhs0_tmp_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lhs0_tmp_digits_data_address0,
        ce0 => lhs0_tmp_digits_data_ce0,
        we0 => lhs0_tmp_digits_data_we0,
        d0 => lhs_digits_data_V_q0,
        q0 => lhs0_tmp_digits_data_q0);

    lhs1_tmp_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lhs1_tmp_digits_data_address0,
        ce0 => lhs1_tmp_digits_data_ce0,
        we0 => lhs1_tmp_digits_data_we0,
        d0 => lhs_digits_data_V_q0,
        q0 => lhs1_tmp_digits_data_q0);

    rhs0_tmp_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rhs0_tmp_digits_data_address0,
        ce0 => rhs0_tmp_digits_data_ce0,
        we0 => rhs0_tmp_digits_data_we0,
        d0 => rhs_digits_data_V_q0,
        q0 => rhs0_tmp_digits_data_q0);

    rhs1_tmp_digits_data_U : component karastuba_mul_temcud
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rhs1_tmp_digits_data_address0,
        ce0 => rhs1_tmp_digits_data_ce0,
        we0 => rhs1_tmp_digits_data_we0,
        d0 => rhs_digits_data_V_q0,
        q0 => rhs1_tmp_digits_data_q0);

    res_digits_data_V_as_U : component karastuba_mul_MULmb6
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => res_digits_data_V_as_address0,
        ce0 => res_digits_data_V_as_ce0,
        we0 => res_digits_data_V_as_we0,
        d0 => grp_mul_I_O_fu_485_w_digits_data_V_d0,
        q0 => res_digits_data_V_as_q0);

    res_digits_data_V_as_1_U : component karastuba_mul_MULmb6
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => res_digits_data_V_as_1_address0,
        ce0 => res_digits_data_V_as_1_ce0,
        we0 => res_digits_data_V_as_1_we0,
        d0 => grp_mul_I_O_fu_496_w_digits_data_V_d0,
        q0 => res_digits_data_V_as_1_q0);

    p_cross_mul_digits_da_U : component karastuba_mul_MULmb6
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_cross_mul_digits_da_address0,
        ce0 => p_cross_mul_digits_da_ce0,
        we0 => p_cross_mul_digits_da_we0,
        d0 => grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_d0,
        q0 => p_cross_mul_digits_da_q0);

    grp_karastuba_mul_templa_2_fu_476 : component karastuba_mul_templa_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_karastuba_mul_templa_2_fu_476_ap_start,
        ap_done => grp_karastuba_mul_templa_2_fu_476_ap_done,
        ap_idle => grp_karastuba_mul_templa_2_fu_476_ap_idle,
        ap_ready => grp_karastuba_mul_templa_2_fu_476_ap_ready,
        lhs0_tmp_digits_data_V_address0 => grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_address0,
        lhs0_tmp_digits_data_V_ce0 => grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_ce0,
        lhs0_tmp_digits_data_V_q0 => lhs0_tmp_digits_data_q0,
        lhs1_tmp_digits_data_V_address0 => grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_address0,
        lhs1_tmp_digits_data_V_ce0 => grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_ce0,
        lhs1_tmp_digits_data_V_q0 => lhs1_tmp_digits_data_q0,
        rhs0_tmp_digits_data_V_address0 => grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_address0,
        rhs0_tmp_digits_data_V_ce0 => grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_ce0,
        rhs0_tmp_digits_data_V_q0 => rhs0_tmp_digits_data_q0,
        rhs1_tmp_digits_data_V_address0 => grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_address0,
        rhs1_tmp_digits_data_V_ce0 => grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_ce0,
        rhs1_tmp_digits_data_V_q0 => rhs1_tmp_digits_data_q0,
        cross_mul_digits_data_V_address0 => grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_address0,
        cross_mul_digits_data_V_ce0 => grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_ce0,
        cross_mul_digits_data_V_we0 => grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_we0,
        cross_mul_digits_data_V_d0 => grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_d0,
        cross_mul_digits_data_V_q0 => p_cross_mul_digits_da_q0,
        ap_return => grp_karastuba_mul_templa_2_fu_476_ap_return);

    grp_mul_I_O_fu_485 : component mul_I_O
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mul_I_O_fu_485_ap_start,
        ap_done => grp_mul_I_O_fu_485_ap_done,
        ap_idle => grp_mul_I_O_fu_485_ap_idle,
        ap_ready => grp_mul_I_O_fu_485_ap_ready,
        u_tmp_bits_read => ap_const_lv2_0,
        u_digits_data_V_address0 => grp_mul_I_O_fu_485_u_digits_data_V_address0,
        u_digits_data_V_ce0 => grp_mul_I_O_fu_485_u_digits_data_V_ce0,
        u_digits_data_V_q0 => lhs0_digits_data_V_q0,
        v_tmp_bits_read => ap_const_lv2_0,
        v_digits_data_V_address0 => grp_mul_I_O_fu_485_v_digits_data_V_address0,
        v_digits_data_V_ce0 => grp_mul_I_O_fu_485_v_digits_data_V_ce0,
        v_digits_data_V_q0 => rhs0_digits_data_V_q0,
        w_digits_data_V_address0 => grp_mul_I_O_fu_485_w_digits_data_V_address0,
        w_digits_data_V_ce0 => grp_mul_I_O_fu_485_w_digits_data_V_ce0,
        w_digits_data_V_we0 => grp_mul_I_O_fu_485_w_digits_data_V_we0,
        w_digits_data_V_d0 => grp_mul_I_O_fu_485_w_digits_data_V_d0,
        w_digits_data_V_q0 => res_digits_data_V_as_q0,
        ap_return => grp_mul_I_O_fu_485_ap_return);

    grp_mul_I_O_fu_496 : component mul_I_O
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mul_I_O_fu_496_ap_start,
        ap_done => grp_mul_I_O_fu_496_ap_done,
        ap_idle => grp_mul_I_O_fu_496_ap_idle,
        ap_ready => grp_mul_I_O_fu_496_ap_ready,
        u_tmp_bits_read => ap_const_lv2_0,
        u_digits_data_V_address0 => grp_mul_I_O_fu_496_u_digits_data_V_address0,
        u_digits_data_V_ce0 => grp_mul_I_O_fu_496_u_digits_data_V_ce0,
        u_digits_data_V_q0 => lhs1_digits_data_V_q0,
        v_tmp_bits_read => ap_const_lv2_0,
        v_digits_data_V_address0 => grp_mul_I_O_fu_496_v_digits_data_V_address0,
        v_digits_data_V_ce0 => grp_mul_I_O_fu_496_v_digits_data_V_ce0,
        v_digits_data_V_q0 => rhs1_digits_data_V_q0,
        w_digits_data_V_address0 => grp_mul_I_O_fu_496_w_digits_data_V_address0,
        w_digits_data_V_ce0 => grp_mul_I_O_fu_496_w_digits_data_V_ce0,
        w_digits_data_V_we0 => grp_mul_I_O_fu_496_w_digits_data_V_we0,
        w_digits_data_V_d0 => grp_mul_I_O_fu_496_w_digits_data_V_d0,
        w_digits_data_V_q0 => res_digits_data_V_as_1_q0,
        ap_return => grp_mul_I_O_fu_496_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state14)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state19)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state23)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state27) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state27)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state27);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_karastuba_mul_templa_2_fu_476_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_karastuba_mul_templa_2_fu_476_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_karastuba_mul_templa_2_fu_476_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_karastuba_mul_templa_2_fu_476_ap_ready = ap_const_logic_1)) then 
                    grp_karastuba_mul_templa_2_fu_476_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mul_I_O_fu_485_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mul_I_O_fu_485_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_mul_I_O_fu_485_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mul_I_O_fu_485_ap_ready = ap_const_logic_1)) then 
                    grp_mul_I_O_fu_485_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mul_I_O_fu_496_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mul_I_O_fu_496_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_mul_I_O_fu_496_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mul_I_O_fu_496_ap_ready = ap_const_logic_1)) then 
                    grp_mul_I_O_fu_496_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_i_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_i_reg_408 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln267_reg_736 = ap_const_lv1_0))) then 
                i1_0_i_reg_408 <= i_5_reg_740;
            end if; 
        end if;
    end process;

    i2_0_i_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i2_0_i_reg_420 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln272_fu_571_p2 = ap_const_lv1_0))) then 
                i2_0_i_reg_420 <= i_6_fu_577_p2;
            end if; 
        end if;
    end process;

    i3_0_i_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i3_0_i_reg_431 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_reg_776 = ap_const_lv1_0))) then 
                i3_0_i_reg_431 <= i_7_reg_780;
            end if; 
        end if;
    end process;

    i4_0_i_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln294_fu_621_p2 = ap_const_lv1_0))) then 
                i4_0_i_reg_443 <= i_8_fu_627_p2;
            elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i4_0_i_reg_443 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i5_0_i_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i5_0_i_reg_454 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln300_fu_638_p2 = ap_const_lv1_0))) then 
                i5_0_i_reg_454 <= i_9_fu_644_p2;
            end if; 
        end if;
    end process;

    i6_0_i_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i6_0_i_reg_465 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln306_fu_655_p2 = ap_const_lv1_0))) then 
                i6_0_i_reg_465 <= i_10_fu_661_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln262_fu_525_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_i_reg_397 <= i_fu_531_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_397 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_5_reg_740 <= i_5_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                i_7_reg_780 <= i_7_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln262_reg_715 <= icmp_ln262_fu_525_p2;
                icmp_ln262_reg_715_pp0_iter1_reg <= icmp_ln262_reg_715;
                    zext_ln265_reg_724_pp0_iter1_reg(3 downto 0) <= zext_ln265_reg_724(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln267_reg_736 <= icmp_ln267_fu_542_p2;
                icmp_ln267_reg_736_pp1_iter1_reg <= icmp_ln267_reg_736;
                    zext_ln270_1_reg_745_pp1_iter1_reg(3 downto 0) <= zext_ln270_1_reg_745(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln272_reg_755 <= icmp_ln272_fu_571_p2;
                icmp_ln272_reg_755_pp2_iter1_reg <= icmp_ln272_reg_755;
                    zext_ln275_reg_764_pp2_iter1_reg(3 downto 0) <= zext_ln275_reg_764(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln277_reg_776 <= icmp_ln277_fu_588_p2;
                icmp_ln277_reg_776_pp3_iter1_reg <= icmp_ln277_reg_776;
                    zext_ln280_1_reg_785_pp3_iter1_reg(3 downto 0) <= zext_ln280_1_reg_785(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln294_reg_810 <= icmp_ln294_fu_621_p2;
                icmp_ln294_reg_810_pp4_iter1_reg <= icmp_ln294_reg_810;
                    zext_ln297_reg_819_pp4_iter1_reg(4 downto 0) <= zext_ln297_reg_819(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln300_reg_834 <= icmp_ln300_fu_638_p2;
                icmp_ln300_reg_834_pp5_iter1_reg <= icmp_ln300_reg_834;
                    zext_ln303_reg_843_pp5_iter1_reg(4 downto 0) <= zext_ln303_reg_843(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln306_reg_858 <= icmp_ln306_fu_655_p2;
                icmp_ln306_reg_858_pp6_iter1_reg <= icmp_ln306_reg_858;
                    zext_ln309_reg_867_pp6_iter1_reg(4 downto 0) <= zext_ln309_reg_867(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln306_reg_858 = ap_const_lv1_0))) then
                p_cross_mul_digits_da_2_reg_877 <= p_cross_mul_digits_da_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    p_cross_mul_tmp_bits_reg_805(3 downto 0) <= p_cross_mul_tmp_bits_fu_617_p1(3 downto 0);
                z0_tmp_bits_i_reg_795 <= grp_mul_I_O_fu_485_ap_return;
                z2_tmp_bits_i_reg_800 <= grp_mul_I_O_fu_496_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    p_read1_cast_i_reg_705(1 downto 0) <= p_read1_cast_i_fu_517_p1(1 downto 0);
                    p_read_cast_i_reg_710(1 downto 0) <= p_read_cast_i_fu_521_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln267_reg_736 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln262_reg_715 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_507 <= lhs_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_reg_776 = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln272_reg_755 = ap_const_lv1_0)))) then
                reg_512 <= rhs_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln294_reg_810 = ap_const_lv1_0))) then
                res_digits_data_V_as_3_reg_829 <= res_digits_data_V_as_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln300_reg_834 = ap_const_lv1_0))) then
                res_digits_data_V_as_5_reg_853 <= res_digits_data_V_as_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln262_fu_525_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln265_reg_724(3 downto 0) <= zext_ln265_fu_537_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln267_fu_542_p2 = ap_const_lv1_0))) then
                    zext_ln270_1_reg_745(3 downto 0) <= zext_ln270_1_fu_560_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln272_fu_571_p2 = ap_const_lv1_0))) then
                    zext_ln275_reg_764(3 downto 0) <= zext_ln275_fu_583_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_fu_588_p2 = ap_const_lv1_0))) then
                    zext_ln280_1_reg_785(3 downto 0) <= zext_ln280_1_fu_606_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln294_fu_621_p2 = ap_const_lv1_0))) then
                    zext_ln297_reg_819(4 downto 0) <= zext_ln297_fu_633_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln300_fu_638_p2 = ap_const_lv1_0))) then
                    zext_ln303_reg_843(4 downto 0) <= zext_ln303_fu_650_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln306_fu_655_p2 = ap_const_lv1_0))) then
                    zext_ln309_reg_867(4 downto 0) <= zext_ln309_fu_667_p1(4 downto 0);
            end if;
        end if;
    end process;
    p_read1_cast_i_reg_705(31 downto 2) <= "000000000000000000000000000000";
    p_read_cast_i_reg_710(31 downto 2) <= "000000000000000000000000000000";
    zext_ln265_reg_724(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln265_reg_724_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln270_1_reg_745(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln270_1_reg_745_pp1_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln275_reg_764(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln275_reg_764_pp2_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln280_1_reg_785(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln280_1_reg_785_pp3_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cross_mul_tmp_bits_reg_805(31 downto 4) <= "0000000000000000000000000000";
    zext_ln297_reg_819(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln297_reg_819_pp4_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln303_reg_843(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln303_reg_843_pp5_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln309_reg_867(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln309_reg_867_pp6_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, icmp_ln262_fu_525_p2, ap_enable_reg_pp0_iter0, icmp_ln267_fu_542_p2, ap_enable_reg_pp1_iter0, icmp_ln272_fu_571_p2, ap_enable_reg_pp2_iter0, icmp_ln277_fu_588_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state18, ap_block_state18_on_subcall_done, icmp_ln294_fu_621_p2, ap_enable_reg_pp4_iter0, icmp_ln300_fu_638_p2, ap_enable_reg_pp5_iter0, icmp_ln306_fu_655_p2, ap_enable_reg_pp6_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln262_fu_525_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln262_fu_525_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln267_fu_542_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln267_fu_542_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln272_fu_571_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln272_fu_571_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln277_fu_588_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln277_fu_588_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln294_fu_621_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln294_fu_621_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln300_fu_638_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln300_fu_638_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln306_fu_655_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln306_fu_655_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state22 <= ap_CS_fsm(11);
    ap_CS_fsm_state26 <= ap_CS_fsm(13);
    ap_CS_fsm_state30 <= ap_CS_fsm(15);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_on_subcall_done_assign_proc : process(grp_mul_I_O_fu_485_ap_done, grp_mul_I_O_fu_496_ap_done, grp_karastuba_mul_templa_2_fu_476_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_karastuba_mul_templa_2_fu_476_ap_done = ap_const_logic_0) or (grp_mul_I_O_fu_496_ap_done = ap_const_logic_0) or (grp_mul_I_O_fu_485_ap_done = ap_const_logic_0));
    end process;

        ap_block_state19_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln262_fu_525_p2)
    begin
        if ((icmp_ln262_fu_525_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln267_fu_542_p2)
    begin
        if ((icmp_ln267_fu_542_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state10_assign_proc : process(icmp_ln272_fu_571_p2)
    begin
        if ((icmp_ln272_fu_571_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state14_assign_proc : process(icmp_ln277_fu_588_p2)
    begin
        if ((icmp_ln277_fu_588_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state19_assign_proc : process(icmp_ln294_fu_621_p2)
    begin
        if ((icmp_ln294_fu_621_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state23_assign_proc : process(icmp_ln300_fu_638_p2)
    begin
        if ((icmp_ln300_fu_638_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state27_assign_proc : process(icmp_ln306_fu_655_p2)
    begin
        if ((icmp_ln306_fu_655_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_0_i_phi_fu_412_p4_assign_proc : process(i1_0_i_reg_408, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln267_reg_736, i_5_reg_740, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln267_reg_736 = ap_const_lv1_0))) then 
            ap_phi_mux_i1_0_i_phi_fu_412_p4 <= i_5_reg_740;
        else 
            ap_phi_mux_i1_0_i_phi_fu_412_p4 <= i1_0_i_reg_408;
        end if; 
    end process;


    ap_phi_mux_i3_0_i_phi_fu_435_p4_assign_proc : process(i3_0_i_reg_431, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln277_reg_776, i_7_reg_780, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln277_reg_776 = ap_const_lv1_0))) then 
            ap_phi_mux_i3_0_i_phi_fu_435_p4 <= i_7_reg_780;
        else 
            ap_phi_mux_i3_0_i_phi_fu_435_p4 <= i3_0_i_reg_431;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= zext_ln312_fu_672_p1;
    ap_return_1 <= zext_ln312_1_fu_681_p1;
    ap_return_2 <= p_cross_mul_tmp_bits_reg_805;
    ap_return_3 <= p_read_cast_i_reg_710;
    ap_return_4 <= p_read1_cast_i_reg_705;
    cross_mul_digits_dat_address0 <= zext_ln309_reg_867_pp6_iter1_reg(4 - 1 downto 0);

    cross_mul_digits_dat_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            cross_mul_digits_dat_ce0 <= ap_const_logic_1;
        else 
            cross_mul_digits_dat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cross_mul_digits_dat_d0 <= p_cross_mul_digits_da_2_reg_877;

    cross_mul_digits_dat_we0_assign_proc : process(ap_block_pp6_stage0_11001, icmp_ln306_reg_858_pp6_iter1_reg, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln306_reg_858_pp6_iter1_reg = ap_const_lv1_0))) then 
            cross_mul_digits_dat_we0 <= ap_const_logic_1;
        else 
            cross_mul_digits_dat_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_karastuba_mul_templa_2_fu_476_ap_start <= grp_karastuba_mul_templa_2_fu_476_ap_start_reg;
    grp_mul_I_O_fu_485_ap_start <= grp_mul_I_O_fu_485_ap_start_reg;
    grp_mul_I_O_fu_496_ap_start <= grp_mul_I_O_fu_496_ap_start_reg;
    i_10_fu_661_p2 <= std_logic_vector(unsigned(i6_0_i_reg_465) + unsigned(ap_const_lv5_1));
    i_5_fu_548_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_0_i_phi_fu_412_p4) + unsigned(ap_const_lv4_1));
    i_6_fu_577_p2 <= std_logic_vector(unsigned(i2_0_i_reg_420) + unsigned(ap_const_lv4_1));
    i_7_fu_594_p2 <= std_logic_vector(unsigned(ap_phi_mux_i3_0_i_phi_fu_435_p4) + unsigned(ap_const_lv4_1));
    i_8_fu_627_p2 <= std_logic_vector(unsigned(i4_0_i_reg_443) + unsigned(ap_const_lv5_1));
    i_9_fu_644_p2 <= std_logic_vector(unsigned(i5_0_i_reg_454) + unsigned(ap_const_lv5_1));
    i_fu_531_p2 <= std_logic_vector(unsigned(i_0_i_reg_397) + unsigned(ap_const_lv4_1));
    icmp_ln262_fu_525_p2 <= "1" when (i_0_i_reg_397 = ap_const_lv4_8) else "0";
    icmp_ln267_fu_542_p2 <= "1" when (ap_phi_mux_i1_0_i_phi_fu_412_p4 = ap_const_lv4_8) else "0";
    icmp_ln272_fu_571_p2 <= "1" when (i2_0_i_reg_420 = ap_const_lv4_8) else "0";
    icmp_ln277_fu_588_p2 <= "1" when (ap_phi_mux_i3_0_i_phi_fu_435_p4 = ap_const_lv4_8) else "0";
    icmp_ln294_fu_621_p2 <= "1" when (i4_0_i_reg_443 = ap_const_lv5_10) else "0";
    icmp_ln300_fu_638_p2 <= "1" when (i5_0_i_reg_454 = ap_const_lv5_10) else "0";
    icmp_ln306_fu_655_p2 <= "1" when (i6_0_i_reg_465 = ap_const_lv5_10) else "0";

    inter_lhs_digits_dat_address0_assign_proc : process(zext_ln265_reg_724_pp0_iter1_reg, zext_ln270_1_reg_745_pp1_iter1_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            inter_lhs_digits_dat_address0 <= zext_ln270_1_reg_745_pp1_iter1_reg(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inter_lhs_digits_dat_address0 <= zext_ln265_reg_724_pp0_iter1_reg(4 - 1 downto 0);
        else 
            inter_lhs_digits_dat_address0 <= "XXXX";
        end if; 
    end process;


    inter_lhs_digits_dat_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            inter_lhs_digits_dat_ce0 <= ap_const_logic_1;
        else 
            inter_lhs_digits_dat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inter_lhs_digits_dat_d0 <= reg_507;

    inter_lhs_digits_dat_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, icmp_ln262_reg_715_pp0_iter1_reg, icmp_ln267_reg_736_pp1_iter1_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln267_reg_736_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln262_reg_715_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            inter_lhs_digits_dat_we0 <= ap_const_logic_1;
        else 
            inter_lhs_digits_dat_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inter_rhs_digits_dat_address0_assign_proc : process(zext_ln275_reg_764_pp2_iter1_reg, zext_ln280_1_reg_785_pp3_iter1_reg, ap_enable_reg_pp2_iter2, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            inter_rhs_digits_dat_address0 <= zext_ln280_1_reg_785_pp3_iter1_reg(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            inter_rhs_digits_dat_address0 <= zext_ln275_reg_764_pp2_iter1_reg(4 - 1 downto 0);
        else 
            inter_rhs_digits_dat_address0 <= "XXXX";
        end if; 
    end process;


    inter_rhs_digits_dat_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            inter_rhs_digits_dat_ce0 <= ap_const_logic_1;
        else 
            inter_rhs_digits_dat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inter_rhs_digits_dat_d0 <= reg_512;

    inter_rhs_digits_dat_we0_assign_proc : process(ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, icmp_ln272_reg_755_pp2_iter1_reg, icmp_ln277_reg_776_pp3_iter1_reg, ap_enable_reg_pp2_iter2, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_reg_776_pp3_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln272_reg_755_pp2_iter1_reg = ap_const_lv1_0)))) then 
            inter_rhs_digits_dat_we0 <= ap_const_logic_1;
        else 
            inter_rhs_digits_dat_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs0_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, zext_ln265_reg_724, ap_CS_fsm_state18, grp_mul_I_O_fu_485_u_digits_data_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lhs0_digits_data_V_address0 <= zext_ln265_reg_724(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            lhs0_digits_data_V_address0 <= grp_mul_I_O_fu_485_u_digits_data_V_address0;
        else 
            lhs0_digits_data_V_address0 <= "XXX";
        end if; 
    end process;


    lhs0_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state18, grp_mul_I_O_fu_485_u_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lhs0_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            lhs0_digits_data_V_ce0 <= grp_mul_I_O_fu_485_u_digits_data_V_ce0;
        else 
            lhs0_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs0_digits_data_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln262_reg_715)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln262_reg_715 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lhs0_digits_data_V_we0 <= ap_const_logic_1;
        else 
            lhs0_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs0_tmp_digits_data_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, zext_ln265_reg_724, ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lhs0_tmp_digits_data_address0 <= zext_ln265_reg_724(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            lhs0_tmp_digits_data_address0 <= grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_address0;
        else 
            lhs0_tmp_digits_data_address0 <= "XXX";
        end if; 
    end process;


    lhs0_tmp_digits_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lhs0_tmp_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            lhs0_tmp_digits_data_ce0 <= grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_ce0;
        else 
            lhs0_tmp_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs0_tmp_digits_data_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln262_reg_715)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln262_reg_715 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lhs0_tmp_digits_data_we0 <= ap_const_logic_1;
        else 
            lhs0_tmp_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs1_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state18, grp_mul_I_O_fu_496_u_digits_data_V_address0, ap_block_pp1_stage0, zext_ln270_fu_565_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            lhs1_digits_data_V_address0 <= zext_ln270_fu_565_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            lhs1_digits_data_V_address0 <= grp_mul_I_O_fu_496_u_digits_data_V_address0;
        else 
            lhs1_digits_data_V_address0 <= "XXX";
        end if; 
    end process;


    lhs1_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state18, grp_mul_I_O_fu_496_u_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            lhs1_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            lhs1_digits_data_V_ce0 <= grp_mul_I_O_fu_496_u_digits_data_V_ce0;
        else 
            lhs1_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs1_digits_data_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, icmp_ln267_reg_736)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln267_reg_736 = ap_const_lv1_0))) then 
            lhs1_digits_data_V_we0 <= ap_const_logic_1;
        else 
            lhs1_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs1_tmp_digits_data_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_address0, ap_block_pp1_stage0, zext_ln270_fu_565_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            lhs1_tmp_digits_data_address0 <= zext_ln270_fu_565_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            lhs1_tmp_digits_data_address0 <= grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_address0;
        else 
            lhs1_tmp_digits_data_address0 <= "XXX";
        end if; 
    end process;


    lhs1_tmp_digits_data_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            lhs1_tmp_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            lhs1_tmp_digits_data_ce0 <= grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_ce0;
        else 
            lhs1_tmp_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs1_tmp_digits_data_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, icmp_ln267_reg_736)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln267_reg_736 = ap_const_lv1_0))) then 
            lhs1_tmp_digits_data_we0 <= ap_const_logic_1;
        else 
            lhs1_tmp_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lhs_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter0, zext_ln265_fu_537_p1, ap_enable_reg_pp1_iter0, zext_ln270_1_fu_560_p1, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            lhs_digits_data_V_address0 <= zext_ln270_1_fu_560_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lhs_digits_data_V_address0 <= zext_ln265_fu_537_p1(4 - 1 downto 0);
        else 
            lhs_digits_data_V_address0 <= "XXXX";
        end if; 
    end process;


    lhs_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            lhs_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            lhs_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_cross_mul_digits_da_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, zext_ln309_fu_667_p1, grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_address0, ap_block_pp6_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            p_cross_mul_digits_da_address0 <= zext_ln309_fu_667_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            p_cross_mul_digits_da_address0 <= grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_address0;
        else 
            p_cross_mul_digits_da_address0 <= "XXXX";
        end if; 
    end process;


    p_cross_mul_digits_da_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            p_cross_mul_digits_da_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            p_cross_mul_digits_da_ce0 <= grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_ce0;
        else 
            p_cross_mul_digits_da_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_cross_mul_digits_da_we0_assign_proc : process(ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            p_cross_mul_digits_da_we0 <= grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_we0;
        else 
            p_cross_mul_digits_da_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cross_mul_tmp_bits_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_karastuba_mul_templa_2_fu_476_ap_return),32));
    p_read1_cast_i_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_tmp_bits_read),32));
    p_read_cast_i_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_tmp_bits_read),32));

    res_digits_data_V_as_1_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln303_fu_650_p1, grp_mul_I_O_fu_496_w_digits_data_V_address0, ap_block_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            res_digits_data_V_as_1_address0 <= zext_ln303_fu_650_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_digits_data_V_as_1_address0 <= grp_mul_I_O_fu_496_w_digits_data_V_address0;
        else 
            res_digits_data_V_as_1_address0 <= "XXXX";
        end if; 
    end process;


    res_digits_data_V_as_1_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, grp_mul_I_O_fu_496_w_digits_data_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            res_digits_data_V_as_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_digits_data_V_as_1_ce0 <= grp_mul_I_O_fu_496_w_digits_data_V_ce0;
        else 
            res_digits_data_V_as_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_digits_data_V_as_1_we0_assign_proc : process(ap_CS_fsm_state18, grp_mul_I_O_fu_496_w_digits_data_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_digits_data_V_as_1_we0 <= grp_mul_I_O_fu_496_w_digits_data_V_we0;
        else 
            res_digits_data_V_as_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    res_digits_data_V_as_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln297_fu_633_p1, grp_mul_I_O_fu_485_w_digits_data_V_address0, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            res_digits_data_V_as_address0 <= zext_ln297_fu_633_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_digits_data_V_as_address0 <= grp_mul_I_O_fu_485_w_digits_data_V_address0;
        else 
            res_digits_data_V_as_address0 <= "XXXX";
        end if; 
    end process;


    res_digits_data_V_as_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, grp_mul_I_O_fu_485_w_digits_data_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            res_digits_data_V_as_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_digits_data_V_as_ce0 <= grp_mul_I_O_fu_485_w_digits_data_V_ce0;
        else 
            res_digits_data_V_as_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_digits_data_V_as_we0_assign_proc : process(ap_CS_fsm_state18, grp_mul_I_O_fu_485_w_digits_data_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_digits_data_V_as_we0 <= grp_mul_I_O_fu_485_w_digits_data_V_we0;
        else 
            res_digits_data_V_as_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs0_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, zext_ln275_reg_764, ap_CS_fsm_state18, grp_mul_I_O_fu_485_v_digits_data_V_address0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            rhs0_digits_data_V_address0 <= zext_ln275_reg_764(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rhs0_digits_data_V_address0 <= grp_mul_I_O_fu_485_v_digits_data_V_address0;
        else 
            rhs0_digits_data_V_address0 <= "XXX";
        end if; 
    end process;


    rhs0_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_state18, grp_mul_I_O_fu_485_v_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            rhs0_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rhs0_digits_data_V_ce0 <= grp_mul_I_O_fu_485_v_digits_data_V_ce0;
        else 
            rhs0_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs0_digits_data_V_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, icmp_ln272_reg_755)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln272_reg_755 = ap_const_lv1_0))) then 
            rhs0_digits_data_V_we0 <= ap_const_logic_1;
        else 
            rhs0_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs0_tmp_digits_data_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, zext_ln275_reg_764, ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_address0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            rhs0_tmp_digits_data_address0 <= zext_ln275_reg_764(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rhs0_tmp_digits_data_address0 <= grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_address0;
        else 
            rhs0_tmp_digits_data_address0 <= "XXX";
        end if; 
    end process;


    rhs0_tmp_digits_data_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            rhs0_tmp_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rhs0_tmp_digits_data_ce0 <= grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_ce0;
        else 
            rhs0_tmp_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs0_tmp_digits_data_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, icmp_ln272_reg_755)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln272_reg_755 = ap_const_lv1_0))) then 
            rhs0_tmp_digits_data_we0 <= ap_const_logic_1;
        else 
            rhs0_tmp_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs1_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state18, grp_mul_I_O_fu_496_v_digits_data_V_address0, ap_block_pp3_stage0, zext_ln280_fu_611_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            rhs1_digits_data_V_address0 <= zext_ln280_fu_611_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rhs1_digits_data_V_address0 <= grp_mul_I_O_fu_496_v_digits_data_V_address0;
        else 
            rhs1_digits_data_V_address0 <= "XXX";
        end if; 
    end process;


    rhs1_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001, ap_CS_fsm_state18, grp_mul_I_O_fu_496_v_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            rhs1_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rhs1_digits_data_V_ce0 <= grp_mul_I_O_fu_496_v_digits_data_V_ce0;
        else 
            rhs1_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs1_digits_data_V_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001, icmp_ln277_reg_776)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_reg_776 = ap_const_lv1_0))) then 
            rhs1_digits_data_V_we0 <= ap_const_logic_1;
        else 
            rhs1_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs1_tmp_digits_data_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_address0, ap_block_pp3_stage0, zext_ln280_fu_611_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            rhs1_tmp_digits_data_address0 <= zext_ln280_fu_611_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rhs1_tmp_digits_data_address0 <= grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_address0;
        else 
            rhs1_tmp_digits_data_address0 <= "XXX";
        end if; 
    end process;


    rhs1_tmp_digits_data_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001, ap_CS_fsm_state18, grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            rhs1_tmp_digits_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rhs1_tmp_digits_data_ce0 <= grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_ce0;
        else 
            rhs1_tmp_digits_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs1_tmp_digits_data_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001, icmp_ln277_reg_776)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_reg_776 = ap_const_lv1_0))) then 
            rhs1_tmp_digits_data_we0 <= ap_const_logic_1;
        else 
            rhs1_tmp_digits_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rhs_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp2_iter0, zext_ln275_fu_583_p1, ap_enable_reg_pp3_iter0, zext_ln280_1_fu_606_p1, ap_block_pp3_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            rhs_digits_data_V_address0 <= zext_ln280_1_fu_606_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            rhs_digits_data_V_address0 <= zext_ln275_fu_583_p1(4 - 1 downto 0);
        else 
            rhs_digits_data_V_address0 <= "XXXX";
        end if; 
    end process;


    rhs_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            rhs_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            rhs_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln270_fu_554_p2 <= (ap_phi_mux_i1_0_i_phi_fu_412_p4 xor ap_const_lv4_8);
    xor_ln280_fu_600_p2 <= (ap_phi_mux_i3_0_i_phi_fu_435_p4 xor ap_const_lv4_8);
    z0_digits_data_V_address0 <= zext_ln297_reg_819_pp4_iter1_reg(4 - 1 downto 0);

    z0_digits_data_V_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            z0_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            z0_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z0_digits_data_V_d0 <= res_digits_data_V_as_3_reg_829;

    z0_digits_data_V_we0_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln294_reg_810_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln294_reg_810_pp4_iter1_reg = ap_const_lv1_0))) then 
            z0_digits_data_V_we0 <= ap_const_logic_1;
        else 
            z0_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z2_digits_data_V_address0 <= zext_ln303_reg_843_pp5_iter1_reg(4 - 1 downto 0);

    z2_digits_data_V_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            z2_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            z2_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z2_digits_data_V_d0 <= res_digits_data_V_as_5_reg_853;

    z2_digits_data_V_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln300_reg_834_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln300_reg_834_pp5_iter1_reg = ap_const_lv1_0))) then 
            z2_digits_data_V_we0 <= ap_const_logic_1;
        else 
            z2_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln265_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_397),64));
    zext_ln270_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln270_fu_554_p2),64));
    zext_ln270_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_408),64));
    zext_ln275_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_i_reg_420),64));
    zext_ln280_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln280_fu_600_p2),64));
    zext_ln280_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_i_reg_431),64));
    zext_ln297_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_i_reg_443),64));
    zext_ln303_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_i_reg_454),64));
    zext_ln309_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_i_reg_465),64));
    zext_ln312_1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z2_tmp_bits_i_reg_800),32));
    zext_ln312_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z0_tmp_bits_i_reg_795),32));
end behav;
