-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity karastuba_mul_templa is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lhs0_tmp_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lhs0_tmp_digits_data_V_ce0 : OUT STD_LOGIC;
    lhs0_tmp_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    lhs1_tmp_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lhs1_tmp_digits_data_V_ce0 : OUT STD_LOGIC;
    lhs1_tmp_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    rhs0_tmp_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rhs0_tmp_digits_data_V_ce0 : OUT STD_LOGIC;
    rhs0_tmp_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    rhs1_tmp_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rhs1_tmp_digits_data_V_ce0 : OUT STD_LOGIC;
    rhs1_tmp_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    cross_mul_tmp_bits : OUT STD_LOGIC_VECTOR (31 downto 0);
    cross_mul_tmp_bits_ap_vld : OUT STD_LOGIC;
    cross_mul_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cross_mul_digits_data_V_ce0 : OUT STD_LOGIC;
    cross_mul_digits_data_V_we0 : OUT STD_LOGIC;
    cross_mul_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of karastuba_mul_templa is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_088_0_i_reg_136 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_i_reg_148 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_088_0_i3_reg_159 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_i4_reg_171 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln54_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_330_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_202_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_334 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln59_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_339 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_339_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs0_tmp_digits_data_3_reg_354 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal lhs1_tmp_digits_data_3_reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_225_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln700_reg_366 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_6_fu_236_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_6_reg_371 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln54_1_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_1_reg_381 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln54_1_reg_381_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_269_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_385 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln59_1_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_1_reg_390 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_1_reg_390_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs0_tmp_digits_data_3_reg_405 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal rhs1_tmp_digits_data_3_reg_411 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_7_fu_292_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln700_7_reg_417 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_8_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_8_reg_422 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal add0_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal add0_digits_data_V_ce0 : STD_LOGIC;
    signal add0_digits_data_V_we0 : STD_LOGIC;
    signal add0_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal add1_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal add1_digits_data_V_ce0 : STD_LOGIC;
    signal add1_digits_data_V_we0 : STD_LOGIC;
    signal add1_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_we0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_ce1 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_we1 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_we0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_ce1 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_we1 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_res_tmp_bits : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_ce0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_we0 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_ce1 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_we1 : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_ap_start : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_res_tmp_bits_ap_vld : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_ap_done : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_ap_ready : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_ap_idle : STD_LOGIC;
    signal grp_karastuba_mul_templa_4_fu_182_ap_continue : STD_LOGIC;
    signal ap_phi_mux_i_0_i_phi_fu_152_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_i4_phi_fu_175_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_karastuba_mul_templa_4_fu_182_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_ready : STD_LOGIC;
    signal ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_done : STD_LOGIC;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_done : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln700_fu_218_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln54_fu_214_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_12_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_fu_231_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_13_fu_244_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_11_fu_241_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_fu_247_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_14_fu_285_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln54_1_fu_281_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_16_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_7_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_17_fu_311_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_15_fu_308_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_8_fu_314_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component karastuba_mul_templa_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        lhs_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
        lhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lhs_digits_data_V_ce0 : OUT STD_LOGIC;
        lhs_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        lhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        lhs_digits_data_V_we0 : OUT STD_LOGIC;
        lhs_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lhs_digits_data_V_ce1 : OUT STD_LOGIC;
        lhs_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        lhs_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        lhs_digits_data_V_we1 : OUT STD_LOGIC;
        rhs_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
        rhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        rhs_digits_data_V_ce0 : OUT STD_LOGIC;
        rhs_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_we0 : OUT STD_LOGIC;
        rhs_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        rhs_digits_data_V_ce1 : OUT STD_LOGIC;
        rhs_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs_digits_data_V_we1 : OUT STD_LOGIC;
        res_tmp_bits : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_digits_data_V_ce0 : OUT STD_LOGIC;
        res_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        res_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        res_digits_data_V_we0 : OUT STD_LOGIC;
        res_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_digits_data_V_ce1 : OUT STD_LOGIC;
        res_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        res_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        res_digits_data_V_we1 : OUT STD_LOGIC;
        lhs_tmp_bits_read_ap_vld : IN STD_LOGIC;
        rhs_tmp_bits_read_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        res_tmp_bits_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component karastuba_mul_ADDrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    add0_digits_data_V_U : component karastuba_mul_ADDrcU
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => add0_digits_data_V_address0,
        ce0 => add0_digits_data_V_ce0,
        we0 => add0_digits_data_V_we0,
        d0 => add_ln209_6_reg_371,
        q0 => add0_digits_data_V_q0);

    add1_digits_data_V_U : component karastuba_mul_ADDrcU
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => add1_digits_data_V_address0,
        ce0 => add1_digits_data_V_ce0,
        we0 => add1_digits_data_V_we0,
        d0 => add_ln209_8_reg_422,
        q0 => add1_digits_data_V_q0);

    grp_karastuba_mul_templa_4_fu_182 : component karastuba_mul_templa_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        lhs_tmp_bits_read => p_088_0_i_reg_136,
        lhs_digits_data_V_address0 => grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_address0,
        lhs_digits_data_V_ce0 => grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_ce0,
        lhs_digits_data_V_d0 => grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_d0,
        lhs_digits_data_V_q0 => add0_digits_data_V_q0,
        lhs_digits_data_V_we0 => grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_we0,
        lhs_digits_data_V_address1 => grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_address1,
        lhs_digits_data_V_ce1 => grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_ce1,
        lhs_digits_data_V_d1 => grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_d1,
        lhs_digits_data_V_q1 => ap_const_lv64_0,
        lhs_digits_data_V_we1 => grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_we1,
        rhs_tmp_bits_read => p_088_0_i3_reg_159,
        rhs_digits_data_V_address0 => grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_address0,
        rhs_digits_data_V_ce0 => grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_ce0,
        rhs_digits_data_V_d0 => grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_d0,
        rhs_digits_data_V_q0 => add1_digits_data_V_q0,
        rhs_digits_data_V_we0 => grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_we0,
        rhs_digits_data_V_address1 => grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_address1,
        rhs_digits_data_V_ce1 => grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_ce1,
        rhs_digits_data_V_d1 => grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_d1,
        rhs_digits_data_V_q1 => ap_const_lv64_0,
        rhs_digits_data_V_we1 => grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_we1,
        res_tmp_bits => grp_karastuba_mul_templa_4_fu_182_res_tmp_bits,
        res_digits_data_V_address0 => grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_address0,
        res_digits_data_V_ce0 => grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_ce0,
        res_digits_data_V_d0 => grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_d0,
        res_digits_data_V_q0 => ap_const_lv64_0,
        res_digits_data_V_we0 => grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_we0,
        res_digits_data_V_address1 => grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_address1,
        res_digits_data_V_ce1 => grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_ce1,
        res_digits_data_V_d1 => grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_d1,
        res_digits_data_V_q1 => ap_const_lv64_0,
        res_digits_data_V_we1 => grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_we1,
        lhs_tmp_bits_read_ap_vld => ap_const_logic_1,
        rhs_tmp_bits_read_ap_vld => ap_const_logic_1,
        ap_start => grp_karastuba_mul_templa_4_fu_182_ap_start,
        res_tmp_bits_ap_vld => grp_karastuba_mul_templa_4_fu_182_res_tmp_bits_ap_vld,
        ap_done => grp_karastuba_mul_templa_4_fu_182_ap_done,
        ap_ready => grp_karastuba_mul_templa_4_fu_182_ap_ready,
        ap_idle => grp_karastuba_mul_templa_4_fu_182_ap_idle,
        ap_continue => grp_karastuba_mul_templa_4_fu_182_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_done <= ap_const_logic_0;
                elsif ((grp_karastuba_mul_templa_4_fu_182_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_ready <= ap_const_logic_0;
                elsif ((grp_karastuba_mul_templa_4_fu_182_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_karastuba_mul_templa_4_fu_182_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_karastuba_mul_templa_4_fu_182_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                    grp_karastuba_mul_templa_4_fu_182_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_karastuba_mul_templa_4_fu_182_ap_ready = ap_const_logic_1)) then 
                    grp_karastuba_mul_templa_4_fu_182_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i4_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i4_reg_171 <= ap_const_lv6_0;
            elsif (((icmp_ln54_1_reg_381 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_0_i4_reg_171 <= i_4_reg_385;
            end if; 
        end if;
    end process;

    i_0_i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_148 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_330 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_i_reg_148 <= i_reg_334;
            end if; 
        end if;
    end process;

    p_088_0_i3_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_088_0_i3_reg_159 <= ap_const_lv2_0;
            elsif (((icmp_ln54_1_reg_381_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                p_088_0_i3_reg_159 <= tmp_V_8_fu_314_p2(65 downto 64);
            end if; 
        end if;
    end process;

    p_088_0_i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_088_0_i_reg_136 <= ap_const_lv2_0;
            elsif (((icmp_ln54_reg_330_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                p_088_0_i_reg_136 <= tmp_V_fu_247_p2(65 downto 64);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_330 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln209_6_reg_371 <= add_ln209_6_fu_236_p2;
                add_ln700_reg_366 <= add_ln700_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_1_reg_381 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln209_8_reg_422 <= add_ln209_8_fu_303_p2;
                add_ln700_7_reg_417 <= add_ln700_7_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_4_reg_385 <= i_4_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_334 <= i_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln54_1_reg_381 <= icmp_ln54_1_fu_263_p2;
                icmp_ln54_1_reg_381_pp1_iter1_reg <= icmp_ln54_1_reg_381;
                    zext_ln59_1_reg_390_pp1_iter1_reg(5 downto 0) <= zext_ln59_1_reg_390(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln54_reg_330 <= icmp_ln54_fu_196_p2;
                icmp_ln54_reg_330_pp0_iter1_reg <= icmp_ln54_reg_330;
                    zext_ln59_reg_339_pp0_iter1_reg(5 downto 0) <= zext_ln59_reg_339(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_330 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                lhs0_tmp_digits_data_3_reg_354 <= lhs0_tmp_digits_data_V_q0;
                lhs1_tmp_digits_data_3_reg_360 <= lhs1_tmp_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_1_reg_381 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                rhs0_tmp_digits_data_3_reg_405 <= rhs0_tmp_digits_data_V_q0;
                rhs1_tmp_digits_data_3_reg_411 <= rhs1_tmp_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_1_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    zext_ln59_1_reg_390(5 downto 0) <= zext_ln59_1_fu_275_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln59_reg_339(5 downto 0) <= zext_ln59_fu_208_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln59_reg_339(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln59_reg_339_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln59_1_reg_390(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln59_1_reg_390_pp1_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln54_fu_196_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln54_1_fu_263_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln54_fu_196_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln54_fu_196_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln54_1_fu_263_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln54_1_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    add0_digits_data_V_address0_assign_proc : process(zext_ln59_reg_339_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_address0, ap_CS_fsm_state12, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add0_digits_data_V_address0 <= zext_ln59_reg_339_pp0_iter1_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            add0_digits_data_V_address0 <= grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_address0;
        else 
            add0_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    add0_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            add0_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            add0_digits_data_V_ce0 <= grp_karastuba_mul_templa_4_fu_182_lhs_digits_data_V_ce0;
        else 
            add0_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    add0_digits_data_V_we0_assign_proc : process(icmp_ln54_reg_330_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln54_reg_330_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            add0_digits_data_V_we0 <= ap_const_logic_1;
        else 
            add0_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    add1_digits_data_V_address0_assign_proc : process(zext_ln59_1_reg_390_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_address0, ap_CS_fsm_state12, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            add1_digits_data_V_address0 <= zext_ln59_1_reg_390_pp1_iter1_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            add1_digits_data_V_address0 <= grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_address0;
        else 
            add1_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    add1_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1, grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
            add1_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            add1_digits_data_V_ce0 <= grp_karastuba_mul_templa_4_fu_182_rhs_digits_data_V_ce0;
        else 
            add1_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    add1_digits_data_V_we0_assign_proc : process(icmp_ln54_1_reg_381_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln54_1_reg_381_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
            add1_digits_data_V_we0 <= ap_const_logic_1;
        else 
            add1_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln209_6_fu_236_p2 <= std_logic_vector(unsigned(add_ln209_fu_231_p2) + unsigned(lhs0_tmp_digits_data_3_reg_354));
    add_ln209_7_fu_298_p2 <= std_logic_vector(unsigned(rhs1_tmp_digits_data_3_reg_411) + unsigned(zext_ln700_16_fu_288_p1));
    add_ln209_8_fu_303_p2 <= std_logic_vector(unsigned(add_ln209_7_fu_298_p2) + unsigned(rhs0_tmp_digits_data_3_reg_405));
    add_ln209_fu_231_p2 <= std_logic_vector(unsigned(lhs1_tmp_digits_data_3_reg_360) + unsigned(zext_ln700_12_fu_221_p1));
    add_ln700_7_fu_292_p2 <= std_logic_vector(unsigned(zext_ln700_14_fu_285_p1) + unsigned(zext_ln54_1_fu_281_p1));
    add_ln700_fu_225_p2 <= std_logic_vector(unsigned(zext_ln700_fu_218_p1) + unsigned(zext_ln54_fu_214_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_on_subcall_done_assign_proc : process(ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_ready, ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_ready and ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln54_fu_196_p2)
    begin
        if ((icmp_ln54_fu_196_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln54_1_fu_263_p2)
    begin
        if ((icmp_ln54_1_fu_263_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i4_phi_fu_175_p4_assign_proc : process(i_0_i4_reg_171, icmp_ln54_1_reg_381, ap_CS_fsm_pp1_stage0, i_4_reg_385, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln54_1_reg_381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_0_i4_phi_fu_175_p4 <= i_4_reg_385;
        else 
            ap_phi_mux_i_0_i4_phi_fu_175_p4 <= i_0_i4_reg_171;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_152_p4_assign_proc : process(i_0_i_reg_148, icmp_ln54_reg_330, ap_CS_fsm_pp0_stage0, i_reg_334, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln54_reg_330 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_i_phi_fu_152_p4 <= i_reg_334;
        else 
            ap_phi_mux_i_0_i_phi_fu_152_p4 <= i_0_i_reg_148;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_done <= (grp_karastuba_mul_templa_4_fu_182_ap_done or ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_done);
    ap_sync_grp_karastuba_mul_templa_4_fu_182_ap_ready <= (grp_karastuba_mul_templa_4_fu_182_ap_ready or ap_sync_reg_grp_karastuba_mul_templa_4_fu_182_ap_ready);
    cross_mul_digits_data_V_address0 <= grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_address0;
    cross_mul_digits_data_V_ce0 <= grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_ce0;
    cross_mul_digits_data_V_d0 <= grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_d0;
    cross_mul_digits_data_V_we0 <= grp_karastuba_mul_templa_4_fu_182_res_digits_data_V_we0;
    cross_mul_tmp_bits <= grp_karastuba_mul_templa_4_fu_182_res_tmp_bits;
    cross_mul_tmp_bits_ap_vld <= grp_karastuba_mul_templa_4_fu_182_res_tmp_bits_ap_vld;

    grp_karastuba_mul_templa_4_fu_182_ap_continue_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_karastuba_mul_templa_4_fu_182_ap_continue <= ap_const_logic_1;
        else 
            grp_karastuba_mul_templa_4_fu_182_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_karastuba_mul_templa_4_fu_182_ap_start <= grp_karastuba_mul_templa_4_fu_182_ap_start_reg;
    i_4_fu_269_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i4_phi_fu_175_p4) + unsigned(ap_const_lv6_1));
    i_fu_202_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_152_p4) + unsigned(ap_const_lv6_1));
    icmp_ln54_1_fu_263_p2 <= "1" when (ap_phi_mux_i_0_i4_phi_fu_175_p4 = ap_const_lv6_20) else "0";
    icmp_ln54_fu_196_p2 <= "1" when (ap_phi_mux_i_0_i_phi_fu_152_p4 = ap_const_lv6_20) else "0";
    lhs0_tmp_digits_data_V_address0 <= zext_ln59_fu_208_p1(5 - 1 downto 0);

    lhs0_tmp_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lhs0_tmp_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            lhs0_tmp_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs1_tmp_digits_data_V_address0 <= zext_ln59_fu_208_p1(5 - 1 downto 0);

    lhs1_tmp_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lhs1_tmp_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            lhs1_tmp_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rhs0_tmp_digits_data_V_address0 <= zext_ln59_1_fu_275_p1(5 - 1 downto 0);

    rhs0_tmp_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            rhs0_tmp_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            rhs0_tmp_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rhs1_tmp_digits_data_V_address0 <= zext_ln59_1_fu_275_p1(5 - 1 downto 0);

    rhs1_tmp_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            rhs1_tmp_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            rhs1_tmp_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_8_fu_314_p2 <= std_logic_vector(unsigned(zext_ln700_17_fu_311_p1) + unsigned(zext_ln700_15_fu_308_p1));
    tmp_V_fu_247_p2 <= std_logic_vector(unsigned(zext_ln700_13_fu_244_p1) + unsigned(zext_ln700_11_fu_241_p1));
    zext_ln54_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i3_reg_159),65));
    zext_ln54_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_136),65));
    zext_ln59_1_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i4_phi_fu_175_p4),64));
    zext_ln59_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i_phi_fu_152_p4),64));
    zext_ln700_11_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs1_tmp_digits_data_3_reg_360),66));
    zext_ln700_12_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_136),64));
    zext_ln700_13_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_reg_366),66));
    zext_ln700_14_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs0_tmp_digits_data_3_reg_405),65));
    zext_ln700_15_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs1_tmp_digits_data_3_reg_411),66));
    zext_ln700_16_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i3_reg_159),64));
    zext_ln700_17_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_7_reg_417),66));
    zext_ln700_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs0_tmp_digits_data_3_reg_354),65));
end behav;
