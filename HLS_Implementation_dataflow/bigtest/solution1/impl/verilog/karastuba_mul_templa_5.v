// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module karastuba_mul_templa_5 (
        ap_clk,
        ap_rst,
        lhs_tmp_bits_read,
        lhs_digits_data_V_address0,
        lhs_digits_data_V_ce0,
        lhs_digits_data_V_d0,
        lhs_digits_data_V_q0,
        lhs_digits_data_V_we0,
        lhs_digits_data_V_address1,
        lhs_digits_data_V_ce1,
        lhs_digits_data_V_d1,
        lhs_digits_data_V_q1,
        lhs_digits_data_V_we1,
        rhs_tmp_bits_read,
        rhs_digits_data_V_address0,
        rhs_digits_data_V_ce0,
        rhs_digits_data_V_d0,
        rhs_digits_data_V_q0,
        rhs_digits_data_V_we0,
        rhs_digits_data_V_address1,
        rhs_digits_data_V_ce1,
        rhs_digits_data_V_d1,
        rhs_digits_data_V_q1,
        rhs_digits_data_V_we1,
        res_tmp_bits,
        res_digits_data_V_address0,
        res_digits_data_V_ce0,
        res_digits_data_V_d0,
        res_digits_data_V_q0,
        res_digits_data_V_we0,
        res_digits_data_V_address1,
        res_digits_data_V_ce1,
        res_digits_data_V_d1,
        res_digits_data_V_q1,
        res_digits_data_V_we1,
        lhs_tmp_bits_read_ap_vld,
        rhs_tmp_bits_read_ap_vld,
        ap_start,
        res_tmp_bits_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
input  [1:0] lhs_tmp_bits_read;
output  [3:0] lhs_digits_data_V_address0;
output   lhs_digits_data_V_ce0;
output  [63:0] lhs_digits_data_V_d0;
input  [63:0] lhs_digits_data_V_q0;
output   lhs_digits_data_V_we0;
output  [3:0] lhs_digits_data_V_address1;
output   lhs_digits_data_V_ce1;
output  [63:0] lhs_digits_data_V_d1;
input  [63:0] lhs_digits_data_V_q1;
output   lhs_digits_data_V_we1;
input  [1:0] rhs_tmp_bits_read;
output  [3:0] rhs_digits_data_V_address0;
output   rhs_digits_data_V_ce0;
output  [63:0] rhs_digits_data_V_d0;
input  [63:0] rhs_digits_data_V_q0;
output   rhs_digits_data_V_we0;
output  [3:0] rhs_digits_data_V_address1;
output   rhs_digits_data_V_ce1;
output  [63:0] rhs_digits_data_V_d1;
input  [63:0] rhs_digits_data_V_q1;
output   rhs_digits_data_V_we1;
output  [31:0] res_tmp_bits;
output  [4:0] res_digits_data_V_address0;
output   res_digits_data_V_ce0;
output  [63:0] res_digits_data_V_d0;
input  [63:0] res_digits_data_V_q0;
output   res_digits_data_V_we0;
output  [4:0] res_digits_data_V_address1;
output   res_digits_data_V_ce1;
output  [63:0] res_digits_data_V_d1;
input  [63:0] res_digits_data_V_q1;
output   res_digits_data_V_we1;
input   lhs_tmp_bits_read_ap_vld;
input   rhs_tmp_bits_read_ap_vld;
input   ap_start;
output   res_tmp_bits_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [63:0] z0_digits_data_V_i_q0;
wire   [63:0] z0_digits_data_V_t_q0;
wire   [63:0] z2_digits_data_V_i_q0;
wire   [63:0] z2_digits_data_V_t_q0;
wire   [63:0] cross_mul_digits_dat_i_q0;
wire   [63:0] cross_mul_digits_dat_t_q0;
wire   [63:0] inter_lhs_digits_dat_i_q0;
wire   [63:0] inter_lhs_digits_dat_t_q0;
wire   [63:0] inter_rhs_digits_dat_i_q0;
wire   [63:0] inter_rhs_digits_dat_t_q0;
wire    karastuba_mul_MUL_st_2_U0_ap_start;
wire    karastuba_mul_MUL_st_2_U0_ap_done;
wire    karastuba_mul_MUL_st_2_U0_ap_continue;
wire    karastuba_mul_MUL_st_2_U0_ap_idle;
wire    karastuba_mul_MUL_st_2_U0_ap_ready;
wire   [3:0] karastuba_mul_MUL_st_2_U0_lhs_digits_data_V_address0;
wire    karastuba_mul_MUL_st_2_U0_lhs_digits_data_V_ce0;
wire   [3:0] karastuba_mul_MUL_st_2_U0_rhs_digits_data_V_address0;
wire    karastuba_mul_MUL_st_2_U0_rhs_digits_data_V_ce0;
wire   [3:0] karastuba_mul_MUL_st_2_U0_z0_digits_data_V_address0;
wire    karastuba_mul_MUL_st_2_U0_z0_digits_data_V_ce0;
wire    karastuba_mul_MUL_st_2_U0_z0_digits_data_V_we0;
wire   [63:0] karastuba_mul_MUL_st_2_U0_z0_digits_data_V_d0;
wire   [3:0] karastuba_mul_MUL_st_2_U0_z2_digits_data_V_address0;
wire    karastuba_mul_MUL_st_2_U0_z2_digits_data_V_ce0;
wire    karastuba_mul_MUL_st_2_U0_z2_digits_data_V_we0;
wire   [63:0] karastuba_mul_MUL_st_2_U0_z2_digits_data_V_d0;
wire   [3:0] karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_address0;
wire    karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_ce0;
wire    karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_we0;
wire   [63:0] karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_d0;
wire   [3:0] karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_address0;
wire    karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_ce0;
wire    karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_we0;
wire   [63:0] karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_d0;
wire   [3:0] karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_address0;
wire    karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_ce0;
wire    karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_we0;
wire   [63:0] karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_d0;
wire   [31:0] karastuba_mul_MUL_st_2_U0_ap_return_0;
wire   [31:0] karastuba_mul_MUL_st_2_U0_ap_return_1;
wire   [31:0] karastuba_mul_MUL_st_2_U0_ap_return_2;
wire   [31:0] karastuba_mul_MUL_st_2_U0_ap_return_3;
wire   [31:0] karastuba_mul_MUL_st_2_U0_ap_return_4;
wire    ap_channel_done_inter_rhs_tmp_bits;
wire    inter_rhs_tmp_bits_full_n;
reg    ap_sync_reg_channel_write_inter_rhs_tmp_bits;
wire    ap_sync_channel_write_inter_rhs_tmp_bits;
wire    ap_channel_done_inter_lhs_tmp_bits;
wire    inter_lhs_tmp_bits_full_n;
reg    ap_sync_reg_channel_write_inter_lhs_tmp_bits;
wire    ap_sync_channel_write_inter_lhs_tmp_bits;
wire    ap_channel_done_cross_mul_tmp_bits;
wire    cross_mul_tmp_bits_full_n;
reg    ap_sync_reg_channel_write_cross_mul_tmp_bits;
wire    ap_sync_channel_write_cross_mul_tmp_bits;
wire    ap_channel_done_z2_tmp_bits;
wire    z2_tmp_bits_full_n;
reg    ap_sync_reg_channel_write_z2_tmp_bits;
wire    ap_sync_channel_write_z2_tmp_bits;
wire    ap_channel_done_z0_tmp_bits;
wire    z0_tmp_bits_full_n;
reg    ap_sync_reg_channel_write_z0_tmp_bits;
wire    ap_sync_channel_write_z0_tmp_bits;
wire    ap_channel_done_inter_rhs_digits_dat;
wire    karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_full_n;
reg    ap_sync_reg_channel_write_inter_rhs_digits_dat;
wire    ap_sync_channel_write_inter_rhs_digits_dat;
wire    ap_channel_done_inter_lhs_digits_dat;
wire    karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_full_n;
reg    ap_sync_reg_channel_write_inter_lhs_digits_dat;
wire    ap_sync_channel_write_inter_lhs_digits_dat;
wire    ap_channel_done_cross_mul_digits_dat;
wire    karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_full_n;
reg    ap_sync_reg_channel_write_cross_mul_digits_dat;
wire    ap_sync_channel_write_cross_mul_digits_dat;
wire    ap_channel_done_z2_digits_data_V;
wire    karastuba_mul_MUL_st_2_U0_z2_digits_data_V_full_n;
reg    ap_sync_reg_channel_write_z2_digits_data_V;
wire    ap_sync_channel_write_z2_digits_data_V;
wire    ap_channel_done_z0_digits_data_V;
wire    karastuba_mul_MUL_st_2_U0_z0_digits_data_V_full_n;
reg    ap_sync_reg_channel_write_z0_digits_data_V;
wire    ap_sync_channel_write_z0_digits_data_V;
wire    karastuba_mul_ADD_SU_2_U0_ap_start;
wire    karastuba_mul_ADD_SU_2_U0_ap_done;
wire    karastuba_mul_ADD_SU_2_U0_ap_continue;
wire    karastuba_mul_ADD_SU_2_U0_ap_idle;
wire    karastuba_mul_ADD_SU_2_U0_ap_ready;
wire   [3:0] karastuba_mul_ADD_SU_2_U0_z0_digits_data_V_address0;
wire    karastuba_mul_ADD_SU_2_U0_z0_digits_data_V_ce0;
wire   [3:0] karastuba_mul_ADD_SU_2_U0_z2_digits_data_V_address0;
wire    karastuba_mul_ADD_SU_2_U0_z2_digits_data_V_ce0;
wire   [3:0] karastuba_mul_ADD_SU_2_U0_cross_mul_digits_data_V_address0;
wire    karastuba_mul_ADD_SU_2_U0_cross_mul_digits_data_V_ce0;
wire   [3:0] karastuba_mul_ADD_SU_2_U0_lhs_digits_data_V_address0;
wire    karastuba_mul_ADD_SU_2_U0_lhs_digits_data_V_ce0;
wire   [3:0] karastuba_mul_ADD_SU_2_U0_rhs_digits_data_V_address0;
wire    karastuba_mul_ADD_SU_2_U0_rhs_digits_data_V_ce0;
wire   [31:0] karastuba_mul_ADD_SU_2_U0_res_tmp_bits;
wire    karastuba_mul_ADD_SU_2_U0_res_tmp_bits_ap_vld;
wire   [4:0] karastuba_mul_ADD_SU_2_U0_res_digits_data_V_address0;
wire    karastuba_mul_ADD_SU_2_U0_res_digits_data_V_ce0;
wire    karastuba_mul_ADD_SU_2_U0_res_digits_data_V_we0;
wire   [63:0] karastuba_mul_ADD_SU_2_U0_res_digits_data_V_d0;
wire    ap_sync_continue;
wire    z0_digits_data_V_i_full_n;
wire    z0_digits_data_V_t_empty_n;
wire    z2_digits_data_V_i_full_n;
wire    z2_digits_data_V_t_empty_n;
wire    cross_mul_digits_dat_i_full_n;
wire    cross_mul_digits_dat_t_empty_n;
wire    inter_lhs_digits_dat_i_full_n;
wire    inter_lhs_digits_dat_t_empty_n;
wire    inter_rhs_digits_dat_i_full_n;
wire    inter_rhs_digits_dat_t_empty_n;
wire   [31:0] z0_tmp_bits_dout;
wire    z0_tmp_bits_empty_n;
wire   [31:0] z2_tmp_bits_dout;
wire    z2_tmp_bits_empty_n;
wire   [31:0] cross_mul_tmp_bits_dout;
wire    cross_mul_tmp_bits_empty_n;
wire   [31:0] inter_lhs_tmp_bits_dout;
wire    inter_lhs_tmp_bits_empty_n;
wire   [31:0] inter_rhs_tmp_bits_dout;
wire    inter_rhs_tmp_bits_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    karastuba_mul_MUL_st_2_U0_start_full_n;
wire    karastuba_mul_MUL_st_2_U0_start_write;
wire    karastuba_mul_ADD_SU_2_U0_start_full_n;
wire    karastuba_mul_ADD_SU_2_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_inter_rhs_tmp_bits = 1'b0;
#0 ap_sync_reg_channel_write_inter_lhs_tmp_bits = 1'b0;
#0 ap_sync_reg_channel_write_cross_mul_tmp_bits = 1'b0;
#0 ap_sync_reg_channel_write_z2_tmp_bits = 1'b0;
#0 ap_sync_reg_channel_write_z0_tmp_bits = 1'b0;
#0 ap_sync_reg_channel_write_inter_rhs_digits_dat = 1'b0;
#0 ap_sync_reg_channel_write_inter_lhs_digits_dat = 1'b0;
#0 ap_sync_reg_channel_write_cross_mul_digits_dat = 1'b0;
#0 ap_sync_reg_channel_write_z2_digits_data_V = 1'b0;
#0 ap_sync_reg_channel_write_z0_digits_data_V = 1'b0;
end

karastuba_mul_temtde #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
z0_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(karastuba_mul_MUL_st_2_U0_z0_digits_data_V_address0),
    .i_ce0(karastuba_mul_MUL_st_2_U0_z0_digits_data_V_ce0),
    .i_we0(karastuba_mul_MUL_st_2_U0_z0_digits_data_V_we0),
    .i_d0(karastuba_mul_MUL_st_2_U0_z0_digits_data_V_d0),
    .i_q0(z0_digits_data_V_i_q0),
    .t_address0(karastuba_mul_ADD_SU_2_U0_z0_digits_data_V_address0),
    .t_ce0(karastuba_mul_ADD_SU_2_U0_z0_digits_data_V_ce0),
    .t_we0(1'b0),
    .t_d0(64'd0),
    .t_q0(z0_digits_data_V_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(z0_digits_data_V_i_full_n),
    .i_write(ap_channel_done_z0_digits_data_V),
    .t_empty_n(z0_digits_data_V_t_empty_n),
    .t_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

karastuba_mul_temtde #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
z2_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(karastuba_mul_MUL_st_2_U0_z2_digits_data_V_address0),
    .i_ce0(karastuba_mul_MUL_st_2_U0_z2_digits_data_V_ce0),
    .i_we0(karastuba_mul_MUL_st_2_U0_z2_digits_data_V_we0),
    .i_d0(karastuba_mul_MUL_st_2_U0_z2_digits_data_V_d0),
    .i_q0(z2_digits_data_V_i_q0),
    .t_address0(karastuba_mul_ADD_SU_2_U0_z2_digits_data_V_address0),
    .t_ce0(karastuba_mul_ADD_SU_2_U0_z2_digits_data_V_ce0),
    .t_we0(1'b0),
    .t_d0(64'd0),
    .t_q0(z2_digits_data_V_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(z2_digits_data_V_i_full_n),
    .i_write(ap_channel_done_z2_digits_data_V),
    .t_empty_n(z2_digits_data_V_t_empty_n),
    .t_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

karastuba_mul_temtde #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cross_mul_digits_dat_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_address0),
    .i_ce0(karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_ce0),
    .i_we0(karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_we0),
    .i_d0(karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_d0),
    .i_q0(cross_mul_digits_dat_i_q0),
    .t_address0(karastuba_mul_ADD_SU_2_U0_cross_mul_digits_data_V_address0),
    .t_ce0(karastuba_mul_ADD_SU_2_U0_cross_mul_digits_data_V_ce0),
    .t_we0(1'b0),
    .t_d0(64'd0),
    .t_q0(cross_mul_digits_dat_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(cross_mul_digits_dat_i_full_n),
    .i_write(ap_channel_done_cross_mul_digits_dat),
    .t_empty_n(cross_mul_digits_dat_t_empty_n),
    .t_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

karastuba_mul_temtde #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
inter_lhs_digits_dat_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_address0),
    .i_ce0(karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_ce0),
    .i_we0(karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_we0),
    .i_d0(karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_d0),
    .i_q0(inter_lhs_digits_dat_i_q0),
    .t_address0(karastuba_mul_ADD_SU_2_U0_lhs_digits_data_V_address0),
    .t_ce0(karastuba_mul_ADD_SU_2_U0_lhs_digits_data_V_ce0),
    .t_we0(1'b0),
    .t_d0(64'd0),
    .t_q0(inter_lhs_digits_dat_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(inter_lhs_digits_dat_i_full_n),
    .i_write(ap_channel_done_inter_lhs_digits_dat),
    .t_empty_n(inter_lhs_digits_dat_t_empty_n),
    .t_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

karastuba_mul_temtde #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
inter_rhs_digits_dat_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_address0),
    .i_ce0(karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_ce0),
    .i_we0(karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_we0),
    .i_d0(karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_d0),
    .i_q0(inter_rhs_digits_dat_i_q0),
    .t_address0(karastuba_mul_ADD_SU_2_U0_rhs_digits_data_V_address0),
    .t_ce0(karastuba_mul_ADD_SU_2_U0_rhs_digits_data_V_ce0),
    .t_we0(1'b0),
    .t_d0(64'd0),
    .t_q0(inter_rhs_digits_dat_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(inter_rhs_digits_dat_i_full_n),
    .i_write(ap_channel_done_inter_rhs_digits_dat),
    .t_empty_n(inter_rhs_digits_dat_t_empty_n),
    .t_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

karastuba_mul_MUL_st_2 karastuba_mul_MUL_st_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(karastuba_mul_MUL_st_2_U0_ap_start),
    .ap_done(karastuba_mul_MUL_st_2_U0_ap_done),
    .ap_continue(karastuba_mul_MUL_st_2_U0_ap_continue),
    .ap_idle(karastuba_mul_MUL_st_2_U0_ap_idle),
    .ap_ready(karastuba_mul_MUL_st_2_U0_ap_ready),
    .lhs_tmp_bits_read(lhs_tmp_bits_read),
    .lhs_digits_data_V_address0(karastuba_mul_MUL_st_2_U0_lhs_digits_data_V_address0),
    .lhs_digits_data_V_ce0(karastuba_mul_MUL_st_2_U0_lhs_digits_data_V_ce0),
    .lhs_digits_data_V_q0(lhs_digits_data_V_q0),
    .rhs_tmp_bits_read(rhs_tmp_bits_read),
    .rhs_digits_data_V_address0(karastuba_mul_MUL_st_2_U0_rhs_digits_data_V_address0),
    .rhs_digits_data_V_ce0(karastuba_mul_MUL_st_2_U0_rhs_digits_data_V_ce0),
    .rhs_digits_data_V_q0(rhs_digits_data_V_q0),
    .z0_digits_data_V_address0(karastuba_mul_MUL_st_2_U0_z0_digits_data_V_address0),
    .z0_digits_data_V_ce0(karastuba_mul_MUL_st_2_U0_z0_digits_data_V_ce0),
    .z0_digits_data_V_we0(karastuba_mul_MUL_st_2_U0_z0_digits_data_V_we0),
    .z0_digits_data_V_d0(karastuba_mul_MUL_st_2_U0_z0_digits_data_V_d0),
    .z2_digits_data_V_address0(karastuba_mul_MUL_st_2_U0_z2_digits_data_V_address0),
    .z2_digits_data_V_ce0(karastuba_mul_MUL_st_2_U0_z2_digits_data_V_ce0),
    .z2_digits_data_V_we0(karastuba_mul_MUL_st_2_U0_z2_digits_data_V_we0),
    .z2_digits_data_V_d0(karastuba_mul_MUL_st_2_U0_z2_digits_data_V_d0),
    .cross_mul_digits_dat_address0(karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_address0),
    .cross_mul_digits_dat_ce0(karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_ce0),
    .cross_mul_digits_dat_we0(karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_we0),
    .cross_mul_digits_dat_d0(karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_d0),
    .inter_lhs_digits_dat_address0(karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_address0),
    .inter_lhs_digits_dat_ce0(karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_ce0),
    .inter_lhs_digits_dat_we0(karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_we0),
    .inter_lhs_digits_dat_d0(karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_d0),
    .inter_rhs_digits_dat_address0(karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_address0),
    .inter_rhs_digits_dat_ce0(karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_ce0),
    .inter_rhs_digits_dat_we0(karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_we0),
    .inter_rhs_digits_dat_d0(karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_d0),
    .ap_return_0(karastuba_mul_MUL_st_2_U0_ap_return_0),
    .ap_return_1(karastuba_mul_MUL_st_2_U0_ap_return_1),
    .ap_return_2(karastuba_mul_MUL_st_2_U0_ap_return_2),
    .ap_return_3(karastuba_mul_MUL_st_2_U0_ap_return_3),
    .ap_return_4(karastuba_mul_MUL_st_2_U0_ap_return_4)
);

karastuba_mul_ADD_SU_2 karastuba_mul_ADD_SU_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(karastuba_mul_ADD_SU_2_U0_ap_start),
    .ap_done(karastuba_mul_ADD_SU_2_U0_ap_done),
    .ap_continue(karastuba_mul_ADD_SU_2_U0_ap_continue),
    .ap_idle(karastuba_mul_ADD_SU_2_U0_ap_idle),
    .ap_ready(karastuba_mul_ADD_SU_2_U0_ap_ready),
    .z0_tmp_bits_read(z0_tmp_bits_dout),
    .z0_digits_data_V_address0(karastuba_mul_ADD_SU_2_U0_z0_digits_data_V_address0),
    .z0_digits_data_V_ce0(karastuba_mul_ADD_SU_2_U0_z0_digits_data_V_ce0),
    .z0_digits_data_V_q0(z0_digits_data_V_t_q0),
    .z2_tmp_bits_read(z2_tmp_bits_dout),
    .z2_digits_data_V_address0(karastuba_mul_ADD_SU_2_U0_z2_digits_data_V_address0),
    .z2_digits_data_V_ce0(karastuba_mul_ADD_SU_2_U0_z2_digits_data_V_ce0),
    .z2_digits_data_V_q0(z2_digits_data_V_t_q0),
    .cross_mul_tmp_bits_read(cross_mul_tmp_bits_dout),
    .cross_mul_digits_data_V_address0(karastuba_mul_ADD_SU_2_U0_cross_mul_digits_data_V_address0),
    .cross_mul_digits_data_V_ce0(karastuba_mul_ADD_SU_2_U0_cross_mul_digits_data_V_ce0),
    .cross_mul_digits_data_V_q0(cross_mul_digits_dat_t_q0),
    .lhs_tmp_bits_read(inter_lhs_tmp_bits_dout),
    .lhs_digits_data_V_address0(karastuba_mul_ADD_SU_2_U0_lhs_digits_data_V_address0),
    .lhs_digits_data_V_ce0(karastuba_mul_ADD_SU_2_U0_lhs_digits_data_V_ce0),
    .lhs_digits_data_V_q0(inter_lhs_digits_dat_t_q0),
    .rhs_tmp_bits_read(inter_rhs_tmp_bits_dout),
    .rhs_digits_data_V_address0(karastuba_mul_ADD_SU_2_U0_rhs_digits_data_V_address0),
    .rhs_digits_data_V_ce0(karastuba_mul_ADD_SU_2_U0_rhs_digits_data_V_ce0),
    .rhs_digits_data_V_q0(inter_rhs_digits_dat_t_q0),
    .res_tmp_bits(karastuba_mul_ADD_SU_2_U0_res_tmp_bits),
    .res_tmp_bits_ap_vld(karastuba_mul_ADD_SU_2_U0_res_tmp_bits_ap_vld),
    .res_digits_data_V_address0(karastuba_mul_ADD_SU_2_U0_res_digits_data_V_address0),
    .res_digits_data_V_ce0(karastuba_mul_ADD_SU_2_U0_res_digits_data_V_ce0),
    .res_digits_data_V_we0(karastuba_mul_ADD_SU_2_U0_res_digits_data_V_we0),
    .res_digits_data_V_d0(karastuba_mul_ADD_SU_2_U0_res_digits_data_V_d0)
);

fifo_w32_d2_A z0_tmp_bits_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(karastuba_mul_MUL_st_2_U0_ap_return_0),
    .if_full_n(z0_tmp_bits_full_n),
    .if_write(ap_channel_done_z0_tmp_bits),
    .if_dout(z0_tmp_bits_dout),
    .if_empty_n(z0_tmp_bits_empty_n),
    .if_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

fifo_w32_d2_A z2_tmp_bits_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(karastuba_mul_MUL_st_2_U0_ap_return_1),
    .if_full_n(z2_tmp_bits_full_n),
    .if_write(ap_channel_done_z2_tmp_bits),
    .if_dout(z2_tmp_bits_dout),
    .if_empty_n(z2_tmp_bits_empty_n),
    .if_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

fifo_w32_d2_A cross_mul_tmp_bits_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(karastuba_mul_MUL_st_2_U0_ap_return_2),
    .if_full_n(cross_mul_tmp_bits_full_n),
    .if_write(ap_channel_done_cross_mul_tmp_bits),
    .if_dout(cross_mul_tmp_bits_dout),
    .if_empty_n(cross_mul_tmp_bits_empty_n),
    .if_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

fifo_w32_d2_A inter_lhs_tmp_bits_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(karastuba_mul_MUL_st_2_U0_ap_return_3),
    .if_full_n(inter_lhs_tmp_bits_full_n),
    .if_write(ap_channel_done_inter_lhs_tmp_bits),
    .if_dout(inter_lhs_tmp_bits_dout),
    .if_empty_n(inter_lhs_tmp_bits_empty_n),
    .if_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

fifo_w32_d2_A inter_rhs_tmp_bits_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(karastuba_mul_MUL_st_2_U0_ap_return_4),
    .if_full_n(inter_rhs_tmp_bits_full_n),
    .if_write(ap_channel_done_inter_rhs_tmp_bits),
    .if_dout(inter_rhs_tmp_bits_dout),
    .if_empty_n(inter_rhs_tmp_bits_empty_n),
    .if_read(karastuba_mul_ADD_SU_2_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_cross_mul_digits_dat <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cross_mul_digits_dat <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cross_mul_digits_dat <= ap_sync_channel_write_cross_mul_digits_dat;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_cross_mul_tmp_bits <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cross_mul_tmp_bits <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cross_mul_tmp_bits <= ap_sync_channel_write_cross_mul_tmp_bits;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_inter_lhs_digits_dat <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_inter_lhs_digits_dat <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_inter_lhs_digits_dat <= ap_sync_channel_write_inter_lhs_digits_dat;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_inter_lhs_tmp_bits <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_inter_lhs_tmp_bits <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_inter_lhs_tmp_bits <= ap_sync_channel_write_inter_lhs_tmp_bits;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_inter_rhs_digits_dat <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_inter_rhs_digits_dat <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_inter_rhs_digits_dat <= ap_sync_channel_write_inter_rhs_digits_dat;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_inter_rhs_tmp_bits <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_inter_rhs_tmp_bits <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_inter_rhs_tmp_bits <= ap_sync_channel_write_inter_rhs_tmp_bits;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_z0_digits_data_V <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_z0_digits_data_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_z0_digits_data_V <= ap_sync_channel_write_z0_digits_data_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_z0_tmp_bits <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_z0_tmp_bits <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_z0_tmp_bits <= ap_sync_channel_write_z0_tmp_bits;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_z2_digits_data_V <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_z2_digits_data_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_z2_digits_data_V <= ap_sync_channel_write_z2_digits_data_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_z2_tmp_bits <= 1'b0;
    end else begin
        if (((karastuba_mul_MUL_st_2_U0_ap_done & karastuba_mul_MUL_st_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_z2_tmp_bits <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_z2_tmp_bits <= ap_sync_channel_write_z2_tmp_bits;
        end
    end
end

assign ap_channel_done_cross_mul_digits_dat = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_cross_mul_digits_dat ^ 1'b1));

assign ap_channel_done_cross_mul_tmp_bits = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_cross_mul_tmp_bits ^ 1'b1));

assign ap_channel_done_inter_lhs_digits_dat = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_inter_lhs_digits_dat ^ 1'b1));

assign ap_channel_done_inter_lhs_tmp_bits = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_inter_lhs_tmp_bits ^ 1'b1));

assign ap_channel_done_inter_rhs_digits_dat = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_inter_rhs_digits_dat ^ 1'b1));

assign ap_channel_done_inter_rhs_tmp_bits = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_inter_rhs_tmp_bits ^ 1'b1));

assign ap_channel_done_z0_digits_data_V = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_z0_digits_data_V ^ 1'b1));

assign ap_channel_done_z0_tmp_bits = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_z0_tmp_bits ^ 1'b1));

assign ap_channel_done_z2_digits_data_V = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_z2_digits_data_V ^ 1'b1));

assign ap_channel_done_z2_tmp_bits = (karastuba_mul_MUL_st_2_U0_ap_done & (ap_sync_reg_channel_write_z2_tmp_bits ^ 1'b1));

assign ap_done = karastuba_mul_ADD_SU_2_U0_ap_done;

assign ap_idle = (karastuba_mul_MUL_st_2_U0_ap_idle & karastuba_mul_ADD_SU_2_U0_ap_idle & (inter_rhs_tmp_bits_empty_n ^ 1'b1) & (inter_lhs_tmp_bits_empty_n ^ 1'b1) & (cross_mul_tmp_bits_empty_n ^ 1'b1) & (z2_tmp_bits_empty_n ^ 1'b1) & (z0_tmp_bits_empty_n ^ 1'b1) & (inter_rhs_digits_dat_t_empty_n ^ 1'b1) & (inter_lhs_digits_dat_t_empty_n ^ 1'b1) & (cross_mul_digits_dat_t_empty_n ^ 1'b1) & (z2_digits_data_V_t_empty_n ^ 1'b1) & (z0_digits_data_V_t_empty_n ^ 1'b1));

assign ap_ready = karastuba_mul_MUL_st_2_U0_ap_ready;

assign ap_sync_channel_write_cross_mul_digits_dat = ((karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_full_n & ap_channel_done_cross_mul_digits_dat) | ap_sync_reg_channel_write_cross_mul_digits_dat);

assign ap_sync_channel_write_cross_mul_tmp_bits = ((cross_mul_tmp_bits_full_n & ap_channel_done_cross_mul_tmp_bits) | ap_sync_reg_channel_write_cross_mul_tmp_bits);

assign ap_sync_channel_write_inter_lhs_digits_dat = ((karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_full_n & ap_channel_done_inter_lhs_digits_dat) | ap_sync_reg_channel_write_inter_lhs_digits_dat);

assign ap_sync_channel_write_inter_lhs_tmp_bits = ((inter_lhs_tmp_bits_full_n & ap_channel_done_inter_lhs_tmp_bits) | ap_sync_reg_channel_write_inter_lhs_tmp_bits);

assign ap_sync_channel_write_inter_rhs_digits_dat = ((karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_full_n & ap_channel_done_inter_rhs_digits_dat) | ap_sync_reg_channel_write_inter_rhs_digits_dat);

assign ap_sync_channel_write_inter_rhs_tmp_bits = ((inter_rhs_tmp_bits_full_n & ap_channel_done_inter_rhs_tmp_bits) | ap_sync_reg_channel_write_inter_rhs_tmp_bits);

assign ap_sync_channel_write_z0_digits_data_V = ((karastuba_mul_MUL_st_2_U0_z0_digits_data_V_full_n & ap_channel_done_z0_digits_data_V) | ap_sync_reg_channel_write_z0_digits_data_V);

assign ap_sync_channel_write_z0_tmp_bits = ((z0_tmp_bits_full_n & ap_channel_done_z0_tmp_bits) | ap_sync_reg_channel_write_z0_tmp_bits);

assign ap_sync_channel_write_z2_digits_data_V = ((karastuba_mul_MUL_st_2_U0_z2_digits_data_V_full_n & ap_channel_done_z2_digits_data_V) | ap_sync_reg_channel_write_z2_digits_data_V);

assign ap_sync_channel_write_z2_tmp_bits = ((z2_tmp_bits_full_n & ap_channel_done_z2_tmp_bits) | ap_sync_reg_channel_write_z2_tmp_bits);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = karastuba_mul_ADD_SU_2_U0_ap_done;

assign ap_sync_ready = karastuba_mul_MUL_st_2_U0_ap_ready;

assign karastuba_mul_ADD_SU_2_U0_ap_continue = ap_continue;

assign karastuba_mul_ADD_SU_2_U0_ap_start = (z2_tmp_bits_empty_n & z2_digits_data_V_t_empty_n & z0_tmp_bits_empty_n & z0_digits_data_V_t_empty_n & inter_rhs_tmp_bits_empty_n & inter_rhs_digits_dat_t_empty_n & inter_lhs_tmp_bits_empty_n & inter_lhs_digits_dat_t_empty_n & cross_mul_tmp_bits_empty_n & cross_mul_digits_dat_t_empty_n);

assign karastuba_mul_ADD_SU_2_U0_start_full_n = 1'b1;

assign karastuba_mul_ADD_SU_2_U0_start_write = 1'b0;

assign karastuba_mul_MUL_st_2_U0_ap_continue = (ap_sync_channel_write_z2_tmp_bits & ap_sync_channel_write_z2_digits_data_V & ap_sync_channel_write_z0_tmp_bits & ap_sync_channel_write_z0_digits_data_V & ap_sync_channel_write_inter_rhs_tmp_bits & ap_sync_channel_write_inter_rhs_digits_dat & ap_sync_channel_write_inter_lhs_tmp_bits & ap_sync_channel_write_inter_lhs_digits_dat & ap_sync_channel_write_cross_mul_tmp_bits & ap_sync_channel_write_cross_mul_digits_dat);

assign karastuba_mul_MUL_st_2_U0_ap_start = ap_start;

assign karastuba_mul_MUL_st_2_U0_cross_mul_digits_dat_full_n = cross_mul_digits_dat_i_full_n;

assign karastuba_mul_MUL_st_2_U0_inter_lhs_digits_dat_full_n = inter_lhs_digits_dat_i_full_n;

assign karastuba_mul_MUL_st_2_U0_inter_rhs_digits_dat_full_n = inter_rhs_digits_dat_i_full_n;

assign karastuba_mul_MUL_st_2_U0_start_full_n = 1'b1;

assign karastuba_mul_MUL_st_2_U0_start_write = 1'b0;

assign karastuba_mul_MUL_st_2_U0_z0_digits_data_V_full_n = z0_digits_data_V_i_full_n;

assign karastuba_mul_MUL_st_2_U0_z2_digits_data_V_full_n = z2_digits_data_V_i_full_n;

assign lhs_digits_data_V_address0 = karastuba_mul_MUL_st_2_U0_lhs_digits_data_V_address0;

assign lhs_digits_data_V_address1 = 4'd0;

assign lhs_digits_data_V_ce0 = karastuba_mul_MUL_st_2_U0_lhs_digits_data_V_ce0;

assign lhs_digits_data_V_ce1 = 1'b0;

assign lhs_digits_data_V_d0 = 64'd0;

assign lhs_digits_data_V_d1 = 64'd0;

assign lhs_digits_data_V_we0 = 1'b0;

assign lhs_digits_data_V_we1 = 1'b0;

assign res_digits_data_V_address0 = karastuba_mul_ADD_SU_2_U0_res_digits_data_V_address0;

assign res_digits_data_V_address1 = 5'd0;

assign res_digits_data_V_ce0 = karastuba_mul_ADD_SU_2_U0_res_digits_data_V_ce0;

assign res_digits_data_V_ce1 = 1'b0;

assign res_digits_data_V_d0 = karastuba_mul_ADD_SU_2_U0_res_digits_data_V_d0;

assign res_digits_data_V_d1 = 64'd0;

assign res_digits_data_V_we0 = karastuba_mul_ADD_SU_2_U0_res_digits_data_V_we0;

assign res_digits_data_V_we1 = 1'b0;

assign res_tmp_bits = karastuba_mul_ADD_SU_2_U0_res_tmp_bits;

assign res_tmp_bits_ap_vld = karastuba_mul_ADD_SU_2_U0_res_tmp_bits_ap_vld;

assign rhs_digits_data_V_address0 = karastuba_mul_MUL_st_2_U0_rhs_digits_data_V_address0;

assign rhs_digits_data_V_address1 = 4'd0;

assign rhs_digits_data_V_ce0 = karastuba_mul_MUL_st_2_U0_rhs_digits_data_V_ce0;

assign rhs_digits_data_V_ce1 = 1'b0;

assign rhs_digits_data_V_d0 = 64'd0;

assign rhs_digits_data_V_d1 = 64'd0;

assign rhs_digits_data_V_we0 = 1'b0;

assign rhs_digits_data_V_we1 = 1'b0;

endmodule //karastuba_mul_templa_5
