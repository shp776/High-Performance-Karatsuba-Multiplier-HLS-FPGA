// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_1_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_1_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_1_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Loop_1_proc::ap_ST_fsm_state1 = "1";
const sc_lv<3> Loop_1_proc::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> Loop_1_proc::ap_ST_fsm_state4 = "100";
const sc_lv<32> Loop_1_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Loop_1_proc::ap_const_boolean_1 = true;
const sc_lv<32> Loop_1_proc::ap_const_lv32_1 = "1";
const bool Loop_1_proc::ap_const_boolean_0 = false;
const sc_lv<1> Loop_1_proc::ap_const_lv1_0 = "0";
const sc_lv<1> Loop_1_proc::ap_const_lv1_1 = "1";
const sc_lv<8> Loop_1_proc::ap_const_lv8_0 = "00000000";
const sc_lv<8> Loop_1_proc::ap_const_lv8_80 = "10000000";
const sc_lv<8> Loop_1_proc::ap_const_lv8_1 = "1";
const sc_lv<32> Loop_1_proc::ap_const_lv32_6 = "110";
const sc_lv<32> Loop_1_proc::ap_const_lv32_7 = "111";
const sc_lv<2> Loop_1_proc::ap_const_lv2_0 = "00";
const sc_lv<8> Loop_1_proc::ap_const_lv8_C0 = "11000000";
const sc_lv<32> Loop_1_proc::ap_const_lv32_2 = "10";

Loop_1_proc::Loop_1_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_hs_input_V_U = new regslice_both<64>("regslice_both_hs_input_V_U");
    regslice_both_hs_input_V_U->ap_clk(ap_clk);
    regslice_both_hs_input_V_U->ap_rst(ap_rst);
    regslice_both_hs_input_V_U->data_in(hs_input_V_TDATA);
    regslice_both_hs_input_V_U->vld_in(hs_input_V_TVALID);
    regslice_both_hs_input_V_U->ack_in(regslice_both_hs_input_V_U_ack_in);
    regslice_both_hs_input_V_U->data_out(hs_input_V_TDATA_int);
    regslice_both_hs_input_V_U->vld_out(hs_input_V_TVALID_int);
    regslice_both_hs_input_V_U->ack_out(hs_input_V_TREADY_int);
    regslice_both_hs_input_V_U->apdone_blk(regslice_both_hs_input_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln419_fu_126_p2);
    sensitive << ( i_0_i_reg_87 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op16_read_state2 );
    sensitive << ( ap_predicate_op18_read_state2 );
    sensitive << ( hs_input_V_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op16_read_state2 );
    sensitive << ( ap_predicate_op18_read_state2 );
    sensitive << ( hs_input_V_TVALID_int );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( ap_predicate_op16_read_state2 );
    sensitive << ( ap_predicate_op18_read_state2 );
    sensitive << ( hs_input_V_TVALID_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln412_fu_98_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_op16_read_state2);
    sensitive << ( icmp_ln412_fu_98_p2 );
    sensitive << ( icmp_ln416_fu_120_p2 );

    SC_METHOD(thread_ap_predicate_op18_read_state2);
    sensitive << ( icmp_ln412_fu_98_p2 );
    sensitive << ( icmp_ln416_fu_120_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_hs_input_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln412_fu_98_p2 );
    sensitive << ( icmp_ln416_fu_120_p2 );
    sensitive << ( hs_input_V_TVALID_int );

    SC_METHOD(thread_hs_input_V_TREADY);
    sensitive << ( hs_input_V_TVALID );
    sensitive << ( regslice_both_hs_input_V_U_ack_in );

    SC_METHOD(thread_hs_input_V_TREADY_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op16_read_state2 );
    sensitive << ( ap_predicate_op18_read_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_fu_104_p2);
    sensitive << ( i_0_i_reg_87 );

    SC_METHOD(thread_icmp_ln412_fu_98_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_0_i_reg_87 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln416_fu_120_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln412_fu_98_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_4_fu_110_p4 );

    SC_METHOD(thread_lhs_digits_data_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln417_fu_132_p1 );

    SC_METHOD(thread_lhs_digits_data_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_lhs_digits_data_V_d0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( hs_input_V_TDATA_int );

    SC_METHOD(thread_lhs_digits_data_V_we0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln412_fu_98_p2 );
    sensitive << ( icmp_ln416_fu_120_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_rhs_digits_data_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( zext_ln419_fu_137_p1 );

    SC_METHOD(thread_rhs_digits_data_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_rhs_digits_data_V_d0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( hs_input_V_read_1_reg_159 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_rhs_digits_data_V_we0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln416_reg_150 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_4_fu_110_p4);
    sensitive << ( i_0_i_reg_87 );

    SC_METHOD(thread_zext_ln417_fu_132_p1);
    sensitive << ( i_0_i_reg_87 );

    SC_METHOD(thread_zext_ln419_fu_137_p1);
    sensitive << ( add_ln419_reg_154 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln412_fu_98_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_1_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, hs_input_V_TDATA, "(port)hs_input_V_TDATA");
    sc_trace(mVcdFile, hs_input_V_TVALID, "(port)hs_input_V_TVALID");
    sc_trace(mVcdFile, hs_input_V_TREADY, "(port)hs_input_V_TREADY");
    sc_trace(mVcdFile, lhs_digits_data_V_address0, "(port)lhs_digits_data_V_address0");
    sc_trace(mVcdFile, lhs_digits_data_V_ce0, "(port)lhs_digits_data_V_ce0");
    sc_trace(mVcdFile, lhs_digits_data_V_we0, "(port)lhs_digits_data_V_we0");
    sc_trace(mVcdFile, lhs_digits_data_V_d0, "(port)lhs_digits_data_V_d0");
    sc_trace(mVcdFile, rhs_digits_data_V_address0, "(port)rhs_digits_data_V_address0");
    sc_trace(mVcdFile, rhs_digits_data_V_ce0, "(port)rhs_digits_data_V_ce0");
    sc_trace(mVcdFile, rhs_digits_data_V_we0, "(port)rhs_digits_data_V_we0");
    sc_trace(mVcdFile, rhs_digits_data_V_d0, "(port)rhs_digits_data_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, hs_input_V_TDATA_blk_n, "hs_input_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln412_fu_98_p2, "icmp_ln412_fu_98_p2");
    sc_trace(mVcdFile, icmp_ln416_fu_120_p2, "icmp_ln416_fu_120_p2");
    sc_trace(mVcdFile, i_0_i_reg_87, "i_0_i_reg_87");
    sc_trace(mVcdFile, ap_predicate_op16_read_state2, "ap_predicate_op16_read_state2");
    sc_trace(mVcdFile, ap_predicate_op18_read_state2, "ap_predicate_op18_read_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_104_p2, "i_fu_104_p2");
    sc_trace(mVcdFile, icmp_ln416_reg_150, "icmp_ln416_reg_150");
    sc_trace(mVcdFile, add_ln419_fu_126_p2, "add_ln419_fu_126_p2");
    sc_trace(mVcdFile, add_ln419_reg_154, "add_ln419_reg_154");
    sc_trace(mVcdFile, hs_input_V_read_1_reg_159, "hs_input_V_read_1_reg_159");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, zext_ln417_fu_132_p1, "zext_ln417_fu_132_p1");
    sc_trace(mVcdFile, zext_ln419_fu_137_p1, "zext_ln419_fu_137_p1");
    sc_trace(mVcdFile, tmp_4_fu_110_p4, "tmp_4_fu_110_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, regslice_both_hs_input_V_U_apdone_blk, "regslice_both_hs_input_V_U_apdone_blk");
    sc_trace(mVcdFile, hs_input_V_TDATA_int, "hs_input_V_TDATA_int");
    sc_trace(mVcdFile, hs_input_V_TVALID_int, "hs_input_V_TVALID_int");
    sc_trace(mVcdFile, hs_input_V_TREADY_int, "hs_input_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_hs_input_V_U_ack_in, "regslice_both_hs_input_V_U_ack_in");
#endif

    }
}

Loop_1_proc::~Loop_1_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_hs_input_V_U;
}

void Loop_1_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_i_reg_87 = i_fu_104_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_i_reg_87 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln416_fu_120_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        add_ln419_reg_154 = add_ln419_fu_126_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        hs_input_V_read_1_reg_159 = hs_input_V_TDATA_int.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln416_reg_150 = icmp_ln416_fu_120_p2.read();
    }
}

void Loop_1_proc::thread_add_ln419_fu_126_p2() {
    add_ln419_fu_126_p2 = (!i_0_i_reg_87.read().is_01() || !ap_const_lv8_C0.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_i_reg_87.read()) + sc_bigint<8>(ap_const_lv8_C0));
}

void Loop_1_proc::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void Loop_1_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_1_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void Loop_1_proc::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_1_proc::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state2.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, hs_input_V_TVALID_int.read())) || 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op18_read_state2.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, hs_input_V_TVALID_int.read()))));
}

void Loop_1_proc::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state2.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, hs_input_V_TVALID_int.read())) || 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op18_read_state2.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, hs_input_V_TVALID_int.read()))));
}

void Loop_1_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_1_proc::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, hs_input_V_TVALID_int.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op18_read_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, hs_input_V_TVALID_int.read())));
}

void Loop_1_proc::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_1_proc::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_1_proc::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Loop_1_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_ap_predicate_op16_read_state2() {
    ap_predicate_op16_read_state2 = (esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln416_fu_120_p2.read()));
}

void Loop_1_proc::thread_ap_predicate_op18_read_state2() {
    ap_predicate_op18_read_state2 = (esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln416_fu_120_p2.read(), ap_const_lv1_1));
}

void Loop_1_proc::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_hs_input_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln416_fu_120_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln416_fu_120_p2.read())))) {
        hs_input_V_TDATA_blk_n = hs_input_V_TVALID_int.read();
    } else {
        hs_input_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_hs_input_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, hs_input_V_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_hs_input_V_U_ack_in.read()))) {
        hs_input_V_TREADY = ap_const_logic_1;
    } else {
        hs_input_V_TREADY = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_hs_input_V_TREADY_int() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op18_read_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        hs_input_V_TREADY_int = ap_const_logic_1;
    } else {
        hs_input_V_TREADY_int = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_i_fu_104_p2() {
    i_fu_104_p2 = (!i_0_i_reg_87.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_i_reg_87.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void Loop_1_proc::thread_icmp_ln412_fu_98_p2() {
    icmp_ln412_fu_98_p2 = (!i_0_i_reg_87.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_87.read() == ap_const_lv8_80);
}

void Loop_1_proc::thread_icmp_ln416_fu_120_p2() {
    icmp_ln416_fu_120_p2 = (!tmp_4_fu_110_p4.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_110_p4.read() == ap_const_lv2_0);
}

void Loop_1_proc::thread_lhs_digits_data_V_address0() {
    lhs_digits_data_V_address0 =  (sc_lv<6>) (zext_ln417_fu_132_p1.read());
}

void Loop_1_proc::thread_lhs_digits_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        lhs_digits_data_V_ce0 = ap_const_logic_1;
    } else {
        lhs_digits_data_V_ce0 = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_lhs_digits_data_V_d0() {
    lhs_digits_data_V_d0 = hs_input_V_TDATA_int.read();
}

void Loop_1_proc::thread_lhs_digits_data_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_ln416_fu_120_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        lhs_digits_data_V_we0 = ap_const_logic_1;
    } else {
        lhs_digits_data_V_we0 = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_rhs_digits_data_V_address0() {
    rhs_digits_data_V_address0 =  (sc_lv<6>) (zext_ln419_fu_137_p1.read());
}

void Loop_1_proc::thread_rhs_digits_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        rhs_digits_data_V_ce0 = ap_const_logic_1;
    } else {
        rhs_digits_data_V_ce0 = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_rhs_digits_data_V_d0() {
    rhs_digits_data_V_d0 = hs_input_V_read_1_reg_159.read();
}

void Loop_1_proc::thread_rhs_digits_data_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln416_reg_150.read()))) {
        rhs_digits_data_V_we0 = ap_const_logic_1;
    } else {
        rhs_digits_data_V_we0 = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_tmp_4_fu_110_p4() {
    tmp_4_fu_110_p4 = i_0_i_reg_87.read().range(7, 6);
}

void Loop_1_proc::thread_zext_ln417_fu_132_p1() {
    zext_ln417_fu_132_p1 = esl_zext<64,8>(i_0_i_reg_87.read());
}

void Loop_1_proc::thread_zext_ln419_fu_137_p1() {
    zext_ln419_fu_137_p1 = esl_zext<64,8>(add_ln419_reg_154.read());
}

void Loop_1_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln412_fu_98_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

