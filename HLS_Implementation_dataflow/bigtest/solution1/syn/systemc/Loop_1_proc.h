// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_1_proc_HH_
#define _Loop_1_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_1_proc : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > hs_input_V_TDATA;
    sc_in< sc_logic > hs_input_V_TVALID;
    sc_out< sc_logic > hs_input_V_TREADY;
    sc_out< sc_lv<6> > lhs_digits_data_V_address0;
    sc_out< sc_logic > lhs_digits_data_V_ce0;
    sc_out< sc_logic > lhs_digits_data_V_we0;
    sc_out< sc_lv<64> > lhs_digits_data_V_d0;
    sc_out< sc_lv<6> > rhs_digits_data_V_address0;
    sc_out< sc_logic > rhs_digits_data_V_ce0;
    sc_out< sc_logic > rhs_digits_data_V_we0;
    sc_out< sc_lv<64> > rhs_digits_data_V_d0;


    // Module declarations
    Loop_1_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_1_proc);

    ~Loop_1_proc();

    sc_trace_file* mVcdFile;

    regslice_both<64>* regslice_both_hs_input_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > hs_input_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln412_fu_98_p2;
    sc_signal< sc_lv<1> > icmp_ln416_fu_120_p2;
    sc_signal< sc_lv<8> > i_0_i_reg_87;
    sc_signal< bool > ap_predicate_op16_read_state2;
    sc_signal< bool > ap_predicate_op18_read_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > i_fu_104_p2;
    sc_signal< sc_lv<1> > icmp_ln416_reg_150;
    sc_signal< sc_lv<8> > add_ln419_fu_126_p2;
    sc_signal< sc_lv<8> > add_ln419_reg_154;
    sc_signal< sc_lv<64> > hs_input_V_read_1_reg_159;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<64> > zext_ln417_fu_132_p1;
    sc_signal< sc_lv<64> > zext_ln419_fu_137_p1;
    sc_signal< sc_lv<2> > tmp_4_fu_110_p4;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_hs_input_V_U_apdone_blk;
    sc_signal< sc_lv<64> > hs_input_V_TDATA_int;
    sc_signal< sc_logic > hs_input_V_TVALID_int;
    sc_signal< sc_logic > hs_input_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_hs_input_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<8> ap_const_lv8_C0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln419_fu_126_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_predicate_op16_read_state2();
    void thread_ap_predicate_op18_read_state2();
    void thread_ap_ready();
    void thread_hs_input_V_TDATA_blk_n();
    void thread_hs_input_V_TREADY();
    void thread_hs_input_V_TREADY_int();
    void thread_i_fu_104_p2();
    void thread_icmp_ln412_fu_98_p2();
    void thread_icmp_ln416_fu_120_p2();
    void thread_lhs_digits_data_V_address0();
    void thread_lhs_digits_data_V_ce0();
    void thread_lhs_digits_data_V_d0();
    void thread_lhs_digits_data_V_we0();
    void thread_rhs_digits_data_V_address0();
    void thread_rhs_digits_data_V_ce0();
    void thread_rhs_digits_data_V_d0();
    void thread_rhs_digits_data_V_we0();
    void thread_tmp_4_fu_110_p4();
    void thread_zext_ln417_fu_132_p1();
    void thread_zext_ln419_fu_137_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
