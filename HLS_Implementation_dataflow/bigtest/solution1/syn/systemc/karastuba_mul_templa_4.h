// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _karastuba_mul_templa_4_HH_
#define _karastuba_mul_templa_4_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "karastuba_mul_MUL_st_1.h"
#include "karastuba_mul_ADD_SU_1.h"
#include "karastuba_mul_temOgC.h"
#include "fifo_w32_d2_A_x.h"

namespace ap_rtl {

struct karastuba_mul_templa_4 : public sc_module {
    // Port declarations 43
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<2> > lhs_tmp_bits_read;
    sc_out< sc_lv<5> > lhs_digits_data_V_address0;
    sc_out< sc_logic > lhs_digits_data_V_ce0;
    sc_out< sc_lv<64> > lhs_digits_data_V_d0;
    sc_in< sc_lv<64> > lhs_digits_data_V_q0;
    sc_out< sc_logic > lhs_digits_data_V_we0;
    sc_out< sc_lv<5> > lhs_digits_data_V_address1;
    sc_out< sc_logic > lhs_digits_data_V_ce1;
    sc_out< sc_lv<64> > lhs_digits_data_V_d1;
    sc_in< sc_lv<64> > lhs_digits_data_V_q1;
    sc_out< sc_logic > lhs_digits_data_V_we1;
    sc_in< sc_lv<2> > rhs_tmp_bits_read;
    sc_out< sc_lv<5> > rhs_digits_data_V_address0;
    sc_out< sc_logic > rhs_digits_data_V_ce0;
    sc_out< sc_lv<64> > rhs_digits_data_V_d0;
    sc_in< sc_lv<64> > rhs_digits_data_V_q0;
    sc_out< sc_logic > rhs_digits_data_V_we0;
    sc_out< sc_lv<5> > rhs_digits_data_V_address1;
    sc_out< sc_logic > rhs_digits_data_V_ce1;
    sc_out< sc_lv<64> > rhs_digits_data_V_d1;
    sc_in< sc_lv<64> > rhs_digits_data_V_q1;
    sc_out< sc_logic > rhs_digits_data_V_we1;
    sc_out< sc_lv<32> > res_tmp_bits;
    sc_out< sc_lv<6> > res_digits_data_V_address0;
    sc_out< sc_logic > res_digits_data_V_ce0;
    sc_out< sc_lv<64> > res_digits_data_V_d0;
    sc_in< sc_lv<64> > res_digits_data_V_q0;
    sc_out< sc_logic > res_digits_data_V_we0;
    sc_out< sc_lv<6> > res_digits_data_V_address1;
    sc_out< sc_logic > res_digits_data_V_ce1;
    sc_out< sc_lv<64> > res_digits_data_V_d1;
    sc_in< sc_lv<64> > res_digits_data_V_q1;
    sc_out< sc_logic > res_digits_data_V_we1;
    sc_in< sc_logic > lhs_tmp_bits_read_ap_vld;
    sc_in< sc_logic > rhs_tmp_bits_read_ap_vld;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > res_tmp_bits_ap_vld;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const2;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<64> > ap_var_for_const1;


    // Module declarations
    karastuba_mul_templa_4(sc_module_name name);
    SC_HAS_PROCESS(karastuba_mul_templa_4);

    ~karastuba_mul_templa_4();

    sc_trace_file* mVcdFile;

    karastuba_mul_temOgC* z0_digits_data_V_U;
    karastuba_mul_temOgC* z2_digits_data_V_U;
    karastuba_mul_temOgC* cross_mul_digits_dat_U;
    karastuba_mul_temOgC* inter_lhs_digits_dat_U;
    karastuba_mul_temOgC* inter_rhs_digits_dat_U;
    karastuba_mul_MUL_st_1* karastuba_mul_MUL_st_1_U0;
    karastuba_mul_ADD_SU_1* karastuba_mul_ADD_SU_1_U0;
    fifo_w32_d2_A_x* z0_tmp_bits_U;
    fifo_w32_d2_A_x* z2_tmp_bits_U;
    fifo_w32_d2_A_x* cross_mul_tmp_bits_U;
    fifo_w32_d2_A_x* inter_lhs_tmp_bits_U;
    fifo_w32_d2_A_x* inter_rhs_tmp_bits_U;
    sc_signal< sc_lv<64> > z0_digits_data_V_i_q0;
    sc_signal< sc_lv<64> > z0_digits_data_V_t_q0;
    sc_signal< sc_lv<64> > z2_digits_data_V_i_q0;
    sc_signal< sc_lv<64> > z2_digits_data_V_t_q0;
    sc_signal< sc_lv<64> > cross_mul_digits_dat_i_q0;
    sc_signal< sc_lv<64> > cross_mul_digits_dat_t_q0;
    sc_signal< sc_lv<64> > inter_lhs_digits_dat_i_q0;
    sc_signal< sc_lv<64> > inter_lhs_digits_dat_t_q0;
    sc_signal< sc_lv<64> > inter_rhs_digits_dat_i_q0;
    sc_signal< sc_lv<64> > inter_rhs_digits_dat_t_q0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_ap_start;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_ap_done;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_ap_continue;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_ap_idle;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_ap_ready;
    sc_signal< sc_lv<5> > karastuba_mul_MUL_st_1_U0_lhs_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_lhs_digits_data_V_ce0;
    sc_signal< sc_lv<5> > karastuba_mul_MUL_st_1_U0_rhs_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_rhs_digits_data_V_ce0;
    sc_signal< sc_lv<5> > karastuba_mul_MUL_st_1_U0_z0_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_z0_digits_data_V_ce0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_z0_digits_data_V_we0;
    sc_signal< sc_lv<64> > karastuba_mul_MUL_st_1_U0_z0_digits_data_V_d0;
    sc_signal< sc_lv<5> > karastuba_mul_MUL_st_1_U0_z2_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_z2_digits_data_V_ce0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_z2_digits_data_V_we0;
    sc_signal< sc_lv<64> > karastuba_mul_MUL_st_1_U0_z2_digits_data_V_d0;
    sc_signal< sc_lv<5> > karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_address0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_ce0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_we0;
    sc_signal< sc_lv<64> > karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_d0;
    sc_signal< sc_lv<5> > karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_address0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_ce0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_we0;
    sc_signal< sc_lv<64> > karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_d0;
    sc_signal< sc_lv<5> > karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_address0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_ce0;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_we0;
    sc_signal< sc_lv<64> > karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_d0;
    sc_signal< sc_lv<32> > karastuba_mul_MUL_st_1_U0_ap_return_0;
    sc_signal< sc_lv<32> > karastuba_mul_MUL_st_1_U0_ap_return_1;
    sc_signal< sc_lv<32> > karastuba_mul_MUL_st_1_U0_ap_return_2;
    sc_signal< sc_lv<32> > karastuba_mul_MUL_st_1_U0_ap_return_3;
    sc_signal< sc_lv<32> > karastuba_mul_MUL_st_1_U0_ap_return_4;
    sc_signal< sc_logic > ap_channel_done_inter_rhs_tmp_bits;
    sc_signal< sc_logic > inter_rhs_tmp_bits_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_inter_rhs_tmp_bits;
    sc_signal< sc_logic > ap_sync_channel_write_inter_rhs_tmp_bits;
    sc_signal< sc_logic > ap_channel_done_inter_lhs_tmp_bits;
    sc_signal< sc_logic > inter_lhs_tmp_bits_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_inter_lhs_tmp_bits;
    sc_signal< sc_logic > ap_sync_channel_write_inter_lhs_tmp_bits;
    sc_signal< sc_logic > ap_channel_done_cross_mul_tmp_bits;
    sc_signal< sc_logic > cross_mul_tmp_bits_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_cross_mul_tmp_bits;
    sc_signal< sc_logic > ap_sync_channel_write_cross_mul_tmp_bits;
    sc_signal< sc_logic > ap_channel_done_z2_tmp_bits;
    sc_signal< sc_logic > z2_tmp_bits_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_z2_tmp_bits;
    sc_signal< sc_logic > ap_sync_channel_write_z2_tmp_bits;
    sc_signal< sc_logic > ap_channel_done_z0_tmp_bits;
    sc_signal< sc_logic > z0_tmp_bits_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_z0_tmp_bits;
    sc_signal< sc_logic > ap_sync_channel_write_z0_tmp_bits;
    sc_signal< sc_logic > ap_channel_done_inter_rhs_digits_dat;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_inter_rhs_digits_dat;
    sc_signal< sc_logic > ap_sync_channel_write_inter_rhs_digits_dat;
    sc_signal< sc_logic > ap_channel_done_inter_lhs_digits_dat;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_inter_lhs_digits_dat;
    sc_signal< sc_logic > ap_sync_channel_write_inter_lhs_digits_dat;
    sc_signal< sc_logic > ap_channel_done_cross_mul_digits_dat;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_cross_mul_digits_dat;
    sc_signal< sc_logic > ap_sync_channel_write_cross_mul_digits_dat;
    sc_signal< sc_logic > ap_channel_done_z2_digits_data_V;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_z2_digits_data_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_z2_digits_data_V;
    sc_signal< sc_logic > ap_sync_channel_write_z2_digits_data_V;
    sc_signal< sc_logic > ap_channel_done_z0_digits_data_V;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_z0_digits_data_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_z0_digits_data_V;
    sc_signal< sc_logic > ap_sync_channel_write_z0_digits_data_V;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_ap_start;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_ap_done;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_ap_continue;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_ap_idle;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_ap_ready;
    sc_signal< sc_lv<5> > karastuba_mul_ADD_SU_1_U0_z0_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_z0_digits_data_V_ce0;
    sc_signal< sc_lv<5> > karastuba_mul_ADD_SU_1_U0_z2_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_z2_digits_data_V_ce0;
    sc_signal< sc_lv<5> > karastuba_mul_ADD_SU_1_U0_cross_mul_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_cross_mul_digits_data_V_ce0;
    sc_signal< sc_lv<5> > karastuba_mul_ADD_SU_1_U0_lhs_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_lhs_digits_data_V_ce0;
    sc_signal< sc_lv<5> > karastuba_mul_ADD_SU_1_U0_rhs_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_rhs_digits_data_V_ce0;
    sc_signal< sc_lv<32> > karastuba_mul_ADD_SU_1_U0_res_tmp_bits;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_res_tmp_bits_ap_vld;
    sc_signal< sc_lv<6> > karastuba_mul_ADD_SU_1_U0_res_digits_data_V_address0;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_res_digits_data_V_ce0;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_res_digits_data_V_we0;
    sc_signal< sc_lv<64> > karastuba_mul_ADD_SU_1_U0_res_digits_data_V_d0;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > z0_digits_data_V_i_full_n;
    sc_signal< sc_logic > z0_digits_data_V_t_empty_n;
    sc_signal< sc_logic > z2_digits_data_V_i_full_n;
    sc_signal< sc_logic > z2_digits_data_V_t_empty_n;
    sc_signal< sc_logic > cross_mul_digits_dat_i_full_n;
    sc_signal< sc_logic > cross_mul_digits_dat_t_empty_n;
    sc_signal< sc_logic > inter_lhs_digits_dat_i_full_n;
    sc_signal< sc_logic > inter_lhs_digits_dat_t_empty_n;
    sc_signal< sc_logic > inter_rhs_digits_dat_i_full_n;
    sc_signal< sc_logic > inter_rhs_digits_dat_t_empty_n;
    sc_signal< sc_lv<32> > z0_tmp_bits_dout;
    sc_signal< sc_logic > z0_tmp_bits_empty_n;
    sc_signal< sc_lv<32> > z2_tmp_bits_dout;
    sc_signal< sc_logic > z2_tmp_bits_empty_n;
    sc_signal< sc_lv<32> > cross_mul_tmp_bits_dout;
    sc_signal< sc_logic > cross_mul_tmp_bits_empty_n;
    sc_signal< sc_lv<32> > inter_lhs_tmp_bits_dout;
    sc_signal< sc_logic > inter_lhs_tmp_bits_empty_n;
    sc_signal< sc_lv<32> > inter_rhs_tmp_bits_dout;
    sc_signal< sc_logic > inter_rhs_tmp_bits_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_start_full_n;
    sc_signal< sc_logic > karastuba_mul_MUL_st_1_U0_start_write;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_start_full_n;
    sc_signal< sc_logic > karastuba_mul_ADD_SU_1_U0_start_write;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_channel_done_cross_mul_digits_dat();
    void thread_ap_channel_done_cross_mul_tmp_bits();
    void thread_ap_channel_done_inter_lhs_digits_dat();
    void thread_ap_channel_done_inter_lhs_tmp_bits();
    void thread_ap_channel_done_inter_rhs_digits_dat();
    void thread_ap_channel_done_inter_rhs_tmp_bits();
    void thread_ap_channel_done_z0_digits_data_V();
    void thread_ap_channel_done_z0_tmp_bits();
    void thread_ap_channel_done_z2_digits_data_V();
    void thread_ap_channel_done_z2_tmp_bits();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_channel_write_cross_mul_digits_dat();
    void thread_ap_sync_channel_write_cross_mul_tmp_bits();
    void thread_ap_sync_channel_write_inter_lhs_digits_dat();
    void thread_ap_sync_channel_write_inter_lhs_tmp_bits();
    void thread_ap_sync_channel_write_inter_rhs_digits_dat();
    void thread_ap_sync_channel_write_inter_rhs_tmp_bits();
    void thread_ap_sync_channel_write_z0_digits_data_V();
    void thread_ap_sync_channel_write_z0_tmp_bits();
    void thread_ap_sync_channel_write_z2_digits_data_V();
    void thread_ap_sync_channel_write_z2_tmp_bits();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_karastuba_mul_ADD_SU_1_U0_ap_continue();
    void thread_karastuba_mul_ADD_SU_1_U0_ap_start();
    void thread_karastuba_mul_ADD_SU_1_U0_start_full_n();
    void thread_karastuba_mul_ADD_SU_1_U0_start_write();
    void thread_karastuba_mul_MUL_st_1_U0_ap_continue();
    void thread_karastuba_mul_MUL_st_1_U0_ap_start();
    void thread_karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_full_n();
    void thread_karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_full_n();
    void thread_karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_full_n();
    void thread_karastuba_mul_MUL_st_1_U0_start_full_n();
    void thread_karastuba_mul_MUL_st_1_U0_start_write();
    void thread_karastuba_mul_MUL_st_1_U0_z0_digits_data_V_full_n();
    void thread_karastuba_mul_MUL_st_1_U0_z2_digits_data_V_full_n();
    void thread_lhs_digits_data_V_address0();
    void thread_lhs_digits_data_V_address1();
    void thread_lhs_digits_data_V_ce0();
    void thread_lhs_digits_data_V_ce1();
    void thread_lhs_digits_data_V_d0();
    void thread_lhs_digits_data_V_d1();
    void thread_lhs_digits_data_V_we0();
    void thread_lhs_digits_data_V_we1();
    void thread_res_digits_data_V_address0();
    void thread_res_digits_data_V_address1();
    void thread_res_digits_data_V_ce0();
    void thread_res_digits_data_V_ce1();
    void thread_res_digits_data_V_d0();
    void thread_res_digits_data_V_d1();
    void thread_res_digits_data_V_we0();
    void thread_res_digits_data_V_we1();
    void thread_res_tmp_bits();
    void thread_res_tmp_bits_ap_vld();
    void thread_rhs_digits_data_V_address0();
    void thread_rhs_digits_data_V_address1();
    void thread_rhs_digits_data_V_ce0();
    void thread_rhs_digits_data_V_ce1();
    void thread_rhs_digits_data_V_d0();
    void thread_rhs_digits_data_V_d1();
    void thread_rhs_digits_data_V_we0();
    void thread_rhs_digits_data_V_we1();
};

}

using namespace ap_rtl;

#endif
