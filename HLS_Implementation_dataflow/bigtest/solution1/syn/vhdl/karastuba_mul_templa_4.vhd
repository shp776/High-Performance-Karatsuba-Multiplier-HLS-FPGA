-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity karastuba_mul_templa_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    lhs_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
    lhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lhs_digits_data_V_ce0 : OUT STD_LOGIC;
    lhs_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    lhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    lhs_digits_data_V_we0 : OUT STD_LOGIC;
    lhs_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lhs_digits_data_V_ce1 : OUT STD_LOGIC;
    lhs_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    lhs_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    lhs_digits_data_V_we1 : OUT STD_LOGIC;
    rhs_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
    rhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rhs_digits_data_V_ce0 : OUT STD_LOGIC;
    rhs_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    rhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    rhs_digits_data_V_we0 : OUT STD_LOGIC;
    rhs_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rhs_digits_data_V_ce1 : OUT STD_LOGIC;
    rhs_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    rhs_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    rhs_digits_data_V_we1 : OUT STD_LOGIC;
    res_tmp_bits : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_digits_data_V_ce0 : OUT STD_LOGIC;
    res_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    res_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    res_digits_data_V_we0 : OUT STD_LOGIC;
    res_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_digits_data_V_ce1 : OUT STD_LOGIC;
    res_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    res_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    res_digits_data_V_we1 : OUT STD_LOGIC;
    lhs_tmp_bits_read_ap_vld : IN STD_LOGIC;
    rhs_tmp_bits_read_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    res_tmp_bits_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of karastuba_mul_templa_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal z0_digits_data_V_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal z0_digits_data_V_t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal z2_digits_data_V_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal z2_digits_data_V_t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal cross_mul_digits_dat_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal cross_mul_digits_dat_t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal inter_lhs_digits_dat_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal inter_lhs_digits_dat_t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal inter_rhs_digits_dat_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal inter_rhs_digits_dat_t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_MUL_st_1_U0_ap_start : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_ap_done : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_ap_continue : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_ap_idle : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_ap_ready : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_lhs_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_MUL_st_1_U0_lhs_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_rhs_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_MUL_st_1_U0_rhs_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_z0_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_MUL_st_1_U0_z0_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_z0_digits_data_V_we0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_z0_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_MUL_st_1_U0_z2_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_MUL_st_1_U0_z2_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_z2_digits_data_V_we0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_z2_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_ce0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_we0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_ce0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_we0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_ce0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_we0 : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal karastuba_mul_MUL_st_1_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal karastuba_mul_MUL_st_1_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal karastuba_mul_MUL_st_1_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal karastuba_mul_MUL_st_1_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal karastuba_mul_MUL_st_1_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_inter_rhs_tmp_bits : STD_LOGIC;
    signal inter_rhs_tmp_bits_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_inter_rhs_tmp_bits : STD_LOGIC := '0';
    signal ap_sync_channel_write_inter_rhs_tmp_bits : STD_LOGIC;
    signal ap_channel_done_inter_lhs_tmp_bits : STD_LOGIC;
    signal inter_lhs_tmp_bits_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_inter_lhs_tmp_bits : STD_LOGIC := '0';
    signal ap_sync_channel_write_inter_lhs_tmp_bits : STD_LOGIC;
    signal ap_channel_done_cross_mul_tmp_bits : STD_LOGIC;
    signal cross_mul_tmp_bits_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_cross_mul_tmp_bits : STD_LOGIC := '0';
    signal ap_sync_channel_write_cross_mul_tmp_bits : STD_LOGIC;
    signal ap_channel_done_z2_tmp_bits : STD_LOGIC;
    signal z2_tmp_bits_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_z2_tmp_bits : STD_LOGIC := '0';
    signal ap_sync_channel_write_z2_tmp_bits : STD_LOGIC;
    signal ap_channel_done_z0_tmp_bits : STD_LOGIC;
    signal z0_tmp_bits_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_z0_tmp_bits : STD_LOGIC := '0';
    signal ap_sync_channel_write_z0_tmp_bits : STD_LOGIC;
    signal ap_channel_done_inter_rhs_digits_dat : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_inter_rhs_digits_dat : STD_LOGIC := '0';
    signal ap_sync_channel_write_inter_rhs_digits_dat : STD_LOGIC;
    signal ap_channel_done_inter_lhs_digits_dat : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_inter_lhs_digits_dat : STD_LOGIC := '0';
    signal ap_sync_channel_write_inter_lhs_digits_dat : STD_LOGIC;
    signal ap_channel_done_cross_mul_digits_dat : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_cross_mul_digits_dat : STD_LOGIC := '0';
    signal ap_sync_channel_write_cross_mul_digits_dat : STD_LOGIC;
    signal ap_channel_done_z2_digits_data_V : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_z2_digits_data_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_z2_digits_data_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_z2_digits_data_V : STD_LOGIC;
    signal ap_channel_done_z0_digits_data_V : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_z0_digits_data_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_z0_digits_data_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_z0_digits_data_V : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_ap_start : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_ap_done : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_ap_continue : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_ap_idle : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_ap_ready : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_z0_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_ADD_SU_1_U0_z0_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_z2_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_ADD_SU_1_U0_z2_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_cross_mul_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_ADD_SU_1_U0_cross_mul_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_lhs_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_ADD_SU_1_U0_lhs_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_rhs_digits_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal karastuba_mul_ADD_SU_1_U0_rhs_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_res_tmp_bits : STD_LOGIC_VECTOR (31 downto 0);
    signal karastuba_mul_ADD_SU_1_U0_res_tmp_bits_ap_vld : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_res_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal karastuba_mul_ADD_SU_1_U0_res_digits_data_V_ce0 : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_res_digits_data_V_we0 : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_res_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal z0_digits_data_V_i_full_n : STD_LOGIC;
    signal z0_digits_data_V_t_empty_n : STD_LOGIC;
    signal z2_digits_data_V_i_full_n : STD_LOGIC;
    signal z2_digits_data_V_t_empty_n : STD_LOGIC;
    signal cross_mul_digits_dat_i_full_n : STD_LOGIC;
    signal cross_mul_digits_dat_t_empty_n : STD_LOGIC;
    signal inter_lhs_digits_dat_i_full_n : STD_LOGIC;
    signal inter_lhs_digits_dat_t_empty_n : STD_LOGIC;
    signal inter_rhs_digits_dat_i_full_n : STD_LOGIC;
    signal inter_rhs_digits_dat_t_empty_n : STD_LOGIC;
    signal z0_tmp_bits_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z0_tmp_bits_empty_n : STD_LOGIC;
    signal z2_tmp_bits_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z2_tmp_bits_empty_n : STD_LOGIC;
    signal cross_mul_tmp_bits_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cross_mul_tmp_bits_empty_n : STD_LOGIC;
    signal inter_lhs_tmp_bits_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_lhs_tmp_bits_empty_n : STD_LOGIC;
    signal inter_rhs_tmp_bits_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_rhs_tmp_bits_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_start_full_n : STD_LOGIC;
    signal karastuba_mul_MUL_st_1_U0_start_write : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_start_full_n : STD_LOGIC;
    signal karastuba_mul_ADD_SU_1_U0_start_write : STD_LOGIC;

    component karastuba_mul_MUL_st_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lhs_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
        lhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lhs_digits_data_V_ce0 : OUT STD_LOGIC;
        lhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
        rhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        rhs_digits_data_V_ce0 : OUT STD_LOGIC;
        rhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        z0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        z0_digits_data_V_ce0 : OUT STD_LOGIC;
        z0_digits_data_V_we0 : OUT STD_LOGIC;
        z0_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        z2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        z2_digits_data_V_ce0 : OUT STD_LOGIC;
        z2_digits_data_V_we0 : OUT STD_LOGIC;
        z2_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        cross_mul_digits_dat_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cross_mul_digits_dat_ce0 : OUT STD_LOGIC;
        cross_mul_digits_dat_we0 : OUT STD_LOGIC;
        cross_mul_digits_dat_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        inter_lhs_digits_dat_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        inter_lhs_digits_dat_ce0 : OUT STD_LOGIC;
        inter_lhs_digits_dat_we0 : OUT STD_LOGIC;
        inter_lhs_digits_dat_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        inter_rhs_digits_dat_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        inter_rhs_digits_dat_ce0 : OUT STD_LOGIC;
        inter_rhs_digits_dat_we0 : OUT STD_LOGIC;
        inter_rhs_digits_dat_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component karastuba_mul_ADD_SU_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z0_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        z0_digits_data_V_ce0 : OUT STD_LOGIC;
        z0_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        z2_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        z2_digits_data_V_ce0 : OUT STD_LOGIC;
        z2_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        cross_mul_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
        cross_mul_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cross_mul_digits_data_V_ce0 : OUT STD_LOGIC;
        cross_mul_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        lhs_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
        lhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lhs_digits_data_V_ce0 : OUT STD_LOGIC;
        lhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
        rhs_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        rhs_digits_data_V_ce0 : OUT STD_LOGIC;
        rhs_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        res_tmp_bits : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_tmp_bits_ap_vld : OUT STD_LOGIC;
        res_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_digits_data_V_ce0 : OUT STD_LOGIC;
        res_digits_data_V_we0 : OUT STD_LOGIC;
        res_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component karastuba_mul_temOgC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    z0_digits_data_V_U : component karastuba_mul_temOgC
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => karastuba_mul_MUL_st_1_U0_z0_digits_data_V_address0,
        i_ce0 => karastuba_mul_MUL_st_1_U0_z0_digits_data_V_ce0,
        i_we0 => karastuba_mul_MUL_st_1_U0_z0_digits_data_V_we0,
        i_d0 => karastuba_mul_MUL_st_1_U0_z0_digits_data_V_d0,
        i_q0 => z0_digits_data_V_i_q0,
        t_address0 => karastuba_mul_ADD_SU_1_U0_z0_digits_data_V_address0,
        t_ce0 => karastuba_mul_ADD_SU_1_U0_z0_digits_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv64_0,
        t_q0 => z0_digits_data_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => z0_digits_data_V_i_full_n,
        i_write => ap_channel_done_z0_digits_data_V,
        t_empty_n => z0_digits_data_V_t_empty_n,
        t_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    z2_digits_data_V_U : component karastuba_mul_temOgC
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => karastuba_mul_MUL_st_1_U0_z2_digits_data_V_address0,
        i_ce0 => karastuba_mul_MUL_st_1_U0_z2_digits_data_V_ce0,
        i_we0 => karastuba_mul_MUL_st_1_U0_z2_digits_data_V_we0,
        i_d0 => karastuba_mul_MUL_st_1_U0_z2_digits_data_V_d0,
        i_q0 => z2_digits_data_V_i_q0,
        t_address0 => karastuba_mul_ADD_SU_1_U0_z2_digits_data_V_address0,
        t_ce0 => karastuba_mul_ADD_SU_1_U0_z2_digits_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv64_0,
        t_q0 => z2_digits_data_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => z2_digits_data_V_i_full_n,
        i_write => ap_channel_done_z2_digits_data_V,
        t_empty_n => z2_digits_data_V_t_empty_n,
        t_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    cross_mul_digits_dat_U : component karastuba_mul_temOgC
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_address0,
        i_ce0 => karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_ce0,
        i_we0 => karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_we0,
        i_d0 => karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_d0,
        i_q0 => cross_mul_digits_dat_i_q0,
        t_address0 => karastuba_mul_ADD_SU_1_U0_cross_mul_digits_data_V_address0,
        t_ce0 => karastuba_mul_ADD_SU_1_U0_cross_mul_digits_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv64_0,
        t_q0 => cross_mul_digits_dat_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => cross_mul_digits_dat_i_full_n,
        i_write => ap_channel_done_cross_mul_digits_dat,
        t_empty_n => cross_mul_digits_dat_t_empty_n,
        t_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    inter_lhs_digits_dat_U : component karastuba_mul_temOgC
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_address0,
        i_ce0 => karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_ce0,
        i_we0 => karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_we0,
        i_d0 => karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_d0,
        i_q0 => inter_lhs_digits_dat_i_q0,
        t_address0 => karastuba_mul_ADD_SU_1_U0_lhs_digits_data_V_address0,
        t_ce0 => karastuba_mul_ADD_SU_1_U0_lhs_digits_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv64_0,
        t_q0 => inter_lhs_digits_dat_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => inter_lhs_digits_dat_i_full_n,
        i_write => ap_channel_done_inter_lhs_digits_dat,
        t_empty_n => inter_lhs_digits_dat_t_empty_n,
        t_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    inter_rhs_digits_dat_U : component karastuba_mul_temOgC
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_address0,
        i_ce0 => karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_ce0,
        i_we0 => karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_we0,
        i_d0 => karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_d0,
        i_q0 => inter_rhs_digits_dat_i_q0,
        t_address0 => karastuba_mul_ADD_SU_1_U0_rhs_digits_data_V_address0,
        t_ce0 => karastuba_mul_ADD_SU_1_U0_rhs_digits_data_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv64_0,
        t_q0 => inter_rhs_digits_dat_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => inter_rhs_digits_dat_i_full_n,
        i_write => ap_channel_done_inter_rhs_digits_dat,
        t_empty_n => inter_rhs_digits_dat_t_empty_n,
        t_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    karastuba_mul_MUL_st_1_U0 : component karastuba_mul_MUL_st_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => karastuba_mul_MUL_st_1_U0_ap_start,
        ap_done => karastuba_mul_MUL_st_1_U0_ap_done,
        ap_continue => karastuba_mul_MUL_st_1_U0_ap_continue,
        ap_idle => karastuba_mul_MUL_st_1_U0_ap_idle,
        ap_ready => karastuba_mul_MUL_st_1_U0_ap_ready,
        lhs_tmp_bits_read => lhs_tmp_bits_read,
        lhs_digits_data_V_address0 => karastuba_mul_MUL_st_1_U0_lhs_digits_data_V_address0,
        lhs_digits_data_V_ce0 => karastuba_mul_MUL_st_1_U0_lhs_digits_data_V_ce0,
        lhs_digits_data_V_q0 => lhs_digits_data_V_q0,
        rhs_tmp_bits_read => rhs_tmp_bits_read,
        rhs_digits_data_V_address0 => karastuba_mul_MUL_st_1_U0_rhs_digits_data_V_address0,
        rhs_digits_data_V_ce0 => karastuba_mul_MUL_st_1_U0_rhs_digits_data_V_ce0,
        rhs_digits_data_V_q0 => rhs_digits_data_V_q0,
        z0_digits_data_V_address0 => karastuba_mul_MUL_st_1_U0_z0_digits_data_V_address0,
        z0_digits_data_V_ce0 => karastuba_mul_MUL_st_1_U0_z0_digits_data_V_ce0,
        z0_digits_data_V_we0 => karastuba_mul_MUL_st_1_U0_z0_digits_data_V_we0,
        z0_digits_data_V_d0 => karastuba_mul_MUL_st_1_U0_z0_digits_data_V_d0,
        z2_digits_data_V_address0 => karastuba_mul_MUL_st_1_U0_z2_digits_data_V_address0,
        z2_digits_data_V_ce0 => karastuba_mul_MUL_st_1_U0_z2_digits_data_V_ce0,
        z2_digits_data_V_we0 => karastuba_mul_MUL_st_1_U0_z2_digits_data_V_we0,
        z2_digits_data_V_d0 => karastuba_mul_MUL_st_1_U0_z2_digits_data_V_d0,
        cross_mul_digits_dat_address0 => karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_address0,
        cross_mul_digits_dat_ce0 => karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_ce0,
        cross_mul_digits_dat_we0 => karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_we0,
        cross_mul_digits_dat_d0 => karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_d0,
        inter_lhs_digits_dat_address0 => karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_address0,
        inter_lhs_digits_dat_ce0 => karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_ce0,
        inter_lhs_digits_dat_we0 => karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_we0,
        inter_lhs_digits_dat_d0 => karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_d0,
        inter_rhs_digits_dat_address0 => karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_address0,
        inter_rhs_digits_dat_ce0 => karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_ce0,
        inter_rhs_digits_dat_we0 => karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_we0,
        inter_rhs_digits_dat_d0 => karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_d0,
        ap_return_0 => karastuba_mul_MUL_st_1_U0_ap_return_0,
        ap_return_1 => karastuba_mul_MUL_st_1_U0_ap_return_1,
        ap_return_2 => karastuba_mul_MUL_st_1_U0_ap_return_2,
        ap_return_3 => karastuba_mul_MUL_st_1_U0_ap_return_3,
        ap_return_4 => karastuba_mul_MUL_st_1_U0_ap_return_4);

    karastuba_mul_ADD_SU_1_U0 : component karastuba_mul_ADD_SU_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => karastuba_mul_ADD_SU_1_U0_ap_start,
        ap_done => karastuba_mul_ADD_SU_1_U0_ap_done,
        ap_continue => karastuba_mul_ADD_SU_1_U0_ap_continue,
        ap_idle => karastuba_mul_ADD_SU_1_U0_ap_idle,
        ap_ready => karastuba_mul_ADD_SU_1_U0_ap_ready,
        z0_tmp_bits_read => z0_tmp_bits_dout,
        z0_digits_data_V_address0 => karastuba_mul_ADD_SU_1_U0_z0_digits_data_V_address0,
        z0_digits_data_V_ce0 => karastuba_mul_ADD_SU_1_U0_z0_digits_data_V_ce0,
        z0_digits_data_V_q0 => z0_digits_data_V_t_q0,
        z2_tmp_bits_read => z2_tmp_bits_dout,
        z2_digits_data_V_address0 => karastuba_mul_ADD_SU_1_U0_z2_digits_data_V_address0,
        z2_digits_data_V_ce0 => karastuba_mul_ADD_SU_1_U0_z2_digits_data_V_ce0,
        z2_digits_data_V_q0 => z2_digits_data_V_t_q0,
        cross_mul_tmp_bits_read => cross_mul_tmp_bits_dout,
        cross_mul_digits_data_V_address0 => karastuba_mul_ADD_SU_1_U0_cross_mul_digits_data_V_address0,
        cross_mul_digits_data_V_ce0 => karastuba_mul_ADD_SU_1_U0_cross_mul_digits_data_V_ce0,
        cross_mul_digits_data_V_q0 => cross_mul_digits_dat_t_q0,
        lhs_tmp_bits_read => inter_lhs_tmp_bits_dout,
        lhs_digits_data_V_address0 => karastuba_mul_ADD_SU_1_U0_lhs_digits_data_V_address0,
        lhs_digits_data_V_ce0 => karastuba_mul_ADD_SU_1_U0_lhs_digits_data_V_ce0,
        lhs_digits_data_V_q0 => inter_lhs_digits_dat_t_q0,
        rhs_tmp_bits_read => inter_rhs_tmp_bits_dout,
        rhs_digits_data_V_address0 => karastuba_mul_ADD_SU_1_U0_rhs_digits_data_V_address0,
        rhs_digits_data_V_ce0 => karastuba_mul_ADD_SU_1_U0_rhs_digits_data_V_ce0,
        rhs_digits_data_V_q0 => inter_rhs_digits_dat_t_q0,
        res_tmp_bits => karastuba_mul_ADD_SU_1_U0_res_tmp_bits,
        res_tmp_bits_ap_vld => karastuba_mul_ADD_SU_1_U0_res_tmp_bits_ap_vld,
        res_digits_data_V_address0 => karastuba_mul_ADD_SU_1_U0_res_digits_data_V_address0,
        res_digits_data_V_ce0 => karastuba_mul_ADD_SU_1_U0_res_digits_data_V_ce0,
        res_digits_data_V_we0 => karastuba_mul_ADD_SU_1_U0_res_digits_data_V_we0,
        res_digits_data_V_d0 => karastuba_mul_ADD_SU_1_U0_res_digits_data_V_d0);

    z0_tmp_bits_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => karastuba_mul_MUL_st_1_U0_ap_return_0,
        if_full_n => z0_tmp_bits_full_n,
        if_write => ap_channel_done_z0_tmp_bits,
        if_dout => z0_tmp_bits_dout,
        if_empty_n => z0_tmp_bits_empty_n,
        if_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    z2_tmp_bits_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => karastuba_mul_MUL_st_1_U0_ap_return_1,
        if_full_n => z2_tmp_bits_full_n,
        if_write => ap_channel_done_z2_tmp_bits,
        if_dout => z2_tmp_bits_dout,
        if_empty_n => z2_tmp_bits_empty_n,
        if_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    cross_mul_tmp_bits_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => karastuba_mul_MUL_st_1_U0_ap_return_2,
        if_full_n => cross_mul_tmp_bits_full_n,
        if_write => ap_channel_done_cross_mul_tmp_bits,
        if_dout => cross_mul_tmp_bits_dout,
        if_empty_n => cross_mul_tmp_bits_empty_n,
        if_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    inter_lhs_tmp_bits_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => karastuba_mul_MUL_st_1_U0_ap_return_3,
        if_full_n => inter_lhs_tmp_bits_full_n,
        if_write => ap_channel_done_inter_lhs_tmp_bits,
        if_dout => inter_lhs_tmp_bits_dout,
        if_empty_n => inter_lhs_tmp_bits_empty_n,
        if_read => karastuba_mul_ADD_SU_1_U0_ap_ready);

    inter_rhs_tmp_bits_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => karastuba_mul_MUL_st_1_U0_ap_return_4,
        if_full_n => inter_rhs_tmp_bits_full_n,
        if_write => ap_channel_done_inter_rhs_tmp_bits,
        if_dout => inter_rhs_tmp_bits_dout,
        if_empty_n => inter_rhs_tmp_bits_empty_n,
        if_read => karastuba_mul_ADD_SU_1_U0_ap_ready);





    ap_sync_reg_channel_write_cross_mul_digits_dat_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_cross_mul_digits_dat <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_cross_mul_digits_dat <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_cross_mul_digits_dat <= ap_sync_channel_write_cross_mul_digits_dat;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_cross_mul_tmp_bits_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_cross_mul_tmp_bits <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_cross_mul_tmp_bits <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_cross_mul_tmp_bits <= ap_sync_channel_write_cross_mul_tmp_bits;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_inter_lhs_digits_dat_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_inter_lhs_digits_dat <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_inter_lhs_digits_dat <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_inter_lhs_digits_dat <= ap_sync_channel_write_inter_lhs_digits_dat;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_inter_lhs_tmp_bits_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_inter_lhs_tmp_bits <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_inter_lhs_tmp_bits <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_inter_lhs_tmp_bits <= ap_sync_channel_write_inter_lhs_tmp_bits;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_inter_rhs_digits_dat_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_inter_rhs_digits_dat <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_inter_rhs_digits_dat <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_inter_rhs_digits_dat <= ap_sync_channel_write_inter_rhs_digits_dat;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_inter_rhs_tmp_bits_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_inter_rhs_tmp_bits <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_inter_rhs_tmp_bits <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_inter_rhs_tmp_bits <= ap_sync_channel_write_inter_rhs_tmp_bits;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_z0_digits_data_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_z0_digits_data_V <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_z0_digits_data_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_z0_digits_data_V <= ap_sync_channel_write_z0_digits_data_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_z0_tmp_bits_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_z0_tmp_bits <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_z0_tmp_bits <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_z0_tmp_bits <= ap_sync_channel_write_z0_tmp_bits;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_z2_digits_data_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_z2_digits_data_V <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_z2_digits_data_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_z2_digits_data_V <= ap_sync_channel_write_z2_digits_data_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_z2_tmp_bits_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_z2_tmp_bits <= ap_const_logic_0;
            else
                if (((karastuba_mul_MUL_st_1_U0_ap_done and karastuba_mul_MUL_st_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_z2_tmp_bits <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_z2_tmp_bits <= ap_sync_channel_write_z2_tmp_bits;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_cross_mul_digits_dat <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_cross_mul_digits_dat xor ap_const_logic_1));
    ap_channel_done_cross_mul_tmp_bits <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_cross_mul_tmp_bits xor ap_const_logic_1));
    ap_channel_done_inter_lhs_digits_dat <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_inter_lhs_digits_dat xor ap_const_logic_1));
    ap_channel_done_inter_lhs_tmp_bits <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_inter_lhs_tmp_bits xor ap_const_logic_1));
    ap_channel_done_inter_rhs_digits_dat <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_inter_rhs_digits_dat xor ap_const_logic_1));
    ap_channel_done_inter_rhs_tmp_bits <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_inter_rhs_tmp_bits xor ap_const_logic_1));
    ap_channel_done_z0_digits_data_V <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_z0_digits_data_V xor ap_const_logic_1));
    ap_channel_done_z0_tmp_bits <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_z0_tmp_bits xor ap_const_logic_1));
    ap_channel_done_z2_digits_data_V <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_z2_digits_data_V xor ap_const_logic_1));
    ap_channel_done_z2_tmp_bits <= (karastuba_mul_MUL_st_1_U0_ap_done and (ap_sync_reg_channel_write_z2_tmp_bits xor ap_const_logic_1));
    ap_done <= karastuba_mul_ADD_SU_1_U0_ap_done;
    ap_idle <= (karastuba_mul_MUL_st_1_U0_ap_idle and karastuba_mul_ADD_SU_1_U0_ap_idle and (inter_rhs_tmp_bits_empty_n xor ap_const_logic_1) and (inter_lhs_tmp_bits_empty_n xor ap_const_logic_1) and (cross_mul_tmp_bits_empty_n xor ap_const_logic_1) and (z2_tmp_bits_empty_n xor ap_const_logic_1) and (z0_tmp_bits_empty_n xor ap_const_logic_1) and (inter_rhs_digits_dat_t_empty_n xor ap_const_logic_1) and (inter_lhs_digits_dat_t_empty_n xor ap_const_logic_1) and (cross_mul_digits_dat_t_empty_n xor ap_const_logic_1) and (z2_digits_data_V_t_empty_n xor ap_const_logic_1) and (z0_digits_data_V_t_empty_n xor ap_const_logic_1));
    ap_ready <= karastuba_mul_MUL_st_1_U0_ap_ready;
    ap_sync_channel_write_cross_mul_digits_dat <= ((karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_full_n and ap_channel_done_cross_mul_digits_dat) or ap_sync_reg_channel_write_cross_mul_digits_dat);
    ap_sync_channel_write_cross_mul_tmp_bits <= ((cross_mul_tmp_bits_full_n and ap_channel_done_cross_mul_tmp_bits) or ap_sync_reg_channel_write_cross_mul_tmp_bits);
    ap_sync_channel_write_inter_lhs_digits_dat <= ((karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_full_n and ap_channel_done_inter_lhs_digits_dat) or ap_sync_reg_channel_write_inter_lhs_digits_dat);
    ap_sync_channel_write_inter_lhs_tmp_bits <= ((inter_lhs_tmp_bits_full_n and ap_channel_done_inter_lhs_tmp_bits) or ap_sync_reg_channel_write_inter_lhs_tmp_bits);
    ap_sync_channel_write_inter_rhs_digits_dat <= ((karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_full_n and ap_channel_done_inter_rhs_digits_dat) or ap_sync_reg_channel_write_inter_rhs_digits_dat);
    ap_sync_channel_write_inter_rhs_tmp_bits <= ((inter_rhs_tmp_bits_full_n and ap_channel_done_inter_rhs_tmp_bits) or ap_sync_reg_channel_write_inter_rhs_tmp_bits);
    ap_sync_channel_write_z0_digits_data_V <= ((karastuba_mul_MUL_st_1_U0_z0_digits_data_V_full_n and ap_channel_done_z0_digits_data_V) or ap_sync_reg_channel_write_z0_digits_data_V);
    ap_sync_channel_write_z0_tmp_bits <= ((z0_tmp_bits_full_n and ap_channel_done_z0_tmp_bits) or ap_sync_reg_channel_write_z0_tmp_bits);
    ap_sync_channel_write_z2_digits_data_V <= ((karastuba_mul_MUL_st_1_U0_z2_digits_data_V_full_n and ap_channel_done_z2_digits_data_V) or ap_sync_reg_channel_write_z2_digits_data_V);
    ap_sync_channel_write_z2_tmp_bits <= ((z2_tmp_bits_full_n and ap_channel_done_z2_tmp_bits) or ap_sync_reg_channel_write_z2_tmp_bits);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= karastuba_mul_ADD_SU_1_U0_ap_done;
    ap_sync_ready <= karastuba_mul_MUL_st_1_U0_ap_ready;
    karastuba_mul_ADD_SU_1_U0_ap_continue <= ap_continue;
    karastuba_mul_ADD_SU_1_U0_ap_start <= (z2_tmp_bits_empty_n and z2_digits_data_V_t_empty_n and z0_tmp_bits_empty_n and z0_digits_data_V_t_empty_n and inter_rhs_tmp_bits_empty_n and inter_rhs_digits_dat_t_empty_n and inter_lhs_tmp_bits_empty_n and inter_lhs_digits_dat_t_empty_n and cross_mul_tmp_bits_empty_n and cross_mul_digits_dat_t_empty_n);
    karastuba_mul_ADD_SU_1_U0_start_full_n <= ap_const_logic_1;
    karastuba_mul_ADD_SU_1_U0_start_write <= ap_const_logic_0;
    karastuba_mul_MUL_st_1_U0_ap_continue <= (ap_sync_channel_write_z2_tmp_bits and ap_sync_channel_write_z2_digits_data_V and ap_sync_channel_write_z0_tmp_bits and ap_sync_channel_write_z0_digits_data_V and ap_sync_channel_write_inter_rhs_tmp_bits and ap_sync_channel_write_inter_rhs_digits_dat and ap_sync_channel_write_inter_lhs_tmp_bits and ap_sync_channel_write_inter_lhs_digits_dat and ap_sync_channel_write_cross_mul_tmp_bits and ap_sync_channel_write_cross_mul_digits_dat);
    karastuba_mul_MUL_st_1_U0_ap_start <= ap_start;
    karastuba_mul_MUL_st_1_U0_cross_mul_digits_dat_full_n <= cross_mul_digits_dat_i_full_n;
    karastuba_mul_MUL_st_1_U0_inter_lhs_digits_dat_full_n <= inter_lhs_digits_dat_i_full_n;
    karastuba_mul_MUL_st_1_U0_inter_rhs_digits_dat_full_n <= inter_rhs_digits_dat_i_full_n;
    karastuba_mul_MUL_st_1_U0_start_full_n <= ap_const_logic_1;
    karastuba_mul_MUL_st_1_U0_start_write <= ap_const_logic_0;
    karastuba_mul_MUL_st_1_U0_z0_digits_data_V_full_n <= z0_digits_data_V_i_full_n;
    karastuba_mul_MUL_st_1_U0_z2_digits_data_V_full_n <= z2_digits_data_V_i_full_n;
    lhs_digits_data_V_address0 <= karastuba_mul_MUL_st_1_U0_lhs_digits_data_V_address0;
    lhs_digits_data_V_address1 <= ap_const_lv5_0;
    lhs_digits_data_V_ce0 <= karastuba_mul_MUL_st_1_U0_lhs_digits_data_V_ce0;
    lhs_digits_data_V_ce1 <= ap_const_logic_0;
    lhs_digits_data_V_d0 <= ap_const_lv64_0;
    lhs_digits_data_V_d1 <= ap_const_lv64_0;
    lhs_digits_data_V_we0 <= ap_const_logic_0;
    lhs_digits_data_V_we1 <= ap_const_logic_0;
    res_digits_data_V_address0 <= karastuba_mul_ADD_SU_1_U0_res_digits_data_V_address0;
    res_digits_data_V_address1 <= ap_const_lv6_0;
    res_digits_data_V_ce0 <= karastuba_mul_ADD_SU_1_U0_res_digits_data_V_ce0;
    res_digits_data_V_ce1 <= ap_const_logic_0;
    res_digits_data_V_d0 <= karastuba_mul_ADD_SU_1_U0_res_digits_data_V_d0;
    res_digits_data_V_d1 <= ap_const_lv64_0;
    res_digits_data_V_we0 <= karastuba_mul_ADD_SU_1_U0_res_digits_data_V_we0;
    res_digits_data_V_we1 <= ap_const_logic_0;
    res_tmp_bits <= karastuba_mul_ADD_SU_1_U0_res_tmp_bits;
    res_tmp_bits_ap_vld <= karastuba_mul_ADD_SU_1_U0_res_tmp_bits_ap_vld;
    rhs_digits_data_V_address0 <= karastuba_mul_MUL_st_1_U0_rhs_digits_data_V_address0;
    rhs_digits_data_V_address1 <= ap_const_lv5_0;
    rhs_digits_data_V_ce0 <= karastuba_mul_MUL_st_1_U0_rhs_digits_data_V_ce0;
    rhs_digits_data_V_ce1 <= ap_const_logic_0;
    rhs_digits_data_V_d0 <= ap_const_lv64_0;
    rhs_digits_data_V_d1 <= ap_const_lv64_0;
    rhs_digits_data_V_we0 <= ap_const_logic_0;
    rhs_digits_data_V_we1 <= ap_const_logic_0;
end behav;
