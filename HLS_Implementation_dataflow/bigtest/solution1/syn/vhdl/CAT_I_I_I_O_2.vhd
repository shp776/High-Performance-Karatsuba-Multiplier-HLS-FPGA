-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CAT_I_I_I_O_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x0_digits_data_V_ce0 : OUT STD_LOGIC;
    x0_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x1_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    x1_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x1_digits_data_V_ce0 : OUT STD_LOGIC;
    x1_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x2_digits_data_V_ce0 : OUT STD_LOGIC;
    x2_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_V_ce0 : OUT STD_LOGIC;
    w_digits_data_V_we0 : OUT STD_LOGIC;
    w_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of CAT_I_I_I_O_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0136_0_reg_174 : STD_LOGIC_VECTOR (1 downto 0);
    signal j1_0_reg_186 : STD_LOGIC_VECTOR (4 downto 0);
    signal i2_0_reg_198 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0136_2_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal j1_1_reg_221 : STD_LOGIC_VECTOR (5 downto 0);
    signal i3_0_reg_233 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_244 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln175_reg_499 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state15_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln191_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_259_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln168_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_271_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_479 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln170_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_reg_484 : STD_LOGIC_VECTOR (63 downto 0);
    signal x0_digits_data_V_loa_reg_494 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln175_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln175_reg_499_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_33_fu_288_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_33_reg_503 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_7_reg_513 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_7_reg_513_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal x1_digits_data_V_loa_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_6_fu_304_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_6_reg_524 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_30_fu_321_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_30_reg_529 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_11_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_11_reg_534 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal w_digits_data_V_addr_6_reg_544 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln209_fu_368_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln209_reg_549 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln209_3_fu_377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_3_reg_554 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln191_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state14_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln191_reg_559_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_34_fu_389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_34_reg_563 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_8_reg_573 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_digits_data_V_addr_8_reg_573_pp1_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal x2_digits_data_V_loa_reg_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_7_fu_405_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_7_reg_584 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_V_31_fu_422_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_31_reg_589 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_12_fu_434_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_12_reg_594 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state14 : STD_LOGIC;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal j_0_reg_152 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_163 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_j1_0_phi_fu_190_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i2_0_phi_fu_202_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_j1_1_phi_fu_225_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i3_0_phi_fu_237_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln168_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln197_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln700_fu_314_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln175_fu_310_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_37_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_17_fu_327_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_38_fu_342_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_36_fu_338_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_fu_345_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln209_fu_365_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1468_fu_361_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln209_2_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_39_fu_415_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln191_fu_411_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_41_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_18_fu_428_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_42_fu_443_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_40_fu_439_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_29_fu_446_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_265_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_265_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_265_p2 = ap_const_lv1_1))) then 
                i2_0_reg_198 <= ap_const_lv5_0;
            elsif (((icmp_ln175_reg_499 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i2_0_reg_198 <= i_33_reg_503;
            end if; 
        end if;
    end process;

    i3_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln191_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i3_0_reg_233 <= i_34_reg_563;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i3_0_reg_233 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln168_fu_248_p2 = ap_const_lv1_1))) then 
                i_0_reg_163 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_163 <= i_reg_479;
            end if; 
        end if;
    end process;

    j1_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_265_p2 = ap_const_lv1_1))) then 
                j1_0_reg_186 <= ap_const_lv5_8;
            elsif (((icmp_ln175_reg_499 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j1_0_reg_186 <= j_6_reg_524;
            end if; 
        end if;
    end process;

    j1_1_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln191_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j1_1_reg_221 <= j_7_reg_584;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j1_1_reg_221 <= ap_const_lv6_10;
            end if; 
        end if;
    end process;

    j_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_152 <= j_fu_259_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_152 <= ap_const_lv6_10;
            end if; 
        end if;
    end process;

    p_0136_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_265_p2 = ap_const_lv1_1))) then 
                p_0136_0_reg_174 <= ap_const_lv2_0;
            elsif (((icmp_ln175_reg_499_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_0136_0_reg_174 <= tmp_V_fu_345_p2(65 downto 64);
            end if; 
        end if;
    end process;

    p_0136_2_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln191_reg_559_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                p_0136_2_reg_209 <= tmp_V_29_fu_446_p2(65 downto 64);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_0136_2_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln175_reg_499 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln209_11_reg_534 <= add_ln209_11_fu_333_p2;
                tmp_V_30_reg_529 <= tmp_V_30_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln191_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln209_12_reg_594 <= add_ln209_12_fu_434_p2;
                tmp_V_31_reg_589 <= tmp_V_31_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln209_3_reg_554 <= add_ln209_3_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln209_reg_549 <= add_ln209_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_33_reg_503 <= i_33_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                i_34_reg_563 <= i_34_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_479 <= i_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln175_reg_499 <= icmp_ln175_fu_282_p2;
                icmp_ln175_reg_499_pp0_iter1_reg <= icmp_ln175_reg_499;
                w_digits_data_V_addr_7_reg_513_pp0_iter1_reg <= w_digits_data_V_addr_7_reg_513;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln191_reg_559 <= icmp_ln191_fu_383_p2;
                icmp_ln191_reg_559_pp1_iter1_reg <= icmp_ln191_reg_559;
                w_digits_data_V_addr_8_reg_573_pp1_iter1_reg <= w_digits_data_V_addr_8_reg_573;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln175_reg_499 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                j_6_reg_524 <= j_6_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln191_reg_559 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                j_7_reg_584 <= j_7_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln175_reg_499 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln191_reg_559 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then
                reg_244 <= w_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln175_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                w_digits_data_V_addr_7_reg_513 <= zext_ln181_fu_299_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln191_fu_383_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                w_digits_data_V_addr_8_reg_573 <= zext_ln197_fu_400_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x0_digits_data_V_loa_reg_494 <= x0_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln175_reg_499 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                x1_digits_data_V_loa_reg_518 <= x1_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln191_reg_559 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                x2_digits_data_V_loa_reg_578 <= x2_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln170_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln170_reg_484(4 downto 0) <= zext_ln170_fu_277_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln170_reg_484(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, icmp_ln168_fu_248_p2, icmp_ln170_fu_265_p2, ap_CS_fsm_state3, icmp_ln175_fu_282_p2, ap_enable_reg_pp0_iter1, icmp_ln191_fu_383_p2, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln168_fu_248_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_265_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln175_fu_282_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln175_fu_282_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln191_fu_383_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln191_fu_383_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln209_11_fu_333_p2 <= std_logic_vector(unsigned(add_ln209_17_fu_327_p2) + unsigned(x1_digits_data_V_loa_reg_518));
    add_ln209_12_fu_434_p2 <= std_logic_vector(unsigned(add_ln209_18_fu_428_p2) + unsigned(x2_digits_data_V_loa_reg_578));
    add_ln209_17_fu_327_p2 <= std_logic_vector(unsigned(reg_244) + unsigned(zext_ln700_37_fu_317_p1));
    add_ln209_18_fu_428_p2 <= std_logic_vector(unsigned(reg_244) + unsigned(zext_ln700_41_fu_418_p1));
    add_ln209_3_fu_377_p2 <= std_logic_vector(unsigned(zext_ln209_2_fu_374_p1) + unsigned(reg_244));
    add_ln209_fu_368_p2 <= std_logic_vector(unsigned(zext_ln209_fu_365_p1) + unsigned(zext_ln1468_fu_361_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln175_fu_282_p2)
    begin
        if ((icmp_ln175_fu_282_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state14_assign_proc : process(icmp_ln191_fu_383_p2)
    begin
        if ((icmp_ln191_fu_383_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i2_0_phi_fu_202_p4_assign_proc : process(i2_0_reg_198, icmp_ln175_reg_499, ap_CS_fsm_pp0_stage0, i_33_reg_503, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln175_reg_499 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i2_0_phi_fu_202_p4 <= i_33_reg_503;
        else 
            ap_phi_mux_i2_0_phi_fu_202_p4 <= i2_0_reg_198;
        end if; 
    end process;


    ap_phi_mux_i3_0_phi_fu_237_p4_assign_proc : process(i3_0_reg_233, icmp_ln191_reg_559, ap_CS_fsm_pp1_stage0, i_34_reg_563, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln191_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i3_0_phi_fu_237_p4 <= i_34_reg_563;
        else 
            ap_phi_mux_i3_0_phi_fu_237_p4 <= i3_0_reg_233;
        end if; 
    end process;


    ap_phi_mux_j1_0_phi_fu_190_p4_assign_proc : process(j1_0_reg_186, icmp_ln175_reg_499, ap_CS_fsm_pp0_stage0, j_6_reg_524, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln175_reg_499 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j1_0_phi_fu_190_p4 <= j_6_reg_524;
        else 
            ap_phi_mux_j1_0_phi_fu_190_p4 <= j1_0_reg_186;
        end if; 
    end process;


    ap_phi_mux_j1_1_phi_fu_225_p4_assign_proc : process(j1_1_reg_221, icmp_ln191_reg_559, ap_CS_fsm_pp1_stage0, j_7_reg_584, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln191_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_j1_1_phi_fu_225_p4 <= j_7_reg_584;
        else 
            ap_phi_mux_j1_1_phi_fu_225_p4 <= j1_1_reg_221;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_33_fu_288_p2 <= std_logic_vector(unsigned(ap_phi_mux_i2_0_phi_fu_202_p4) + unsigned(ap_const_lv5_1));
    i_34_fu_389_p2 <= std_logic_vector(unsigned(ap_phi_mux_i3_0_phi_fu_237_p4) + unsigned(ap_const_lv5_1));
    i_fu_271_p2 <= std_logic_vector(unsigned(i_0_reg_163) + unsigned(ap_const_lv5_1));
    icmp_ln168_fu_248_p2 <= "1" when (j_0_reg_152 = ap_const_lv6_20) else "0";
    icmp_ln170_fu_265_p2 <= "1" when (i_0_reg_163 = ap_const_lv5_10) else "0";
    icmp_ln175_fu_282_p2 <= "1" when (ap_phi_mux_i2_0_phi_fu_202_p4 = ap_const_lv5_10) else "0";
    icmp_ln191_fu_383_p2 <= "1" when (ap_phi_mux_i3_0_phi_fu_237_p4 = ap_const_lv5_10) else "0";
    j_6_fu_304_p2 <= std_logic_vector(unsigned(j1_0_reg_186) + unsigned(ap_const_lv5_1));
    j_7_fu_405_p2 <= std_logic_vector(unsigned(j1_1_reg_221) + unsigned(ap_const_lv6_1));
    j_fu_259_p2 <= std_logic_vector(unsigned(j_0_reg_152) + unsigned(ap_const_lv6_1));
    tmp_V_29_fu_446_p2 <= std_logic_vector(unsigned(zext_ln700_42_fu_443_p1) + unsigned(zext_ln700_40_fu_439_p1));
    tmp_V_30_fu_321_p2 <= std_logic_vector(unsigned(zext_ln700_fu_314_p1) + unsigned(zext_ln175_fu_310_p1));
    tmp_V_31_fu_422_p2 <= std_logic_vector(unsigned(zext_ln700_39_fu_415_p1) + unsigned(zext_ln191_fu_411_p1));
    tmp_V_fu_345_p2 <= std_logic_vector(unsigned(zext_ln700_38_fu_342_p1) + unsigned(zext_ln700_36_fu_338_p1));
    w_digits_data_V_addr_6_reg_544 <= ap_const_lv64_18(5 - 1 downto 0);

    w_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, zext_ln170_reg_484, ap_CS_fsm_pp0_stage0, w_digits_data_V_addr_7_reg_513_pp0_iter1_reg, ap_enable_reg_pp0_iter1, w_digits_data_V_addr_6_reg_544, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, w_digits_data_V_addr_8_reg_573_pp1_iter1_reg, ap_enable_reg_pp1_iter1, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln168_fu_254_p1, zext_ln181_fu_299_p1, zext_ln197_fu_400_p1, ap_block_pp0_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            w_digits_data_V_address0 <= w_digits_data_V_addr_8_reg_573_pp1_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            w_digits_data_V_address0 <= zext_ln197_fu_400_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            w_digits_data_V_address0 <= w_digits_data_V_addr_6_reg_544;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            w_digits_data_V_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            w_digits_data_V_address0 <= w_digits_data_V_addr_7_reg_513_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_digits_data_V_address0 <= zext_ln181_fu_299_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_digits_data_V_address0 <= zext_ln170_reg_484(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_V_address0 <= zext_ln168_fu_254_p1(5 - 1 downto 0);
        else 
            w_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    w_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state13, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            w_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            w_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state2, x0_digits_data_V_loa_reg_494, add_ln209_11_reg_534, ap_enable_reg_pp0_iter1, add_ln209_3_reg_554, add_ln209_12_reg_594, ap_enable_reg_pp1_iter1, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_block_pp0_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            w_digits_data_V_d0 <= add_ln209_12_reg_594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            w_digits_data_V_d0 <= add_ln209_3_reg_554;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            w_digits_data_V_d0 <= add_ln209_11_reg_534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_digits_data_V_d0 <= x0_digits_data_V_loa_reg_494;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_V_d0 <= ap_const_lv64_0;
        else 
            w_digits_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_digits_data_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state2, icmp_ln168_fu_248_p2, icmp_ln175_reg_499_pp0_iter1_reg, ap_enable_reg_pp0_iter1, icmp_ln191_reg_559_pp1_iter1_reg, ap_enable_reg_pp1_iter1, ap_CS_fsm_state13, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln175_reg_499_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln168_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln191_reg_559_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            w_digits_data_V_we0 <= ap_const_logic_1;
        else 
            w_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x0_digits_data_V_address0 <= zext_ln170_fu_277_p1(4 - 1 downto 0);

    x0_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x0_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            x0_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x1_digits_data_V_address0 <= zext_ln180_fu_294_p1(4 - 1 downto 0);

    x1_digits_data_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x1_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            x1_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x2_digits_data_V_address0 <= zext_ln196_fu_395_p1(4 - 1 downto 0);

    x2_digits_data_V_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            x2_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            x2_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1468_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_0_reg_174),33));
    zext_ln168_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_152),64));
    zext_ln170_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_163),64));
    zext_ln175_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_0_reg_174),65));
    zext_ln180_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i2_0_phi_fu_202_p4),64));
    zext_ln181_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j1_0_phi_fu_190_p4),64));
    zext_ln191_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_2_reg_209),65));
    zext_ln196_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i3_0_phi_fu_237_p4),64));
    zext_ln197_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j1_1_phi_fu_225_p4),64));
    zext_ln209_2_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_reg_549),64));
    zext_ln209_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_tmp_bits_read),33));
    zext_ln700_36_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_244),66));
    zext_ln700_37_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_0_reg_174),64));
    zext_ln700_38_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_30_reg_529),66));
    zext_ln700_39_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x2_digits_data_V_loa_reg_578),65));
    zext_ln700_40_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_244),66));
    zext_ln700_41_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_2_reg_209),64));
    zext_ln700_42_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_31_reg_589),66));
    zext_ln700_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_digits_data_V_loa_reg_518),65));
end behav;
