-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity karastuba_mul_ADD_SU is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z0_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    z0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    z0_digits_data_V_ce0 : OUT STD_LOGIC;
    z0_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    z2_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    z2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    z2_digits_data_V_ce0 : OUT STD_LOGIC;
    z2_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    cross_mul_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
    cross_mul_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cross_mul_digits_data_V_ce0 : OUT STD_LOGIC;
    cross_mul_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    res_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    res_digits_data_V_ce0 : OUT STD_LOGIC;
    res_digits_data_V_we0 : OUT STD_LOGIC;
    res_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of karastuba_mul_ADD_SU is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv65_1FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (64 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_088_0_i_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_i_reg_215 : STD_LOGIC_VECTOR (6 downto 0);
    signal op2_assign_reg_226 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i11_reg_238 : STD_LOGIC_VECTOR (6 downto 0);
    signal i5_0_reg_249 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln54_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_471_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_277_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_475 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln59_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_480_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal z0_digits_data_V_loa_reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal z2_digits_data_V_loa_reg_501 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_300_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln700_reg_507 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_5_fu_311_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_5_reg_512 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add2_tmp_bits_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_tmp_bits_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_i_reg_527_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_527_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_527_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_31_fu_358_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln81_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_reg_536 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_reg_536_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_reg_536_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_reg_536_pp1_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal cross_mul_digits_dat_5_reg_551 : STD_LOGIC_VECTOR (63 downto 0);
    signal add2_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal add2_digits_data_V_l_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal tmp_V_25_fu_376_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_25_reg_561 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal add_ln700_15_fu_414_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_15_reg_572 : STD_LOGIC_VECTOR (63 downto 0);
    signal z1_tmp_bits_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal z1_tmp_bits_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln364_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state14_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln364_reg_582_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_32_fu_445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln367_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_reg_591_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_res_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_res_digits_data_V_l_reg_601 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_CAT_I_I_I_O_fu_260_ap_ready : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal add2_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add2_digits_data_V_ce0 : STD_LOGIC;
    signal add2_digits_data_V_we0 : STD_LOGIC;
    signal z1_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal z1_digits_data_V_ce0 : STD_LOGIC;
    signal z1_digits_data_V_we0 : STD_LOGIC;
    signal z1_digits_data_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_res_digits_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_res_digits_data_V_ce0 : STD_LOGIC;
    signal p_res_digits_data_V_we0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_ap_start : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_ap_idle : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_w_digits_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_CAT_I_I_I_O_fu_260_w_digits_data_V_ce0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_w_digits_data_V_we0 : STD_LOGIC;
    signal grp_CAT_I_I_I_O_fu_260_w_digits_data_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_0_i_phi_fu_219_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_op2_assign_phi_fu_230_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_CAT_I_I_I_O_fu_260_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln209_fu_293_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln54_fu_289_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_16_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_14_fu_306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_17_fu_319_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_fu_316_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_fu_322_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln64_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln64_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln180_fu_370_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln701_fu_373_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal select_ln701_fu_382_p3 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_26_fu_401_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal trunc_ln701_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln701_3_fu_390_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_neg207_i_fu_420_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln96_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component CAT_I_I_I_O IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x0_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x0_digits_data_V_ce0 : OUT STD_LOGIC;
        x0_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        x1_tmp_bits_read : IN STD_LOGIC_VECTOR (31 downto 0);
        x1_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x1_digits_data_V_ce0 : OUT STD_LOGIC;
        x1_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        x2_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x2_digits_data_V_ce0 : OUT STD_LOGIC;
        x2_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        w_digits_data_V_ce0 : OUT STD_LOGIC;
        w_digits_data_V_we0 : OUT STD_LOGIC;
        w_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        w_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component karastuba_mul_ADDNgs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component karastuba_mul_ADD8jQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    add2_digits_data_V_U : component karastuba_mul_ADDNgs
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => add2_digits_data_V_address0,
        ce0 => add2_digits_data_V_ce0,
        we0 => add2_digits_data_V_we0,
        d0 => add_ln209_5_reg_512,
        q0 => add2_digits_data_V_q0);

    z1_digits_data_V_U : component karastuba_mul_ADDNgs
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z1_digits_data_V_address0,
        ce0 => z1_digits_data_V_ce0,
        we0 => z1_digits_data_V_we0,
        d0 => add_ln700_15_reg_572,
        q0 => z1_digits_data_V_q0);

    p_res_digits_data_V_U : component karastuba_mul_ADD8jQ
    generic map (
        DataWidth => 64,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_res_digits_data_V_address0,
        ce0 => p_res_digits_data_V_ce0,
        we0 => p_res_digits_data_V_we0,
        d0 => grp_CAT_I_I_I_O_fu_260_w_digits_data_V_d0,
        q0 => p_res_digits_data_V_q0);

    grp_CAT_I_I_I_O_fu_260 : component CAT_I_I_I_O
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_CAT_I_I_I_O_fu_260_ap_start,
        ap_done => grp_CAT_I_I_I_O_fu_260_ap_done,
        ap_idle => grp_CAT_I_I_I_O_fu_260_ap_idle,
        ap_ready => grp_CAT_I_I_I_O_fu_260_ap_ready,
        x0_digits_data_V_address0 => grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_address0,
        x0_digits_data_V_ce0 => grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_ce0,
        x0_digits_data_V_q0 => z0_digits_data_V_q0,
        x1_tmp_bits_read => z1_tmp_bits_reg_577,
        x1_digits_data_V_address0 => grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_address0,
        x1_digits_data_V_ce0 => grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_ce0,
        x1_digits_data_V_q0 => z1_digits_data_V_q0,
        x2_digits_data_V_address0 => grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_address0,
        x2_digits_data_V_ce0 => grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_ce0,
        x2_digits_data_V_q0 => z2_digits_data_V_q0,
        w_digits_data_V_address0 => grp_CAT_I_I_I_O_fu_260_w_digits_data_V_address0,
        w_digits_data_V_ce0 => grp_CAT_I_I_I_O_fu_260_w_digits_data_V_ce0,
        w_digits_data_V_we0 => grp_CAT_I_I_I_O_fu_260_w_digits_data_V_we0,
        w_digits_data_V_d0 => grp_CAT_I_I_I_O_fu_260_w_digits_data_V_d0,
        w_digits_data_V_q0 => p_res_digits_data_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_CAT_I_I_I_O_fu_260_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state14)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((grp_CAT_I_I_I_O_fu_260_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_CAT_I_I_I_O_fu_260_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_CAT_I_I_I_O_fu_260_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_CAT_I_I_I_O_fu_260_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_CAT_I_I_I_O_fu_260_ap_ready = ap_const_logic_1)) then 
                    grp_CAT_I_I_I_O_fu_260_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i5_0_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln364_fu_439_p2 = ap_const_lv1_0))) then 
                i5_0_reg_249 <= i_32_fu_445_p2;
            elsif (((grp_CAT_I_I_I_O_fu_260_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i5_0_reg_249 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i11_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i11_reg_238 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_fu_352_p2 = ap_const_lv1_0))) then 
                i_0_i11_reg_238 <= i_31_fu_358_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_215 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_i_reg_215 <= i_reg_475;
            end if; 
        end if;
    end process;

    op2_assign_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                op2_assign_reg_226 <= ap_const_lv1_0;
            elsif (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_527_pp1_iter3_reg = ap_const_lv1_0))) then 
                op2_assign_reg_226 <= tmp_reg_567;
            end if; 
        end if;
    end process;

    p_088_0_i_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_088_0_i_reg_203 <= ap_const_lv2_0;
            elsif (((icmp_ln54_reg_471_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                p_088_0_i_reg_203 <= tmp_V_fu_322_p2(65 downto 64);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_527 = ap_const_lv1_0))) then
                add2_digits_data_V_l_reg_556 <= add2_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add2_tmp_bits_reg_522 <= add2_tmp_bits_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln209_5_reg_512 <= add_ln209_5_fu_311_p2;
                add_ln700_reg_507 <= add_ln700_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_527_pp1_iter2_reg = ap_const_lv1_0))) then
                add_ln700_15_reg_572 <= add_ln700_15_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_527 = ap_const_lv1_0))) then
                cross_mul_digits_dat_5_reg_551 <= cross_mul_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_i_reg_527 <= exitcond_i_fu_352_p2;
                exitcond_i_reg_527_pp1_iter1_reg <= exitcond_i_reg_527;
                    zext_ln81_reg_536_pp1_iter1_reg(6 downto 0) <= zext_ln81_reg_536(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                exitcond_i_reg_527_pp1_iter2_reg <= exitcond_i_reg_527_pp1_iter1_reg;
                exitcond_i_reg_527_pp1_iter3_reg <= exitcond_i_reg_527_pp1_iter2_reg;
                    zext_ln81_reg_536_pp1_iter2_reg(6 downto 0) <= zext_ln81_reg_536_pp1_iter1_reg(6 downto 0);
                    zext_ln81_reg_536_pp1_iter3_reg(6 downto 0) <= zext_ln81_reg_536_pp1_iter2_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_475 <= i_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln364_reg_582 <= icmp_ln364_fu_439_p2;
                icmp_ln364_reg_582_pp2_iter1_reg <= icmp_ln364_reg_582;
                    zext_ln367_reg_591_pp2_iter1_reg(7 downto 0) <= zext_ln367_reg_591(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln54_reg_471 <= icmp_ln54_fu_271_p2;
                icmp_ln54_reg_471_pp0_iter1_reg <= icmp_ln54_reg_471;
                    zext_ln59_reg_480_pp0_iter1_reg(6 downto 0) <= zext_ln59_reg_480(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln364_reg_582 = ap_const_lv1_0))) then
                p_res_digits_data_V_l_reg_601 <= p_res_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_527_pp1_iter1_reg = ap_const_lv1_0))) then
                tmp_V_25_reg_561 <= tmp_V_25_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_527_pp1_iter2_reg = ap_const_lv1_0))) then
                tmp_reg_567 <= tmp_V_26_fu_401_p2(64 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                z0_digits_data_V_loa_reg_495 <= z0_digits_data_V_q0;
                z2_digits_data_V_loa_reg_501 <= z2_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                z1_tmp_bits_reg_577 <= z1_tmp_bits_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln364_fu_439_p2 = ap_const_lv1_0))) then
                    zext_ln367_reg_591(7 downto 0) <= zext_ln367_fu_451_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln59_reg_480(6 downto 0) <= zext_ln59_fu_283_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_fu_352_p2 = ap_const_lv1_0))) then
                    zext_ln81_reg_536(6 downto 0) <= zext_ln81_fu_364_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln59_reg_480(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln59_reg_480_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_536(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_536_pp1_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_536_pp1_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_536_pp1_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln367_reg_591(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln367_reg_591_pp2_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln54_fu_271_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, exitcond_i_fu_352_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, icmp_ln364_fu_439_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter4, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_ap_done, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln54_fu_271_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln54_fu_271_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_i_fu_352_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_i_fu_352_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_CAT_I_I_I_O_fu_260_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln364_fu_439_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln364_fu_439_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    add2_digits_data_V_address0_assign_proc : process(zext_ln59_reg_480_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln81_fu_364_p1, ap_block_pp1_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            add2_digits_data_V_address0 <= zext_ln81_fu_364_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            add2_digits_data_V_address0 <= zext_ln59_reg_480_pp0_iter1_reg(6 - 1 downto 0);
        else 
            add2_digits_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    add2_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            add2_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            add2_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    add2_digits_data_V_we0_assign_proc : process(icmp_ln54_reg_471_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln54_reg_471_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            add2_digits_data_V_we0 <= ap_const_logic_1;
        else 
            add2_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add2_tmp_bits_fu_347_p2 <= std_logic_vector(unsigned(add_ln64_fu_342_p2) + unsigned(z2_tmp_bits_read));
    add_ln209_14_fu_306_p2 <= std_logic_vector(unsigned(z2_digits_data_V_loa_reg_501) + unsigned(zext_ln700_16_fu_296_p1));
    add_ln209_5_fu_311_p2 <= std_logic_vector(unsigned(add_ln209_14_fu_306_p2) + unsigned(z0_digits_data_V_loa_reg_495));
    add_ln64_fu_342_p2 <= std_logic_vector(unsigned(zext_ln64_fu_338_p1) + unsigned(z0_tmp_bits_read));
    add_ln700_15_fu_414_p2 <= std_logic_vector(unsigned(trunc_ln701_fu_398_p1) + unsigned(select_ln701_3_fu_390_p3));
    add_ln700_fu_300_p2 <= std_logic_vector(unsigned(zext_ln209_fu_293_p1) + unsigned(zext_ln54_fu_289_p1));
    add_ln96_fu_428_p2 <= std_logic_vector(unsigned(cross_mul_tmp_bits_read) + unsigned(p_neg207_i_fu_420_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(5);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln54_fu_271_p2)
    begin
        if ((icmp_ln54_fu_271_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(exitcond_i_fu_352_p2)
    begin
        if ((exitcond_i_fu_352_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state14_assign_proc : process(icmp_ln364_fu_439_p2)
    begin
        if ((icmp_ln364_fu_439_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_219_p4_assign_proc : process(i_0_i_reg_215, icmp_ln54_reg_471, ap_CS_fsm_pp0_stage0, i_reg_475, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln54_reg_471 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_i_phi_fu_219_p4 <= i_reg_475;
        else 
            ap_phi_mux_i_0_i_phi_fu_219_p4 <= i_0_i_reg_215;
        end if; 
    end process;


    ap_phi_mux_op2_assign_phi_fu_230_p4_assign_proc : process(op2_assign_reg_226, exitcond_i_reg_527_pp1_iter3_reg, tmp_reg_567, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (exitcond_i_reg_527_pp1_iter3_reg = ap_const_lv1_0))) then 
            ap_phi_mux_op2_assign_phi_fu_230_p4 <= tmp_reg_567;
        else 
            ap_phi_mux_op2_assign_phi_fu_230_p4 <= op2_assign_reg_226;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cross_mul_digits_data_V_address0 <= zext_ln81_fu_364_p1(6 - 1 downto 0);

    cross_mul_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            cross_mul_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            cross_mul_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_352_p2 <= "1" when (i_0_i11_reg_238 = ap_const_lv7_40) else "0";
    grp_CAT_I_I_I_O_fu_260_ap_start <= grp_CAT_I_I_I_O_fu_260_ap_start_reg;
    i_31_fu_358_p2 <= std_logic_vector(unsigned(i_0_i11_reg_238) + unsigned(ap_const_lv7_1));
    i_32_fu_445_p2 <= std_logic_vector(unsigned(i5_0_reg_249) + unsigned(ap_const_lv8_1));
    i_fu_277_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_219_p4) + unsigned(ap_const_lv7_1));
    icmp_ln364_fu_439_p2 <= "1" when (i5_0_reg_249 = ap_const_lv8_80) else "0";
    icmp_ln54_fu_271_p2 <= "1" when (ap_phi_mux_i_0_i_phi_fu_219_p4 = ap_const_lv7_40) else "0";
    p_neg207_i_fu_420_p3 <= 
        ap_const_lv32_FFFFFFFF when (op2_assign_reg_226(0) = '1') else 
        ap_const_lv32_0;

    p_res_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln367_fu_451_p1, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_w_digits_data_V_address0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            p_res_digits_data_V_address0 <= zext_ln367_fu_451_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_res_digits_data_V_address0 <= grp_CAT_I_I_I_O_fu_260_w_digits_data_V_address0;
        else 
            p_res_digits_data_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    p_res_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_w_digits_data_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            p_res_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_res_digits_data_V_ce0 <= grp_CAT_I_I_I_O_fu_260_w_digits_data_V_ce0;
        else 
            p_res_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_res_digits_data_V_we0_assign_proc : process(ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_w_digits_data_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_res_digits_data_V_we0 <= grp_CAT_I_I_I_O_fu_260_w_digits_data_V_we0;
        else 
            p_res_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_digits_data_V_address0 <= zext_ln367_reg_591_pp2_iter1_reg(7 - 1 downto 0);

    res_digits_data_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            res_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            res_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_digits_data_V_d0 <= p_res_digits_data_V_l_reg_601;

    res_digits_data_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln364_reg_582_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln364_reg_582_pp2_iter1_reg = ap_const_lv1_0))) then 
            res_digits_data_V_we0 <= ap_const_logic_1;
        else 
            res_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln701_3_fu_390_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (ap_phi_mux_op2_assign_phi_fu_230_p4(0) = '1') else 
        ap_const_lv64_0;
    select_ln701_fu_382_p3 <= 
        ap_const_lv65_1FFFFFFFFFFFFFFFF when (ap_phi_mux_op2_assign_phi_fu_230_p4(0) = '1') else 
        ap_const_lv65_0;
    tmp_V_25_fu_376_p2 <= std_logic_vector(unsigned(zext_ln180_fu_370_p1) - unsigned(zext_ln701_fu_373_p1));
    tmp_V_26_fu_401_p2 <= std_logic_vector(unsigned(select_ln701_fu_382_p3) + unsigned(tmp_V_25_reg_561));
    tmp_V_fu_322_p2 <= std_logic_vector(unsigned(zext_ln700_17_fu_319_p1) + unsigned(zext_ln700_fu_316_p1));
    trunc_ln701_fu_398_p1 <= tmp_V_25_reg_561(64 - 1 downto 0);

    z0_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln59_fu_283_p1, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z0_digits_data_V_address0 <= zext_ln59_fu_283_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z0_digits_data_V_address0 <= grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_address0;
        else 
            z0_digits_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    z0_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z0_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z0_digits_data_V_ce0 <= grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_ce0;
        else 
            z0_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z1_digits_data_V_address0_assign_proc : process(zext_ln81_reg_536_pp1_iter3_reg, ap_enable_reg_pp1_iter4, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_address0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            z1_digits_data_V_address0 <= zext_ln81_reg_536_pp1_iter3_reg(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z1_digits_data_V_address0 <= grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_address0;
        else 
            z1_digits_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    z1_digits_data_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_ce0)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            z1_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z1_digits_data_V_ce0 <= grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_ce0;
        else 
            z1_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z1_digits_data_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_i_reg_527_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_reg_527_pp1_iter3_reg = ap_const_lv1_0))) then 
            z1_digits_data_V_we0 <= ap_const_logic_1;
        else 
            z1_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z1_tmp_bits_fu_433_p2 <= std_logic_vector(unsigned(add_ln96_fu_428_p2) - unsigned(add2_tmp_bits_reg_522));

    z2_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln59_fu_283_p1, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z2_digits_data_V_address0 <= zext_ln59_fu_283_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z2_digits_data_V_address0 <= grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_address0;
        else 
            z2_digits_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    z2_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z2_digits_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z2_digits_data_V_ce0 <= grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_ce0;
        else 
            z2_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln180_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cross_mul_digits_dat_5_reg_551),65));
    zext_ln209_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z0_digits_data_V_loa_reg_495),65));
    zext_ln367_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_249),64));
    zext_ln54_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_203),65));
    zext_ln59_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i_phi_fu_219_p4),64));
    zext_ln64_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_203),32));
    zext_ln700_16_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_203),64));
    zext_ln700_17_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_reg_507),66));
    zext_ln700_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z2_digits_data_V_loa_reg_501),66));
    zext_ln701_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add2_digits_data_V_l_reg_556),65));
    zext_ln81_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i11_reg_238),64));
end behav;
