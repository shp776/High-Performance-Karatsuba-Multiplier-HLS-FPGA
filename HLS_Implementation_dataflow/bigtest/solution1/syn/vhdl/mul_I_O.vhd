-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul_I_O is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    u_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
    u_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    u_digits_data_V_ce0 : OUT STD_LOGIC;
    u_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_tmp_bits_read : IN STD_LOGIC_VECTOR (1 downto 0);
    v_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v_digits_data_V_ce0 : OUT STD_LOGIC;
    v_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_digits_data_V_ce0 : OUT STD_LOGIC;
    w_digits_data_V_we0 : OUT STD_LOGIC;
    w_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of mul_I_O is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0176_1_reg_188 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0288_0_reg_211 : STD_LOGIC_VECTOR (1 downto 0);
    signal i2_0_reg_223 : STD_LOGIC_VECTOR (3 downto 0);
    signal j3_0_reg_234 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0356_0_reg_258 : STD_LOGIC_VECTOR (1 downto 0);
    signal i6_0_reg_270 : STD_LOGIC_VECTOR (3 downto 0);
    signal j7_0_reg_281 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln111_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state20_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln133_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_306 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state26_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state28_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal icmp_ln147_reg_816 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln111_reg_694_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal j_fu_320_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln108_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_2_fu_337_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_680 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_digits_data_V_addr_reg_685 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln129_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_694_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln111_fu_359_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln111_reg_698 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln114_fu_365_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln114_reg_703 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln114_reg_703_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln700_reg_723 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal w_digits_data_V_addr_1_reg_728 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_fu_398_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln700_reg_733 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln700_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln700_reg_738 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_1_fu_407_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_1_reg_743 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln883_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal w_digits_data_V_addr_3_reg_757 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln209_2_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_2_reg_762 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln133_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln133_reg_767_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_460_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_771 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_digits_data_V_addr_2_reg_781 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_digits_data_V_addr_2_reg_781_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_fu_476_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_786 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_4_fu_494_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_4_reg_791 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_reg_796 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal zext_ln143_fu_535_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln143_reg_806 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln143_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state25_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln147_reg_816_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_550_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_820 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_digits_data_V_addr_4_reg_830 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_digits_data_V_addr_4_reg_830_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_fu_566_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_835 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_5_fu_584_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_5_reg_840 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln209_3_fu_596_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_3_reg_845 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal add_ln155_fu_629_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state25 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal j_0_reg_165 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln105_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_0_reg_176 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_phi_mux_i_0_phi_fu_204_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i2_0_phi_fu_227_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j3_0_phi_fu_238_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_tmp_bits_0_reg_246 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_phi_mux_i6_0_phi_fu_274_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_j7_0_phi_fu_285_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_tmp_bits_1_reg_293 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln105_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_1_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_2_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln123_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal grp_fu_384_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_fu_394_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln700_2_fu_412_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal k_V_fu_416_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln123_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln700_3_fu_486_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln133_fu_482_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_5_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_4_fu_500_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_6_fu_516_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_4_fu_512_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_fu_519_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_7_fu_576_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln147_fu_572_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln700_9_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln209_5_fu_590_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_10_fu_606_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln700_8_fu_602_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_3_fu_609_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln155_fu_625_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal mul_ln157_fu_644_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln157_fu_644_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln157_fu_644_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln157_fu_634_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln157_fu_650_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_384_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_384_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln157_fu_644_p00 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln157_fu_644_p10 : STD_LOGIC_VECTOR (3 downto 0);

    component karastuba_mul_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    karastuba_mul_mulbkb_U5 : component karastuba_mul_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_384_p0,
        din1 => grp_fu_384_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_384_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln108_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln108_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln129_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln108_fu_331_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln129_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln108_fu_331_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln143_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((icmp_ln143_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_return_preg <= add_ln157_fu_650_p2;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln108_fu_331_p2 = ap_const_lv1_1))) then 
                i2_0_reg_223 <= ap_const_lv4_0;
            elsif (((icmp_ln133_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i2_0_reg_223 <= i_reg_771;
            end if; 
        end if;
    end process;

    i6_0_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i6_0_reg_270 <= ap_const_lv4_0;
            elsif (((icmp_ln147_reg_816 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i6_0_reg_270 <= i_1_reg_820;
            end if; 
        end if;
    end process;

    i_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_200 <= ap_const_lv4_0;
            elsif (((icmp_ln111_reg_694 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_200 <= add_ln111_reg_698;
            end if; 
        end if;
    end process;

    j1_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln105_fu_314_p2 = ap_const_lv1_1))) then 
                j1_0_reg_176 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j1_0_reg_176 <= j_2_reg_680;
            end if; 
        end if;
    end process;

    j3_0_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln108_fu_331_p2 = ap_const_lv1_1))) then 
                j3_0_reg_234 <= ap_const_lv5_8;
            elsif (((icmp_ln133_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j3_0_reg_234 <= j_1_reg_786;
            end if; 
        end if;
    end process;

    j7_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j7_0_reg_281 <= ap_const_lv5_8;
            elsif (((icmp_ln147_reg_816 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j7_0_reg_281 <= j_3_reg_835;
            end if; 
        end if;
    end process;

    j_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_165 <= j_fu_320_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_165 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0176_1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0176_1_reg_188 <= ap_const_lv64_0;
            elsif (((icmp_ln111_reg_694_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                p_0176_1_reg_188 <= k_V_fu_416_p2(127 downto 64);
            end if; 
        end if;
    end process;

    p_0288_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln108_fu_331_p2 = ap_const_lv1_1))) then 
                p_0288_0_reg_211 <= ap_const_lv2_0;
            elsif (((icmp_ln133_reg_767_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                p_0288_0_reg_211 <= tmp_V_fu_519_p2(65 downto 64);
            end if; 
        end if;
    end process;

    p_0356_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                p_0356_0_reg_258 <= ap_const_lv2_0;
            elsif (((icmp_ln147_reg_816_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then 
                p_0356_0_reg_258 <= tmp_V_3_fu_609_p2(65 downto 64);
            end if; 
        end if;
    end process;

    w_tmp_bits_0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                w_tmp_bits_0_reg_246 <= p_0288_0_reg_211;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln129_fu_348_p2 = ap_const_lv1_1) and (icmp_ln108_fu_331_p2 = ap_const_lv1_1))) then 
                w_tmp_bits_0_reg_246 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_tmp_bits_1_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                w_tmp_bits_1_reg_293 <= add_ln155_fu_629_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln143_fu_539_p2 = ap_const_lv1_1))) then 
                w_tmp_bits_1_reg_293 <= zext_ln143_fu_535_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln111_reg_698 <= add_ln111_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln114_reg_703 <= add_ln114_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln114_reg_703_pp0_iter1_reg <= add_ln114_reg_703;
                icmp_ln111_reg_694 <= icmp_ln111_fu_353_p2;
                icmp_ln111_reg_694_pp0_iter1_reg <= icmp_ln111_reg_694;
                icmp_ln111_reg_694_pp0_iter2_reg <= icmp_ln111_reg_694_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_reg_694_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln209_1_reg_743 <= add_ln209_1_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln209_2_reg_762 <= add_ln209_2_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln147_reg_816 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln209_3_reg_845 <= add_ln209_3_fu_596_p2;
                tmp_V_5_reg_840 <= tmp_V_5_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln133_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln209_reg_796 <= add_ln209_fu_506_p2;
                tmp_V_4_reg_791 <= tmp_V_4_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_reg_694_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln700_reg_733 <= add_ln700_fu_398_p2;
                trunc_ln700_reg_738 <= trunc_ln700_fu_403_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                i_1_reg_820 <= i_1_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                i_reg_771 <= i_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln133_reg_767 <= icmp_ln133_fu_454_p2;
                icmp_ln133_reg_767_pp1_iter1_reg <= icmp_ln133_reg_767;
                w_digits_data_V_addr_2_reg_781_pp1_iter1_reg <= w_digits_data_V_addr_2_reg_781;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln147_reg_816 <= icmp_ln147_fu_544_p2;
                icmp_ln147_reg_816_pp2_iter1_reg <= icmp_ln147_reg_816;
                w_digits_data_V_addr_4_reg_830_pp2_iter1_reg <= w_digits_data_V_addr_4_reg_830;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                icmp_ln883_reg_753 <= icmp_ln883_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln133_reg_767 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                j_1_reg_786 <= j_1_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_680 <= j_2_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln147_reg_816 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                j_3_reg_835 <= j_3_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_reg_694_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln700_reg_723 <= grp_fu_384_p2;
                w_digits_data_V_addr_1_reg_728 <= zext_ln116_2_fu_390_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln111_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln133_reg_767 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then
                reg_302 <= u_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln111_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln147_reg_816 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then
                reg_306 <= v_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((icmp_ln111_reg_694_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln147_reg_816 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((icmp_ln133_reg_767 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then
                reg_310 <= w_digits_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                v_digits_data_V_addr_reg_685 <= zext_ln116_fu_343_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln133_fu_454_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                w_digits_data_V_addr_2_reg_781 <= zext_ln137_fu_471_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln883_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                w_digits_data_V_addr_3_reg_757 <= zext_ln123_fu_443_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln147_fu_544_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                w_digits_data_V_addr_4_reg_830 <= zext_ln151_fu_561_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                    zext_ln143_reg_806(1 downto 0) <= zext_ln143_fu_535_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln143_reg_806(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, icmp_ln108_fu_331_p2, ap_CS_fsm_state3, icmp_ln129_fu_348_p2, icmp_ln111_fu_353_p2, ap_CS_fsm_pp0_stage2, icmp_ln883_fu_431_p2, ap_CS_fsm_state15, icmp_ln133_fu_454_p2, ap_enable_reg_pp1_iter1, ap_CS_fsm_state24, icmp_ln143_fu_539_p2, icmp_ln147_fu_544_p2, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, icmp_ln105_fu_314_p2, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln105_fu_314_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln129_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln108_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln129_fu_348_p2 = ap_const_lv1_1) and (icmp_ln108_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln111_fu_353_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln111_fu_353_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln883_fu_431_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln133_fu_454_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln133_fu_454_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln143_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln147_fu_544_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln147_fu_544_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln111_fu_359_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_204_p4) + unsigned(ap_const_lv4_1));
    add_ln114_fu_365_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_204_p4) + unsigned(j1_0_reg_176));
    add_ln155_fu_629_p2 <= std_logic_vector(unsigned(zext_ln143_reg_806) + unsigned(zext_ln155_fu_625_p1));
    add_ln157_fu_650_p2 <= std_logic_vector(unsigned(mul_ln157_fu_644_p2) + unsigned(zext_ln157_fu_634_p1));
    add_ln209_1_fu_407_p2 <= std_logic_vector(unsigned(trunc_ln700_reg_738) + unsigned(reg_310));
    add_ln209_2_fu_448_p2 <= std_logic_vector(unsigned(reg_310) + unsigned(p_0176_1_reg_188));
    add_ln209_3_fu_596_p2 <= std_logic_vector(unsigned(add_ln209_5_fu_590_p2) + unsigned(reg_306));
    add_ln209_4_fu_500_p2 <= std_logic_vector(unsigned(reg_310) + unsigned(zext_ln700_5_fu_490_p1));
    add_ln209_5_fu_590_p2 <= std_logic_vector(unsigned(reg_310) + unsigned(zext_ln700_9_fu_580_p1));
    add_ln209_fu_506_p2 <= std_logic_vector(unsigned(add_ln209_4_fu_500_p2) + unsigned(reg_302));
    add_ln700_fu_398_p2 <= std_logic_vector(unsigned(zext_ln111_fu_394_p1) + unsigned(mul_ln700_reg_723));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(12);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(16);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(7);
    ap_CS_fsm_state16 <= ap_CS_fsm(8);
    ap_CS_fsm_state17 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(13);
    ap_CS_fsm_state24 <= ap_CS_fsm(14);
    ap_CS_fsm_state29 <= ap_CS_fsm(17);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(18);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln111_fu_353_p2)
    begin
        if ((icmp_ln111_fu_353_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(icmp_ln133_fu_454_p2)
    begin
        if ((icmp_ln133_fu_454_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state25_assign_proc : process(icmp_ln147_fu_544_p2)
    begin
        if ((icmp_ln147_fu_544_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i2_0_phi_fu_227_p4_assign_proc : process(i2_0_reg_223, icmp_ln133_reg_767, ap_CS_fsm_pp1_stage0, i_reg_771, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln133_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i2_0_phi_fu_227_p4 <= i_reg_771;
        else 
            ap_phi_mux_i2_0_phi_fu_227_p4 <= i2_0_reg_223;
        end if; 
    end process;


    ap_phi_mux_i6_0_phi_fu_274_p4_assign_proc : process(i6_0_reg_270, icmp_ln147_reg_816, ap_CS_fsm_pp2_stage0, i_1_reg_820, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln147_reg_816 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i6_0_phi_fu_274_p4 <= i_1_reg_820;
        else 
            ap_phi_mux_i6_0_phi_fu_274_p4 <= i6_0_reg_270;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_204_p4_assign_proc : process(i_0_reg_200, icmp_ln111_reg_694, ap_CS_fsm_pp0_stage0, add_ln111_reg_698, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln111_reg_694 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_204_p4 <= add_ln111_reg_698;
        else 
            ap_phi_mux_i_0_phi_fu_204_p4 <= i_0_reg_200;
        end if; 
    end process;


    ap_phi_mux_j3_0_phi_fu_238_p4_assign_proc : process(j3_0_reg_234, icmp_ln133_reg_767, ap_CS_fsm_pp1_stage0, j_1_reg_786, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln133_reg_767 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_j3_0_phi_fu_238_p4 <= j_1_reg_786;
        else 
            ap_phi_mux_j3_0_phi_fu_238_p4 <= j3_0_reg_234;
        end if; 
    end process;


    ap_phi_mux_j7_0_phi_fu_285_p4_assign_proc : process(j7_0_reg_281, icmp_ln147_reg_816, ap_CS_fsm_pp2_stage0, j_3_reg_835, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln147_reg_816 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_j7_0_phi_fu_285_p4 <= j_3_reg_835;
        else 
            ap_phi_mux_j7_0_phi_fu_285_p4 <= j7_0_reg_281;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state30, add_ln157_fu_650_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_return <= add_ln157_fu_650_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_fu_384_p0 <= grp_fu_384_p00(64 - 1 downto 0);
    grp_fu_384_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_302),128));
    grp_fu_384_p1 <= grp_fu_384_p10(64 - 1 downto 0);
    grp_fu_384_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_306),128));
    i_1_fu_550_p2 <= std_logic_vector(unsigned(ap_phi_mux_i6_0_phi_fu_274_p4) + unsigned(ap_const_lv4_1));
    i_fu_460_p2 <= std_logic_vector(unsigned(ap_phi_mux_i2_0_phi_fu_227_p4) + unsigned(ap_const_lv4_1));
    icmp_ln105_fu_314_p2 <= "1" when (j_0_reg_165 = ap_const_lv5_10) else "0";
    icmp_ln108_fu_331_p2 <= "1" when (j1_0_reg_176 = ap_const_lv4_8) else "0";
    icmp_ln111_fu_353_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_204_p4 = ap_const_lv4_8) else "0";
    icmp_ln129_fu_348_p2 <= "1" when (v_tmp_bits_read = ap_const_lv2_0) else "0";
    icmp_ln133_fu_454_p2 <= "1" when (ap_phi_mux_i2_0_phi_fu_227_p4 = ap_const_lv4_8) else "0";
    icmp_ln143_fu_539_p2 <= "1" when (u_tmp_bits_read = ap_const_lv2_0) else "0";
    icmp_ln147_fu_544_p2 <= "1" when (ap_phi_mux_i6_0_phi_fu_274_p4 = ap_const_lv4_8) else "0";
    icmp_ln883_fu_431_p2 <= "1" when (p_0176_1_reg_188 = ap_const_lv64_0) else "0";
    j_1_fu_476_p2 <= std_logic_vector(unsigned(j3_0_reg_234) + unsigned(ap_const_lv5_1));
    j_2_fu_337_p2 <= std_logic_vector(unsigned(j1_0_reg_176) + unsigned(ap_const_lv4_1));
    j_3_fu_566_p2 <= std_logic_vector(unsigned(j7_0_reg_281) + unsigned(ap_const_lv5_1));
    j_fu_320_p2 <= std_logic_vector(unsigned(j_0_reg_165) + unsigned(ap_const_lv5_1));
    k_V_fu_416_p2 <= std_logic_vector(unsigned(zext_ln700_2_fu_412_p1) + unsigned(add_ln700_reg_733));
    mul_ln157_fu_644_p0 <= mul_ln157_fu_644_p00(2 - 1 downto 0);
    mul_ln157_fu_644_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_tmp_bits_read),4));
    mul_ln157_fu_644_p1 <= mul_ln157_fu_644_p10(2 - 1 downto 0);
    mul_ln157_fu_644_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_tmp_bits_read),4));
    mul_ln157_fu_644_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln157_fu_644_p0) * unsigned(mul_ln157_fu_644_p1), 4));
    tmp_V_3_fu_609_p2 <= std_logic_vector(unsigned(zext_ln700_10_fu_606_p1) + unsigned(zext_ln700_8_fu_602_p1));
    tmp_V_4_fu_494_p2 <= std_logic_vector(unsigned(zext_ln700_3_fu_486_p1) + unsigned(zext_ln133_fu_482_p1));
    tmp_V_5_fu_584_p2 <= std_logic_vector(unsigned(zext_ln700_7_fu_576_p1) + unsigned(zext_ln147_fu_572_p1));
    tmp_V_fu_519_p2 <= std_logic_vector(unsigned(zext_ln700_6_fu_516_p1) + unsigned(zext_ln700_4_fu_512_p1));
    trunc_ln700_fu_403_p1 <= add_ln700_fu_398_p2(64 - 1 downto 0);

    u_digits_data_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln116_1_fu_371_p1, zext_ln136_fu_466_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            u_digits_data_V_address0 <= zext_ln136_fu_466_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            u_digits_data_V_address0 <= zext_ln116_1_fu_371_p1(3 - 1 downto 0);
        else 
            u_digits_data_V_address0 <= "XXX";
        end if; 
    end process;


    u_digits_data_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            u_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            u_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_digits_data_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp0_stage0, v_digits_data_V_addr_reg_685, ap_CS_fsm_pp2_stage0, ap_block_pp0_stage0, ap_block_pp2_stage0, zext_ln150_fu_556_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            v_digits_data_V_address0 <= zext_ln150_fu_556_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v_digits_data_V_address0 <= v_digits_data_V_addr_reg_685;
        else 
            v_digits_data_V_address0 <= "XXX";
        end if; 
    end process;


    v_digits_data_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            v_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            v_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, w_digits_data_V_addr_1_reg_728, ap_CS_fsm_state15, w_digits_data_V_addr_3_reg_757, ap_CS_fsm_pp1_stage0, w_digits_data_V_addr_2_reg_781_pp1_iter1_reg, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, w_digits_data_V_addr_4_reg_830_pp2_iter1_reg, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state18, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln105_fu_326_p1, zext_ln116_2_fu_390_p1, ap_block_pp0_stage3, zext_ln123_fu_443_p1, zext_ln137_fu_471_p1, zext_ln151_fu_561_p1, ap_block_pp0_stage2, ap_block_pp1_stage1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            w_digits_data_V_address0 <= w_digits_data_V_addr_4_reg_830_pp2_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            w_digits_data_V_address0 <= zext_ln151_fu_561_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            w_digits_data_V_address0 <= w_digits_data_V_addr_2_reg_781_pp1_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            w_digits_data_V_address0 <= zext_ln137_fu_471_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            w_digits_data_V_address0 <= w_digits_data_V_addr_3_reg_757;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            w_digits_data_V_address0 <= zext_ln123_fu_443_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            w_digits_data_V_address0 <= w_digits_data_V_addr_1_reg_728;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            w_digits_data_V_address0 <= zext_ln116_2_fu_390_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_V_address0 <= zext_ln105_fu_326_p1(4 - 1 downto 0);
        else 
            w_digits_data_V_address0 <= "XXXX";
        end if; 
    end process;


    w_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_state15, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            w_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            w_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage2, add_ln209_1_reg_743, add_ln209_2_reg_762, add_ln209_reg_796, ap_enable_reg_pp1_iter1, add_ln209_3_reg_845, ap_enable_reg_pp2_iter1, ap_CS_fsm_state18, ap_block_pp0_stage2, ap_block_pp1_stage1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            w_digits_data_V_d0 <= add_ln209_3_reg_845;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            w_digits_data_V_d0 <= add_ln209_reg_796;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            w_digits_data_V_d0 <= add_ln209_2_reg_762;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            w_digits_data_V_d0 <= add_ln209_1_reg_743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_V_d0 <= ap_const_lv64_0;
        else 
            w_digits_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_digits_data_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, icmp_ln111_reg_694_pp0_iter2_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln883_reg_753, icmp_ln133_reg_767_pp1_iter1_reg, ap_enable_reg_pp1_iter1, icmp_ln147_reg_816_pp2_iter1_reg, ap_enable_reg_pp2_iter1, icmp_ln105_fu_314_p2, ap_CS_fsm_state18)
    begin
        if ((((icmp_ln883_reg_753 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln105_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln111_reg_694_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln147_reg_816_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((icmp_ln133_reg_767_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            w_digits_data_V_we0 <= ap_const_logic_1;
        else 
            w_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln123_fu_437_p2 <= (j1_0_reg_176 xor ap_const_lv4_8);
    zext_ln105_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_165),64));
    zext_ln111_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0176_1_reg_188),128));
    zext_ln116_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_204_p4),64));
    zext_ln116_2_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_reg_703_pp0_iter1_reg),64));
    zext_ln116_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_176),64));
    zext_ln123_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln123_fu_437_p2),64));
    zext_ln133_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0288_0_reg_211),65));
    zext_ln136_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i2_0_phi_fu_227_p4),64));
    zext_ln137_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j3_0_phi_fu_238_p4),64));
    zext_ln143_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_tmp_bits_0_reg_246),3));
    zext_ln147_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0356_0_reg_258),65));
    zext_ln150_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i6_0_phi_fu_274_p4),64));
    zext_ln151_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j7_0_phi_fu_285_p4),64));
    zext_ln155_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0356_0_reg_258),3));
    zext_ln157_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_tmp_bits_1_reg_293),4));
    zext_ln700_10_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_840),66));
    zext_ln700_2_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_310),128));
    zext_ln700_3_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_302),65));
    zext_ln700_4_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_310),66));
    zext_ln700_5_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0288_0_reg_211),64));
    zext_ln700_6_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_791),66));
    zext_ln700_7_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_306),65));
    zext_ln700_8_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_310),66));
    zext_ln700_9_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0356_0_reg_258),64));
end behav;
