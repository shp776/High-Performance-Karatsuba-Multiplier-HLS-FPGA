// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module karastuba_mul_MUL_st_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lhs_tmp_bits_read,
        lhs_digits_data_V_address0,
        lhs_digits_data_V_ce0,
        lhs_digits_data_V_q0,
        rhs_tmp_bits_read,
        rhs_digits_data_V_address0,
        rhs_digits_data_V_ce0,
        rhs_digits_data_V_q0,
        z0_digits_data_V_address0,
        z0_digits_data_V_ce0,
        z0_digits_data_V_we0,
        z0_digits_data_V_d0,
        z2_digits_data_V_address0,
        z2_digits_data_V_ce0,
        z2_digits_data_V_we0,
        z2_digits_data_V_d0,
        cross_mul_digits_dat_address0,
        cross_mul_digits_dat_ce0,
        cross_mul_digits_dat_we0,
        cross_mul_digits_dat_d0,
        inter_lhs_digits_dat_address0,
        inter_lhs_digits_dat_ce0,
        inter_lhs_digits_dat_we0,
        inter_lhs_digits_dat_d0,
        inter_rhs_digits_dat_address0,
        inter_rhs_digits_dat_ce0,
        inter_rhs_digits_dat_we0,
        inter_rhs_digits_dat_d0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_pp0_stage0 = 16'd2;
parameter    ap_ST_fsm_state5 = 16'd4;
parameter    ap_ST_fsm_pp1_stage0 = 16'd8;
parameter    ap_ST_fsm_state9 = 16'd16;
parameter    ap_ST_fsm_pp2_stage0 = 16'd32;
parameter    ap_ST_fsm_state13 = 16'd64;
parameter    ap_ST_fsm_pp3_stage0 = 16'd128;
parameter    ap_ST_fsm_state17 = 16'd256;
parameter    ap_ST_fsm_state18 = 16'd512;
parameter    ap_ST_fsm_pp4_stage0 = 16'd1024;
parameter    ap_ST_fsm_state22 = 16'd2048;
parameter    ap_ST_fsm_pp5_stage0 = 16'd4096;
parameter    ap_ST_fsm_state26 = 16'd8192;
parameter    ap_ST_fsm_pp6_stage0 = 16'd16384;
parameter    ap_ST_fsm_state30 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1:0] lhs_tmp_bits_read;
output  [3:0] lhs_digits_data_V_address0;
output   lhs_digits_data_V_ce0;
input  [63:0] lhs_digits_data_V_q0;
input  [1:0] rhs_tmp_bits_read;
output  [3:0] rhs_digits_data_V_address0;
output   rhs_digits_data_V_ce0;
input  [63:0] rhs_digits_data_V_q0;
output  [3:0] z0_digits_data_V_address0;
output   z0_digits_data_V_ce0;
output   z0_digits_data_V_we0;
output  [63:0] z0_digits_data_V_d0;
output  [3:0] z2_digits_data_V_address0;
output   z2_digits_data_V_ce0;
output   z2_digits_data_V_we0;
output  [63:0] z2_digits_data_V_d0;
output  [3:0] cross_mul_digits_dat_address0;
output   cross_mul_digits_dat_ce0;
output   cross_mul_digits_dat_we0;
output  [63:0] cross_mul_digits_dat_d0;
output  [3:0] inter_lhs_digits_dat_address0;
output   inter_lhs_digits_dat_ce0;
output   inter_lhs_digits_dat_we0;
output  [63:0] inter_lhs_digits_dat_d0;
output  [3:0] inter_rhs_digits_dat_address0;
output   inter_rhs_digits_dat_ce0;
output   inter_rhs_digits_dat_we0;
output  [63:0] inter_rhs_digits_dat_d0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] lhs_digits_data_V_address0;
reg lhs_digits_data_V_ce0;
reg[3:0] rhs_digits_data_V_address0;
reg rhs_digits_data_V_ce0;
reg z0_digits_data_V_ce0;
reg z0_digits_data_V_we0;
reg z2_digits_data_V_ce0;
reg z2_digits_data_V_we0;
reg cross_mul_digits_dat_ce0;
reg cross_mul_digits_dat_we0;
reg[3:0] inter_lhs_digits_dat_address0;
reg inter_lhs_digits_dat_ce0;
reg inter_lhs_digits_dat_we0;
reg[3:0] inter_rhs_digits_dat_address0;
reg inter_rhs_digits_dat_ce0;
reg inter_rhs_digits_dat_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_0_i_reg_397;
reg   [3:0] i1_0_i_reg_408;
reg   [3:0] i2_0_i_reg_420;
reg   [3:0] i3_0_i_reg_431;
reg   [4:0] i4_0_i_reg_443;
reg   [4:0] i5_0_i_reg_454;
reg   [4:0] i6_0_i_reg_465;
reg   [63:0] reg_507;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln262_reg_715;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_state8_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln267_reg_736;
reg   [63:0] reg_512;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state10_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
wire    ap_block_state12_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln272_reg_755;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_state14_pp3_stage0_iter0;
wire    ap_block_state15_pp3_stage0_iter1;
wire    ap_block_state16_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln277_reg_776;
wire   [31:0] p_read1_cast_i_fu_517_p1;
reg   [31:0] p_read1_cast_i_reg_705;
reg    ap_block_state1;
wire   [31:0] p_read_cast_i_fu_521_p1;
reg   [31:0] p_read_cast_i_reg_710;
wire   [0:0] icmp_ln262_fu_525_p2;
reg   [0:0] icmp_ln262_reg_715_pp0_iter1_reg;
wire   [3:0] i_fu_531_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln265_fu_537_p1;
reg   [63:0] zext_ln265_reg_724;
reg   [63:0] zext_ln265_reg_724_pp0_iter1_reg;
wire   [0:0] icmp_ln267_fu_542_p2;
reg   [0:0] icmp_ln267_reg_736_pp1_iter1_reg;
wire   [3:0] i_5_fu_548_p2;
reg   [3:0] i_5_reg_740;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln270_1_fu_560_p1;
reg   [63:0] zext_ln270_1_reg_745;
reg   [63:0] zext_ln270_1_reg_745_pp1_iter1_reg;
wire   [0:0] icmp_ln272_fu_571_p2;
reg   [0:0] icmp_ln272_reg_755_pp2_iter1_reg;
wire   [3:0] i_6_fu_577_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] zext_ln275_fu_583_p1;
reg   [63:0] zext_ln275_reg_764;
reg   [63:0] zext_ln275_reg_764_pp2_iter1_reg;
wire   [0:0] icmp_ln277_fu_588_p2;
reg   [0:0] icmp_ln277_reg_776_pp3_iter1_reg;
wire   [3:0] i_7_fu_594_p2;
reg   [3:0] i_7_reg_780;
reg    ap_enable_reg_pp3_iter0;
wire   [63:0] zext_ln280_1_fu_606_p1;
reg   [63:0] zext_ln280_1_reg_785;
reg   [63:0] zext_ln280_1_reg_785_pp3_iter1_reg;
wire   [3:0] grp_mul_I_O_fu_485_ap_return;
reg   [3:0] z0_tmp_bits_i_reg_795;
wire    ap_CS_fsm_state18;
wire    grp_mul_I_O_fu_485_ap_ready;
wire    grp_mul_I_O_fu_485_ap_done;
wire    grp_mul_I_O_fu_496_ap_ready;
wire    grp_mul_I_O_fu_496_ap_done;
wire    grp_karastuba_mul_templa_2_fu_476_ap_ready;
wire    grp_karastuba_mul_templa_2_fu_476_ap_done;
reg    ap_block_state18_on_subcall_done;
wire   [3:0] grp_mul_I_O_fu_496_ap_return;
reg   [3:0] z2_tmp_bits_i_reg_800;
wire   [31:0] p_cross_mul_tmp_bits_fu_617_p1;
reg   [31:0] p_cross_mul_tmp_bits_reg_805;
wire   [0:0] icmp_ln294_fu_621_p2;
reg   [0:0] icmp_ln294_reg_810;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state19_pp4_stage0_iter0;
wire    ap_block_state20_pp4_stage0_iter1;
wire    ap_block_state21_pp4_stage0_iter2;
wire    ap_block_pp4_stage0_11001;
reg   [0:0] icmp_ln294_reg_810_pp4_iter1_reg;
wire   [4:0] i_8_fu_627_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [63:0] zext_ln297_fu_633_p1;
reg   [63:0] zext_ln297_reg_819;
reg   [63:0] zext_ln297_reg_819_pp4_iter1_reg;
wire   [63:0] res_digits_data_V_as_q0;
reg   [63:0] res_digits_data_V_as_3_reg_829;
wire   [0:0] icmp_ln300_fu_638_p2;
reg   [0:0] icmp_ln300_reg_834;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state23_pp5_stage0_iter0;
wire    ap_block_state24_pp5_stage0_iter1;
wire    ap_block_state25_pp5_stage0_iter2;
wire    ap_block_pp5_stage0_11001;
reg   [0:0] icmp_ln300_reg_834_pp5_iter1_reg;
wire   [4:0] i_9_fu_644_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [63:0] zext_ln303_fu_650_p1;
reg   [63:0] zext_ln303_reg_843;
reg   [63:0] zext_ln303_reg_843_pp5_iter1_reg;
wire   [63:0] res_digits_data_V_as_1_q0;
reg   [63:0] res_digits_data_V_as_5_reg_853;
wire   [0:0] icmp_ln306_fu_655_p2;
reg   [0:0] icmp_ln306_reg_858;
wire    ap_CS_fsm_pp6_stage0;
wire    ap_block_state27_pp6_stage0_iter0;
wire    ap_block_state28_pp6_stage0_iter1;
wire    ap_block_state29_pp6_stage0_iter2;
wire    ap_block_pp6_stage0_11001;
reg   [0:0] icmp_ln306_reg_858_pp6_iter1_reg;
wire   [4:0] i_10_fu_661_p2;
reg    ap_enable_reg_pp6_iter0;
wire   [63:0] zext_ln309_fu_667_p1;
reg   [63:0] zext_ln309_reg_867;
reg   [63:0] zext_ln309_reg_867_pp6_iter1_reg;
wire   [63:0] p_cross_mul_digits_da_q0;
reg   [63:0] p_cross_mul_digits_da_2_reg_877;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state9;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state10;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state13;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state14;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state19;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp4_iter2;
wire    ap_CS_fsm_state22;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state23;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
wire    ap_CS_fsm_state26;
wire    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state27;
reg    ap_enable_reg_pp6_iter1;
reg    ap_enable_reg_pp6_iter2;
reg   [2:0] lhs0_digits_data_V_address0;
reg    lhs0_digits_data_V_ce0;
reg    lhs0_digits_data_V_we0;
wire   [63:0] lhs0_digits_data_V_q0;
reg   [2:0] lhs1_digits_data_V_address0;
reg    lhs1_digits_data_V_ce0;
reg    lhs1_digits_data_V_we0;
wire   [63:0] lhs1_digits_data_V_q0;
reg   [2:0] rhs0_digits_data_V_address0;
reg    rhs0_digits_data_V_ce0;
reg    rhs0_digits_data_V_we0;
wire   [63:0] rhs0_digits_data_V_q0;
reg   [2:0] rhs1_digits_data_V_address0;
reg    rhs1_digits_data_V_ce0;
reg    rhs1_digits_data_V_we0;
wire   [63:0] rhs1_digits_data_V_q0;
reg   [2:0] lhs0_tmp_digits_data_address0;
reg    lhs0_tmp_digits_data_ce0;
reg    lhs0_tmp_digits_data_we0;
wire   [63:0] lhs0_tmp_digits_data_q0;
reg   [2:0] lhs1_tmp_digits_data_address0;
reg    lhs1_tmp_digits_data_ce0;
reg    lhs1_tmp_digits_data_we0;
wire   [63:0] lhs1_tmp_digits_data_q0;
reg   [2:0] rhs0_tmp_digits_data_address0;
reg    rhs0_tmp_digits_data_ce0;
reg    rhs0_tmp_digits_data_we0;
wire   [63:0] rhs0_tmp_digits_data_q0;
reg   [2:0] rhs1_tmp_digits_data_address0;
reg    rhs1_tmp_digits_data_ce0;
reg    rhs1_tmp_digits_data_we0;
wire   [63:0] rhs1_tmp_digits_data_q0;
reg   [3:0] res_digits_data_V_as_address0;
reg    res_digits_data_V_as_ce0;
reg    res_digits_data_V_as_we0;
reg   [3:0] res_digits_data_V_as_1_address0;
reg    res_digits_data_V_as_1_ce0;
reg    res_digits_data_V_as_1_we0;
reg   [3:0] p_cross_mul_digits_da_address0;
reg    p_cross_mul_digits_da_ce0;
reg    p_cross_mul_digits_da_we0;
wire    grp_karastuba_mul_templa_2_fu_476_ap_start;
wire    grp_karastuba_mul_templa_2_fu_476_ap_idle;
wire   [2:0] grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_address0;
wire    grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_ce0;
wire   [2:0] grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_address0;
wire    grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_ce0;
wire   [2:0] grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_address0;
wire    grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_ce0;
wire   [2:0] grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_address0;
wire    grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_ce0;
wire   [3:0] grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_address0;
wire    grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_ce0;
wire    grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_we0;
wire   [63:0] grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_d0;
wire   [3:0] grp_karastuba_mul_templa_2_fu_476_ap_return;
wire    grp_mul_I_O_fu_485_ap_start;
wire    grp_mul_I_O_fu_485_ap_idle;
wire   [2:0] grp_mul_I_O_fu_485_u_digits_data_V_address0;
wire    grp_mul_I_O_fu_485_u_digits_data_V_ce0;
wire   [2:0] grp_mul_I_O_fu_485_v_digits_data_V_address0;
wire    grp_mul_I_O_fu_485_v_digits_data_V_ce0;
wire   [3:0] grp_mul_I_O_fu_485_w_digits_data_V_address0;
wire    grp_mul_I_O_fu_485_w_digits_data_V_ce0;
wire    grp_mul_I_O_fu_485_w_digits_data_V_we0;
wire   [63:0] grp_mul_I_O_fu_485_w_digits_data_V_d0;
wire    grp_mul_I_O_fu_496_ap_start;
wire    grp_mul_I_O_fu_496_ap_idle;
wire   [2:0] grp_mul_I_O_fu_496_u_digits_data_V_address0;
wire    grp_mul_I_O_fu_496_u_digits_data_V_ce0;
wire   [2:0] grp_mul_I_O_fu_496_v_digits_data_V_address0;
wire    grp_mul_I_O_fu_496_v_digits_data_V_ce0;
wire   [3:0] grp_mul_I_O_fu_496_w_digits_data_V_address0;
wire    grp_mul_I_O_fu_496_w_digits_data_V_ce0;
wire    grp_mul_I_O_fu_496_w_digits_data_V_we0;
wire   [63:0] grp_mul_I_O_fu_496_w_digits_data_V_d0;
reg   [3:0] ap_phi_mux_i1_0_i_phi_fu_412_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_i3_0_i_phi_fu_435_p4;
wire    ap_block_pp3_stage0;
reg    grp_karastuba_mul_templa_2_fu_476_ap_start_reg;
wire    ap_CS_fsm_state17;
reg    grp_mul_I_O_fu_485_ap_start_reg;
reg    grp_mul_I_O_fu_496_ap_start_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln270_fu_565_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln280_fu_611_p1;
wire    ap_block_pp4_stage0;
wire    ap_block_pp5_stage0;
wire    ap_block_pp6_stage0;
wire   [3:0] xor_ln270_fu_554_p2;
wire   [3:0] xor_ln280_fu_600_p2;
wire    ap_CS_fsm_state30;
wire   [31:0] zext_ln312_fu_672_p1;
wire   [31:0] zext_ln312_1_fu_681_p1;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 grp_karastuba_mul_templa_2_fu_476_ap_start_reg = 1'b0;
#0 grp_mul_I_O_fu_485_ap_start_reg = 1'b0;
#0 grp_mul_I_O_fu_496_ap_start_reg = 1'b0;
end

karastuba_mul_temcud #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
lhs0_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lhs0_digits_data_V_address0),
    .ce0(lhs0_digits_data_V_ce0),
    .we0(lhs0_digits_data_V_we0),
    .d0(lhs_digits_data_V_q0),
    .q0(lhs0_digits_data_V_q0)
);

karastuba_mul_temcud #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
lhs1_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lhs1_digits_data_V_address0),
    .ce0(lhs1_digits_data_V_ce0),
    .we0(lhs1_digits_data_V_we0),
    .d0(lhs_digits_data_V_q0),
    .q0(lhs1_digits_data_V_q0)
);

karastuba_mul_temcud #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
rhs0_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rhs0_digits_data_V_address0),
    .ce0(rhs0_digits_data_V_ce0),
    .we0(rhs0_digits_data_V_we0),
    .d0(rhs_digits_data_V_q0),
    .q0(rhs0_digits_data_V_q0)
);

karastuba_mul_temcud #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
rhs1_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rhs1_digits_data_V_address0),
    .ce0(rhs1_digits_data_V_ce0),
    .we0(rhs1_digits_data_V_we0),
    .d0(rhs_digits_data_V_q0),
    .q0(rhs1_digits_data_V_q0)
);

karastuba_mul_temcud #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
lhs0_tmp_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lhs0_tmp_digits_data_address0),
    .ce0(lhs0_tmp_digits_data_ce0),
    .we0(lhs0_tmp_digits_data_we0),
    .d0(lhs_digits_data_V_q0),
    .q0(lhs0_tmp_digits_data_q0)
);

karastuba_mul_temcud #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
lhs1_tmp_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lhs1_tmp_digits_data_address0),
    .ce0(lhs1_tmp_digits_data_ce0),
    .we0(lhs1_tmp_digits_data_we0),
    .d0(lhs_digits_data_V_q0),
    .q0(lhs1_tmp_digits_data_q0)
);

karastuba_mul_temcud #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
rhs0_tmp_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rhs0_tmp_digits_data_address0),
    .ce0(rhs0_tmp_digits_data_ce0),
    .we0(rhs0_tmp_digits_data_we0),
    .d0(rhs_digits_data_V_q0),
    .q0(rhs0_tmp_digits_data_q0)
);

karastuba_mul_temcud #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
rhs1_tmp_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rhs1_tmp_digits_data_address0),
    .ce0(rhs1_tmp_digits_data_ce0),
    .we0(rhs1_tmp_digits_data_we0),
    .d0(rhs_digits_data_V_q0),
    .q0(rhs1_tmp_digits_data_q0)
);

karastuba_mul_MULmb6 #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
res_digits_data_V_as_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(res_digits_data_V_as_address0),
    .ce0(res_digits_data_V_as_ce0),
    .we0(res_digits_data_V_as_we0),
    .d0(grp_mul_I_O_fu_485_w_digits_data_V_d0),
    .q0(res_digits_data_V_as_q0)
);

karastuba_mul_MULmb6 #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
res_digits_data_V_as_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(res_digits_data_V_as_1_address0),
    .ce0(res_digits_data_V_as_1_ce0),
    .we0(res_digits_data_V_as_1_we0),
    .d0(grp_mul_I_O_fu_496_w_digits_data_V_d0),
    .q0(res_digits_data_V_as_1_q0)
);

karastuba_mul_MULmb6 #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_cross_mul_digits_da_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_cross_mul_digits_da_address0),
    .ce0(p_cross_mul_digits_da_ce0),
    .we0(p_cross_mul_digits_da_we0),
    .d0(grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_d0),
    .q0(p_cross_mul_digits_da_q0)
);

karastuba_mul_templa_2 grp_karastuba_mul_templa_2_fu_476(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_karastuba_mul_templa_2_fu_476_ap_start),
    .ap_done(grp_karastuba_mul_templa_2_fu_476_ap_done),
    .ap_idle(grp_karastuba_mul_templa_2_fu_476_ap_idle),
    .ap_ready(grp_karastuba_mul_templa_2_fu_476_ap_ready),
    .lhs0_tmp_digits_data_V_address0(grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_address0),
    .lhs0_tmp_digits_data_V_ce0(grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_ce0),
    .lhs0_tmp_digits_data_V_q0(lhs0_tmp_digits_data_q0),
    .lhs1_tmp_digits_data_V_address0(grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_address0),
    .lhs1_tmp_digits_data_V_ce0(grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_ce0),
    .lhs1_tmp_digits_data_V_q0(lhs1_tmp_digits_data_q0),
    .rhs0_tmp_digits_data_V_address0(grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_address0),
    .rhs0_tmp_digits_data_V_ce0(grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_ce0),
    .rhs0_tmp_digits_data_V_q0(rhs0_tmp_digits_data_q0),
    .rhs1_tmp_digits_data_V_address0(grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_address0),
    .rhs1_tmp_digits_data_V_ce0(grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_ce0),
    .rhs1_tmp_digits_data_V_q0(rhs1_tmp_digits_data_q0),
    .cross_mul_digits_data_V_address0(grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_address0),
    .cross_mul_digits_data_V_ce0(grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_ce0),
    .cross_mul_digits_data_V_we0(grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_we0),
    .cross_mul_digits_data_V_d0(grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_d0),
    .cross_mul_digits_data_V_q0(p_cross_mul_digits_da_q0),
    .ap_return(grp_karastuba_mul_templa_2_fu_476_ap_return)
);

mul_I_O grp_mul_I_O_fu_485(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mul_I_O_fu_485_ap_start),
    .ap_done(grp_mul_I_O_fu_485_ap_done),
    .ap_idle(grp_mul_I_O_fu_485_ap_idle),
    .ap_ready(grp_mul_I_O_fu_485_ap_ready),
    .u_tmp_bits_read(2'd0),
    .u_digits_data_V_address0(grp_mul_I_O_fu_485_u_digits_data_V_address0),
    .u_digits_data_V_ce0(grp_mul_I_O_fu_485_u_digits_data_V_ce0),
    .u_digits_data_V_q0(lhs0_digits_data_V_q0),
    .v_tmp_bits_read(2'd0),
    .v_digits_data_V_address0(grp_mul_I_O_fu_485_v_digits_data_V_address0),
    .v_digits_data_V_ce0(grp_mul_I_O_fu_485_v_digits_data_V_ce0),
    .v_digits_data_V_q0(rhs0_digits_data_V_q0),
    .w_digits_data_V_address0(grp_mul_I_O_fu_485_w_digits_data_V_address0),
    .w_digits_data_V_ce0(grp_mul_I_O_fu_485_w_digits_data_V_ce0),
    .w_digits_data_V_we0(grp_mul_I_O_fu_485_w_digits_data_V_we0),
    .w_digits_data_V_d0(grp_mul_I_O_fu_485_w_digits_data_V_d0),
    .w_digits_data_V_q0(res_digits_data_V_as_q0),
    .ap_return(grp_mul_I_O_fu_485_ap_return)
);

mul_I_O grp_mul_I_O_fu_496(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mul_I_O_fu_496_ap_start),
    .ap_done(grp_mul_I_O_fu_496_ap_done),
    .ap_idle(grp_mul_I_O_fu_496_ap_idle),
    .ap_ready(grp_mul_I_O_fu_496_ap_ready),
    .u_tmp_bits_read(2'd0),
    .u_digits_data_V_address0(grp_mul_I_O_fu_496_u_digits_data_V_address0),
    .u_digits_data_V_ce0(grp_mul_I_O_fu_496_u_digits_data_V_ce0),
    .u_digits_data_V_q0(lhs1_digits_data_V_q0),
    .v_tmp_bits_read(2'd0),
    .v_digits_data_V_address0(grp_mul_I_O_fu_496_v_digits_data_V_address0),
    .v_digits_data_V_ce0(grp_mul_I_O_fu_496_v_digits_data_V_ce0),
    .v_digits_data_V_q0(rhs1_digits_data_V_q0),
    .w_digits_data_V_address0(grp_mul_I_O_fu_496_w_digits_data_V_address0),
    .w_digits_data_V_ce0(grp_mul_I_O_fu_496_w_digits_data_V_ce0),
    .w_digits_data_V_we0(grp_mul_I_O_fu_496_w_digits_data_V_we0),
    .w_digits_data_V_d0(grp_mul_I_O_fu_496_w_digits_data_V_d0),
    .w_digits_data_V_q0(res_digits_data_V_as_1_q0),
    .ap_return(grp_mul_I_O_fu_496_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state6)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state10)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state14)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state19)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state23)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_condition_pp6_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state27)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state27);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_karastuba_mul_templa_2_fu_476_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_karastuba_mul_templa_2_fu_476_ap_start_reg <= 1'b1;
        end else if ((grp_karastuba_mul_templa_2_fu_476_ap_ready == 1'b1)) begin
            grp_karastuba_mul_templa_2_fu_476_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mul_I_O_fu_485_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_mul_I_O_fu_485_ap_start_reg <= 1'b1;
        end else if ((grp_mul_I_O_fu_485_ap_ready == 1'b1)) begin
            grp_mul_I_O_fu_485_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mul_I_O_fu_496_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_mul_I_O_fu_496_ap_start_reg <= 1'b1;
        end else if ((grp_mul_I_O_fu_496_ap_ready == 1'b1)) begin
            grp_mul_I_O_fu_496_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_0_i_reg_408 <= 4'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln267_reg_736 == 1'd0))) begin
        i1_0_i_reg_408 <= i_5_reg_740;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i2_0_i_reg_420 <= 4'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln272_fu_571_p2 == 1'd0))) begin
        i2_0_i_reg_420 <= i_6_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i3_0_i_reg_431 <= 4'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln277_reg_776 == 1'd0))) begin
        i3_0_i_reg_431 <= i_7_reg_780;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln294_fu_621_p2 == 1'd0))) begin
        i4_0_i_reg_443 <= i_8_fu_627_p2;
    end else if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
        i4_0_i_reg_443 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i5_0_i_reg_454 <= 5'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln300_fu_638_p2 == 1'd0))) begin
        i5_0_i_reg_454 <= i_9_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i6_0_i_reg_465 <= 5'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln306_fu_655_p2 == 1'd0))) begin
        i6_0_i_reg_465 <= i_10_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln262_fu_525_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_i_reg_397 <= i_fu_531_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_397 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_5_reg_740 <= i_5_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_7_reg_780 <= i_7_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln262_reg_715 <= icmp_ln262_fu_525_p2;
        icmp_ln262_reg_715_pp0_iter1_reg <= icmp_ln262_reg_715;
        zext_ln265_reg_724_pp0_iter1_reg[3 : 0] <= zext_ln265_reg_724[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln267_reg_736 <= icmp_ln267_fu_542_p2;
        icmp_ln267_reg_736_pp1_iter1_reg <= icmp_ln267_reg_736;
        zext_ln270_1_reg_745_pp1_iter1_reg[3 : 0] <= zext_ln270_1_reg_745[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln272_reg_755 <= icmp_ln272_fu_571_p2;
        icmp_ln272_reg_755_pp2_iter1_reg <= icmp_ln272_reg_755;
        zext_ln275_reg_764_pp2_iter1_reg[3 : 0] <= zext_ln275_reg_764[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln277_reg_776 <= icmp_ln277_fu_588_p2;
        icmp_ln277_reg_776_pp3_iter1_reg <= icmp_ln277_reg_776;
        zext_ln280_1_reg_785_pp3_iter1_reg[3 : 0] <= zext_ln280_1_reg_785[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln294_reg_810 <= icmp_ln294_fu_621_p2;
        icmp_ln294_reg_810_pp4_iter1_reg <= icmp_ln294_reg_810;
        zext_ln297_reg_819_pp4_iter1_reg[4 : 0] <= zext_ln297_reg_819[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln300_reg_834 <= icmp_ln300_fu_638_p2;
        icmp_ln300_reg_834_pp5_iter1_reg <= icmp_ln300_reg_834;
        zext_ln303_reg_843_pp5_iter1_reg[4 : 0] <= zext_ln303_reg_843[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln306_reg_858 <= icmp_ln306_fu_655_p2;
        icmp_ln306_reg_858_pp6_iter1_reg <= icmp_ln306_reg_858;
        zext_ln309_reg_867_pp6_iter1_reg[4 : 0] <= zext_ln309_reg_867[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln306_reg_858 == 1'd0))) begin
        p_cross_mul_digits_da_2_reg_877 <= p_cross_mul_digits_da_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
        p_cross_mul_tmp_bits_reg_805[3 : 0] <= p_cross_mul_tmp_bits_fu_617_p1[3 : 0];
        z0_tmp_bits_i_reg_795 <= grp_mul_I_O_fu_485_ap_return;
        z2_tmp_bits_i_reg_800 <= grp_mul_I_O_fu_496_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_cast_i_reg_705[1 : 0] <= p_read1_cast_i_fu_517_p1[1 : 0];
        p_read_cast_i_reg_710[1 : 0] <= p_read_cast_i_fu_521_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln267_reg_736 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln262_reg_715 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_507 <= lhs_digits_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln277_reg_776 == 1'd0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln272_reg_755 == 1'd0)))) begin
        reg_512 <= rhs_digits_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln294_reg_810 == 1'd0))) begin
        res_digits_data_V_as_3_reg_829 <= res_digits_data_V_as_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln300_reg_834 == 1'd0))) begin
        res_digits_data_V_as_5_reg_853 <= res_digits_data_V_as_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln262_fu_525_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln265_reg_724[3 : 0] <= zext_ln265_fu_537_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln267_fu_542_p2 == 1'd0))) begin
        zext_ln270_1_reg_745[3 : 0] <= zext_ln270_1_fu_560_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln272_fu_571_p2 == 1'd0))) begin
        zext_ln275_reg_764[3 : 0] <= zext_ln275_fu_583_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln277_fu_588_p2 == 1'd0))) begin
        zext_ln280_1_reg_785[3 : 0] <= zext_ln280_1_fu_606_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln294_fu_621_p2 == 1'd0))) begin
        zext_ln297_reg_819[4 : 0] <= zext_ln297_fu_633_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln300_fu_638_p2 == 1'd0))) begin
        zext_ln303_reg_843[4 : 0] <= zext_ln303_fu_650_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln306_fu_655_p2 == 1'd0))) begin
        zext_ln309_reg_867[4 : 0] <= zext_ln309_fu_667_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln262_fu_525_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln267_fu_542_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln272_fu_571_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln277_fu_588_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln294_fu_621_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln300_fu_638_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln306_fu_655_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln267_reg_736 == 1'd0))) begin
        ap_phi_mux_i1_0_i_phi_fu_412_p4 = i_5_reg_740;
    end else begin
        ap_phi_mux_i1_0_i_phi_fu_412_p4 = i1_0_i_reg_408;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln277_reg_776 == 1'd0))) begin
        ap_phi_mux_i3_0_i_phi_fu_435_p4 = i_7_reg_780;
    end else begin
        ap_phi_mux_i3_0_i_phi_fu_435_p4 = i3_0_i_reg_431;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        cross_mul_digits_dat_ce0 = 1'b1;
    end else begin
        cross_mul_digits_dat_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1) & (icmp_ln306_reg_858_pp6_iter1_reg == 1'd0))) begin
        cross_mul_digits_dat_we0 = 1'b1;
    end else begin
        cross_mul_digits_dat_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        inter_lhs_digits_dat_address0 = zext_ln270_1_reg_745_pp1_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inter_lhs_digits_dat_address0 = zext_ln265_reg_724_pp0_iter1_reg;
    end else begin
        inter_lhs_digits_dat_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        inter_lhs_digits_dat_ce0 = 1'b1;
    end else begin
        inter_lhs_digits_dat_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln267_reg_736_pp1_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln262_reg_715_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        inter_lhs_digits_dat_we0 = 1'b1;
    end else begin
        inter_lhs_digits_dat_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        inter_rhs_digits_dat_address0 = zext_ln280_1_reg_785_pp3_iter1_reg;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        inter_rhs_digits_dat_address0 = zext_ln275_reg_764_pp2_iter1_reg;
    end else begin
        inter_rhs_digits_dat_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        inter_rhs_digits_dat_ce0 = 1'b1;
    end else begin
        inter_rhs_digits_dat_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln277_reg_776_pp3_iter1_reg == 1'd0)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln272_reg_755_pp2_iter1_reg == 1'd0)))) begin
        inter_rhs_digits_dat_we0 = 1'b1;
    end else begin
        inter_rhs_digits_dat_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs0_digits_data_V_address0 = zext_ln265_reg_724;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        lhs0_digits_data_V_address0 = grp_mul_I_O_fu_485_u_digits_data_V_address0;
    end else begin
        lhs0_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lhs0_digits_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        lhs0_digits_data_V_ce0 = grp_mul_I_O_fu_485_u_digits_data_V_ce0;
    end else begin
        lhs0_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln262_reg_715 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lhs0_digits_data_V_we0 = 1'b1;
    end else begin
        lhs0_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs0_tmp_digits_data_address0 = zext_ln265_reg_724;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        lhs0_tmp_digits_data_address0 = grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_address0;
    end else begin
        lhs0_tmp_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lhs0_tmp_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        lhs0_tmp_digits_data_ce0 = grp_karastuba_mul_templa_2_fu_476_lhs0_tmp_digits_data_V_ce0;
    end else begin
        lhs0_tmp_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln262_reg_715 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lhs0_tmp_digits_data_we0 = 1'b1;
    end else begin
        lhs0_tmp_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        lhs1_digits_data_V_address0 = zext_ln270_fu_565_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        lhs1_digits_data_V_address0 = grp_mul_I_O_fu_496_u_digits_data_V_address0;
    end else begin
        lhs1_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        lhs1_digits_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        lhs1_digits_data_V_ce0 = grp_mul_I_O_fu_496_u_digits_data_V_ce0;
    end else begin
        lhs1_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln267_reg_736 == 1'd0))) begin
        lhs1_digits_data_V_we0 = 1'b1;
    end else begin
        lhs1_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        lhs1_tmp_digits_data_address0 = zext_ln270_fu_565_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        lhs1_tmp_digits_data_address0 = grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_address0;
    end else begin
        lhs1_tmp_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        lhs1_tmp_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        lhs1_tmp_digits_data_ce0 = grp_karastuba_mul_templa_2_fu_476_lhs1_tmp_digits_data_V_ce0;
    end else begin
        lhs1_tmp_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln267_reg_736 == 1'd0))) begin
        lhs1_tmp_digits_data_we0 = 1'b1;
    end else begin
        lhs1_tmp_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        lhs_digits_data_V_address0 = zext_ln270_1_fu_560_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_digits_data_V_address0 = zext_ln265_fu_537_p1;
    end else begin
        lhs_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lhs_digits_data_V_ce0 = 1'b1;
    end else begin
        lhs_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        p_cross_mul_digits_da_address0 = zext_ln309_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        p_cross_mul_digits_da_address0 = grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_address0;
    end else begin
        p_cross_mul_digits_da_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        p_cross_mul_digits_da_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        p_cross_mul_digits_da_ce0 = grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_ce0;
    end else begin
        p_cross_mul_digits_da_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_cross_mul_digits_da_we0 = grp_karastuba_mul_templa_2_fu_476_cross_mul_digits_data_V_we0;
    end else begin
        p_cross_mul_digits_da_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        res_digits_data_V_as_1_address0 = zext_ln303_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        res_digits_data_V_as_1_address0 = grp_mul_I_O_fu_496_w_digits_data_V_address0;
    end else begin
        res_digits_data_V_as_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        res_digits_data_V_as_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        res_digits_data_V_as_1_ce0 = grp_mul_I_O_fu_496_w_digits_data_V_ce0;
    end else begin
        res_digits_data_V_as_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        res_digits_data_V_as_1_we0 = grp_mul_I_O_fu_496_w_digits_data_V_we0;
    end else begin
        res_digits_data_V_as_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        res_digits_data_V_as_address0 = zext_ln297_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        res_digits_data_V_as_address0 = grp_mul_I_O_fu_485_w_digits_data_V_address0;
    end else begin
        res_digits_data_V_as_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        res_digits_data_V_as_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        res_digits_data_V_as_ce0 = grp_mul_I_O_fu_485_w_digits_data_V_ce0;
    end else begin
        res_digits_data_V_as_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        res_digits_data_V_as_we0 = grp_mul_I_O_fu_485_w_digits_data_V_we0;
    end else begin
        res_digits_data_V_as_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        rhs0_digits_data_V_address0 = zext_ln275_reg_764;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        rhs0_digits_data_V_address0 = grp_mul_I_O_fu_485_v_digits_data_V_address0;
    end else begin
        rhs0_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        rhs0_digits_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        rhs0_digits_data_V_ce0 = grp_mul_I_O_fu_485_v_digits_data_V_ce0;
    end else begin
        rhs0_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln272_reg_755 == 1'd0))) begin
        rhs0_digits_data_V_we0 = 1'b1;
    end else begin
        rhs0_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        rhs0_tmp_digits_data_address0 = zext_ln275_reg_764;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        rhs0_tmp_digits_data_address0 = grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_address0;
    end else begin
        rhs0_tmp_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        rhs0_tmp_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        rhs0_tmp_digits_data_ce0 = grp_karastuba_mul_templa_2_fu_476_rhs0_tmp_digits_data_V_ce0;
    end else begin
        rhs0_tmp_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln272_reg_755 == 1'd0))) begin
        rhs0_tmp_digits_data_we0 = 1'b1;
    end else begin
        rhs0_tmp_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        rhs1_digits_data_V_address0 = zext_ln280_fu_611_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        rhs1_digits_data_V_address0 = grp_mul_I_O_fu_496_v_digits_data_V_address0;
    end else begin
        rhs1_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        rhs1_digits_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        rhs1_digits_data_V_ce0 = grp_mul_I_O_fu_496_v_digits_data_V_ce0;
    end else begin
        rhs1_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln277_reg_776 == 1'd0))) begin
        rhs1_digits_data_V_we0 = 1'b1;
    end else begin
        rhs1_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        rhs1_tmp_digits_data_address0 = zext_ln280_fu_611_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        rhs1_tmp_digits_data_address0 = grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_address0;
    end else begin
        rhs1_tmp_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        rhs1_tmp_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        rhs1_tmp_digits_data_ce0 = grp_karastuba_mul_templa_2_fu_476_rhs1_tmp_digits_data_V_ce0;
    end else begin
        rhs1_tmp_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln277_reg_776 == 1'd0))) begin
        rhs1_tmp_digits_data_we0 = 1'b1;
    end else begin
        rhs1_tmp_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        rhs_digits_data_V_address0 = zext_ln280_1_fu_606_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        rhs_digits_data_V_address0 = zext_ln275_fu_583_p1;
    end else begin
        rhs_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        rhs_digits_data_V_ce0 = 1'b1;
    end else begin
        rhs_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        z0_digits_data_V_ce0 = 1'b1;
    end else begin
        z0_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln294_reg_810_pp4_iter1_reg == 1'd0))) begin
        z0_digits_data_V_we0 = 1'b1;
    end else begin
        z0_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        z2_digits_data_V_ce0 = 1'b1;
    end else begin
        z2_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1) & (icmp_ln300_reg_834_pp5_iter1_reg == 1'd0))) begin
        z2_digits_data_V_we0 = 1'b1;
    end else begin
        z2_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln262_fu_525_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln262_fu_525_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln267_fu_542_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln267_fu_542_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln272_fu_571_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln272_fu_571_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln277_fu_588_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln277_fu_588_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln294_fu_621_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln294_fu_621_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln300_fu_638_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln300_fu_638_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (icmp_ln306_fu_655_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (icmp_ln306_fu_655_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_on_subcall_done = ((grp_karastuba_mul_templa_2_fu_476_ap_done == 1'b0) | (grp_mul_I_O_fu_496_ap_done == 1'b0) | (grp_mul_I_O_fu_485_ap_done == 1'b0));
end

assign ap_block_state19_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_return_0 = zext_ln312_fu_672_p1;

assign ap_return_1 = zext_ln312_1_fu_681_p1;

assign ap_return_2 = p_cross_mul_tmp_bits_reg_805;

assign ap_return_3 = p_read_cast_i_reg_710;

assign ap_return_4 = p_read1_cast_i_reg_705;

assign cross_mul_digits_dat_address0 = zext_ln309_reg_867_pp6_iter1_reg;

assign cross_mul_digits_dat_d0 = p_cross_mul_digits_da_2_reg_877;

assign grp_karastuba_mul_templa_2_fu_476_ap_start = grp_karastuba_mul_templa_2_fu_476_ap_start_reg;

assign grp_mul_I_O_fu_485_ap_start = grp_mul_I_O_fu_485_ap_start_reg;

assign grp_mul_I_O_fu_496_ap_start = grp_mul_I_O_fu_496_ap_start_reg;

assign i_10_fu_661_p2 = (i6_0_i_reg_465 + 5'd1);

assign i_5_fu_548_p2 = (ap_phi_mux_i1_0_i_phi_fu_412_p4 + 4'd1);

assign i_6_fu_577_p2 = (i2_0_i_reg_420 + 4'd1);

assign i_7_fu_594_p2 = (ap_phi_mux_i3_0_i_phi_fu_435_p4 + 4'd1);

assign i_8_fu_627_p2 = (i4_0_i_reg_443 + 5'd1);

assign i_9_fu_644_p2 = (i5_0_i_reg_454 + 5'd1);

assign i_fu_531_p2 = (i_0_i_reg_397 + 4'd1);

assign icmp_ln262_fu_525_p2 = ((i_0_i_reg_397 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_542_p2 = ((ap_phi_mux_i1_0_i_phi_fu_412_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_571_p2 = ((i2_0_i_reg_420 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln277_fu_588_p2 = ((ap_phi_mux_i3_0_i_phi_fu_435_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln294_fu_621_p2 = ((i4_0_i_reg_443 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln300_fu_638_p2 = ((i5_0_i_reg_454 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_655_p2 = ((i6_0_i_reg_465 == 5'd16) ? 1'b1 : 1'b0);

assign inter_lhs_digits_dat_d0 = reg_507;

assign inter_rhs_digits_dat_d0 = reg_512;

assign p_cross_mul_tmp_bits_fu_617_p1 = grp_karastuba_mul_templa_2_fu_476_ap_return;

assign p_read1_cast_i_fu_517_p1 = rhs_tmp_bits_read;

assign p_read_cast_i_fu_521_p1 = lhs_tmp_bits_read;

assign xor_ln270_fu_554_p2 = (ap_phi_mux_i1_0_i_phi_fu_412_p4 ^ 4'd8);

assign xor_ln280_fu_600_p2 = (ap_phi_mux_i3_0_i_phi_fu_435_p4 ^ 4'd8);

assign z0_digits_data_V_address0 = zext_ln297_reg_819_pp4_iter1_reg;

assign z0_digits_data_V_d0 = res_digits_data_V_as_3_reg_829;

assign z2_digits_data_V_address0 = zext_ln303_reg_843_pp5_iter1_reg;

assign z2_digits_data_V_d0 = res_digits_data_V_as_5_reg_853;

assign zext_ln265_fu_537_p1 = i_0_i_reg_397;

assign zext_ln270_1_fu_560_p1 = xor_ln270_fu_554_p2;

assign zext_ln270_fu_565_p1 = i1_0_i_reg_408;

assign zext_ln275_fu_583_p1 = i2_0_i_reg_420;

assign zext_ln280_1_fu_606_p1 = xor_ln280_fu_600_p2;

assign zext_ln280_fu_611_p1 = i3_0_i_reg_431;

assign zext_ln297_fu_633_p1 = i4_0_i_reg_443;

assign zext_ln303_fu_650_p1 = i5_0_i_reg_454;

assign zext_ln309_fu_667_p1 = i6_0_i_reg_465;

assign zext_ln312_1_fu_681_p1 = z2_tmp_bits_i_reg_800;

assign zext_ln312_fu_672_p1 = z0_tmp_bits_i_reg_795;

always @ (posedge ap_clk) begin
    p_read1_cast_i_reg_705[31:2] <= 30'b000000000000000000000000000000;
    p_read_cast_i_reg_710[31:2] <= 30'b000000000000000000000000000000;
    zext_ln265_reg_724[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln265_reg_724_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln270_1_reg_745[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln270_1_reg_745_pp1_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln275_reg_764[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln275_reg_764_pp2_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln280_1_reg_785[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln280_1_reg_785_pp3_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cross_mul_tmp_bits_reg_805[31:4] <= 28'b0000000000000000000000000000;
    zext_ln297_reg_819[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln297_reg_819_pp4_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln303_reg_843[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln303_reg_843_pp5_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln309_reg_867[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln309_reg_867_pp6_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //karastuba_mul_MUL_st_2
