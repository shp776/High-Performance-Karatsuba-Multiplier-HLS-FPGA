// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module karastuba_mul_ADD_SU (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        z0_tmp_bits_read,
        z0_digits_data_V_address0,
        z0_digits_data_V_ce0,
        z0_digits_data_V_q0,
        z2_tmp_bits_read,
        z2_digits_data_V_address0,
        z2_digits_data_V_ce0,
        z2_digits_data_V_q0,
        cross_mul_tmp_bits_read,
        cross_mul_digits_data_V_address0,
        cross_mul_digits_data_V_ce0,
        cross_mul_digits_data_V_q0,
        res_digits_data_V_address0,
        res_digits_data_V_ce0,
        res_digits_data_V_we0,
        res_digits_data_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_pp0_stage1 = 9'd4;
parameter    ap_ST_fsm_state6 = 9'd8;
parameter    ap_ST_fsm_pp1_stage0 = 9'd16;
parameter    ap_ST_fsm_state12 = 9'd32;
parameter    ap_ST_fsm_state13 = 9'd64;
parameter    ap_ST_fsm_pp2_stage0 = 9'd128;
parameter    ap_ST_fsm_state17 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] z0_tmp_bits_read;
output  [5:0] z0_digits_data_V_address0;
output   z0_digits_data_V_ce0;
input  [63:0] z0_digits_data_V_q0;
input  [31:0] z2_tmp_bits_read;
output  [5:0] z2_digits_data_V_address0;
output   z2_digits_data_V_ce0;
input  [63:0] z2_digits_data_V_q0;
input  [31:0] cross_mul_tmp_bits_read;
output  [5:0] cross_mul_digits_data_V_address0;
output   cross_mul_digits_data_V_ce0;
input  [63:0] cross_mul_digits_data_V_q0;
output  [6:0] res_digits_data_V_address0;
output   res_digits_data_V_ce0;
output   res_digits_data_V_we0;
output  [63:0] res_digits_data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] z0_digits_data_V_address0;
reg z0_digits_data_V_ce0;
reg[5:0] z2_digits_data_V_address0;
reg z2_digits_data_V_ce0;
reg cross_mul_digits_data_V_ce0;
reg res_digits_data_V_ce0;
reg res_digits_data_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] p_088_0_i_reg_203;
reg   [6:0] i_0_i_reg_215;
reg   [0:0] op2_assign_reg_226;
reg   [6:0] i_0_i11_reg_238;
reg   [7:0] i5_0_reg_249;
reg    ap_block_state1;
wire   [0:0] icmp_ln54_fu_271_p2;
reg   [0:0] icmp_ln54_reg_471;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln54_reg_471_pp0_iter1_reg;
wire   [6:0] i_fu_277_p2;
reg   [6:0] i_reg_475;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln59_fu_283_p1;
reg   [63:0] zext_ln59_reg_480;
reg   [63:0] zext_ln59_reg_480_pp0_iter1_reg;
reg   [63:0] z0_digits_data_V_loa_reg_495;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] z2_digits_data_V_loa_reg_501;
wire   [64:0] add_ln700_fu_300_p2;
reg   [64:0] add_ln700_reg_507;
wire   [63:0] add_ln209_5_fu_311_p2;
reg   [63:0] add_ln209_5_reg_512;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] add2_tmp_bits_fu_347_p2;
reg   [31:0] add2_tmp_bits_reg_522;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_i_fu_352_p2;
reg   [0:0] exitcond_i_reg_527;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_i_reg_527_pp1_iter1_reg;
reg   [0:0] exitcond_i_reg_527_pp1_iter2_reg;
reg   [0:0] exitcond_i_reg_527_pp1_iter3_reg;
wire   [6:0] i_31_fu_358_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln81_fu_364_p1;
reg   [63:0] zext_ln81_reg_536;
reg   [63:0] zext_ln81_reg_536_pp1_iter1_reg;
reg   [63:0] zext_ln81_reg_536_pp1_iter2_reg;
reg   [63:0] zext_ln81_reg_536_pp1_iter3_reg;
reg   [63:0] cross_mul_digits_dat_5_reg_551;
wire   [63:0] add2_digits_data_V_q0;
reg   [63:0] add2_digits_data_V_l_reg_556;
reg    ap_enable_reg_pp1_iter1;
wire   [64:0] tmp_V_25_fu_376_p2;
reg   [64:0] tmp_V_25_reg_561;
reg   [0:0] tmp_reg_567;
reg    ap_enable_reg_pp1_iter3;
wire   [63:0] add_ln700_15_fu_414_p2;
reg   [63:0] add_ln700_15_reg_572;
wire   [31:0] z1_tmp_bits_fu_433_p2;
reg   [31:0] z1_tmp_bits_reg_577;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln364_fu_439_p2;
reg   [0:0] icmp_ln364_reg_582;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state14_pp2_stage0_iter0;
wire    ap_block_state15_pp2_stage0_iter1;
wire    ap_block_state16_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln364_reg_582_pp2_iter1_reg;
wire   [7:0] i_32_fu_445_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] zext_ln367_fu_451_p1;
reg   [63:0] zext_ln367_reg_591;
reg   [63:0] zext_ln367_reg_591_pp2_iter1_reg;
wire   [63:0] p_res_digits_data_V_q0;
reg   [63:0] p_res_digits_data_V_l_reg_601;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_CS_fsm_state13;
wire    grp_CAT_I_I_I_O_fu_260_ap_ready;
wire    grp_CAT_I_I_I_O_fu_260_ap_done;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state14;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg   [5:0] add2_digits_data_V_address0;
reg    add2_digits_data_V_ce0;
reg    add2_digits_data_V_we0;
reg   [5:0] z1_digits_data_V_address0;
reg    z1_digits_data_V_ce0;
reg    z1_digits_data_V_we0;
wire   [63:0] z1_digits_data_V_q0;
reg   [6:0] p_res_digits_data_V_address0;
reg    p_res_digits_data_V_ce0;
reg    p_res_digits_data_V_we0;
wire    grp_CAT_I_I_I_O_fu_260_ap_start;
wire    grp_CAT_I_I_I_O_fu_260_ap_idle;
wire   [5:0] grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_address0;
wire    grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_ce0;
wire   [5:0] grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_address0;
wire    grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_ce0;
wire   [5:0] grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_address0;
wire    grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_ce0;
wire   [6:0] grp_CAT_I_I_I_O_fu_260_w_digits_data_V_address0;
wire    grp_CAT_I_I_I_O_fu_260_w_digits_data_V_ce0;
wire    grp_CAT_I_I_I_O_fu_260_w_digits_data_V_we0;
wire   [63:0] grp_CAT_I_I_I_O_fu_260_w_digits_data_V_d0;
reg   [6:0] ap_phi_mux_i_0_i_phi_fu_219_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_op2_assign_phi_fu_230_p4;
wire    ap_block_pp1_stage0;
reg    grp_CAT_I_I_I_O_fu_260_ap_start_reg;
wire    ap_block_pp0_stage1;
wire    ap_block_pp2_stage0;
wire   [64:0] zext_ln209_fu_293_p1;
wire   [64:0] zext_ln54_fu_289_p1;
wire   [63:0] zext_ln700_16_fu_296_p1;
wire   [63:0] add_ln209_14_fu_306_p2;
wire   [65:0] zext_ln700_17_fu_319_p1;
wire   [65:0] zext_ln700_fu_316_p1;
wire   [65:0] tmp_V_fu_322_p2;
wire   [31:0] zext_ln64_fu_338_p1;
wire   [31:0] add_ln64_fu_342_p2;
wire   [64:0] zext_ln180_fu_370_p1;
wire   [64:0] zext_ln701_fu_373_p1;
wire   [64:0] select_ln701_fu_382_p3;
wire   [64:0] tmp_V_26_fu_401_p2;
wire   [63:0] trunc_ln701_fu_398_p1;
wire   [63:0] select_ln701_3_fu_390_p3;
wire   [31:0] p_neg207_i_fu_420_p3;
wire   [31:0] add_ln96_fu_428_p2;
wire    ap_CS_fsm_state17;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 grp_CAT_I_I_I_O_fu_260_ap_start_reg = 1'b0;
end

karastuba_mul_ADDNgs #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
add2_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(add2_digits_data_V_address0),
    .ce0(add2_digits_data_V_ce0),
    .we0(add2_digits_data_V_we0),
    .d0(add_ln209_5_reg_512),
    .q0(add2_digits_data_V_q0)
);

karastuba_mul_ADDNgs #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
z1_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(z1_digits_data_V_address0),
    .ce0(z1_digits_data_V_ce0),
    .we0(z1_digits_data_V_we0),
    .d0(add_ln700_15_reg_572),
    .q0(z1_digits_data_V_q0)
);

karastuba_mul_ADD8jQ #(
    .DataWidth( 64 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
p_res_digits_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_res_digits_data_V_address0),
    .ce0(p_res_digits_data_V_ce0),
    .we0(p_res_digits_data_V_we0),
    .d0(grp_CAT_I_I_I_O_fu_260_w_digits_data_V_d0),
    .q0(p_res_digits_data_V_q0)
);

CAT_I_I_I_O grp_CAT_I_I_I_O_fu_260(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_CAT_I_I_I_O_fu_260_ap_start),
    .ap_done(grp_CAT_I_I_I_O_fu_260_ap_done),
    .ap_idle(grp_CAT_I_I_I_O_fu_260_ap_idle),
    .ap_ready(grp_CAT_I_I_I_O_fu_260_ap_ready),
    .x0_digits_data_V_address0(grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_address0),
    .x0_digits_data_V_ce0(grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_ce0),
    .x0_digits_data_V_q0(z0_digits_data_V_q0),
    .x1_tmp_bits_read(z1_tmp_bits_reg_577),
    .x1_digits_data_V_address0(grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_address0),
    .x1_digits_data_V_ce0(grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_ce0),
    .x1_digits_data_V_q0(z1_digits_data_V_q0),
    .x2_digits_data_V_address0(grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_address0),
    .x2_digits_data_V_ce0(grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_ce0),
    .x2_digits_data_V_q0(z2_digits_data_V_q0),
    .w_digits_data_V_address0(grp_CAT_I_I_I_O_fu_260_w_digits_data_V_address0),
    .w_digits_data_V_ce0(grp_CAT_I_I_I_O_fu_260_w_digits_data_V_ce0),
    .w_digits_data_V_we0(grp_CAT_I_I_I_O_fu_260_w_digits_data_V_we0),
    .w_digits_data_V_d0(grp_CAT_I_I_I_O_fu_260_w_digits_data_V_d0),
    .w_digits_data_V_q0(p_res_digits_data_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((grp_CAT_I_I_I_O_fu_260_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state14)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((grp_CAT_I_I_I_O_fu_260_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_CAT_I_I_I_O_fu_260_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_CAT_I_I_I_O_fu_260_ap_start_reg <= 1'b1;
        end else if ((grp_CAT_I_I_I_O_fu_260_ap_ready == 1'b1)) begin
            grp_CAT_I_I_I_O_fu_260_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln364_fu_439_p2 == 1'd0))) begin
        i5_0_reg_249 <= i_32_fu_445_p2;
    end else if (((grp_CAT_I_I_I_O_fu_260_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        i5_0_reg_249 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i11_reg_238 <= 7'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_fu_352_p2 == 1'd0))) begin
        i_0_i11_reg_238 <= i_31_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_215 <= 7'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_471 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_i_reg_215 <= i_reg_475;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        op2_assign_reg_226 <= 1'd0;
    end else if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_527_pp1_iter3_reg == 1'd0))) begin
        op2_assign_reg_226 <= tmp_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_088_0_i_reg_203 <= 2'd0;
    end else if (((icmp_ln54_reg_471_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        p_088_0_i_reg_203 <= {{tmp_V_fu_322_p2[65:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_527 == 1'd0))) begin
        add2_digits_data_V_l_reg_556 <= add2_digits_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add2_tmp_bits_reg_522 <= add2_tmp_bits_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_471 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln209_5_reg_512 <= add_ln209_5_fu_311_p2;
        add_ln700_reg_507 <= add_ln700_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_527_pp1_iter2_reg == 1'd0))) begin
        add_ln700_15_reg_572 <= add_ln700_15_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_527 == 1'd0))) begin
        cross_mul_digits_dat_5_reg_551 <= cross_mul_digits_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_i_reg_527 <= exitcond_i_fu_352_p2;
        exitcond_i_reg_527_pp1_iter1_reg <= exitcond_i_reg_527;
        zext_ln81_reg_536_pp1_iter1_reg[6 : 0] <= zext_ln81_reg_536[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        exitcond_i_reg_527_pp1_iter2_reg <= exitcond_i_reg_527_pp1_iter1_reg;
        exitcond_i_reg_527_pp1_iter3_reg <= exitcond_i_reg_527_pp1_iter2_reg;
        zext_ln81_reg_536_pp1_iter2_reg[6 : 0] <= zext_ln81_reg_536_pp1_iter1_reg[6 : 0];
        zext_ln81_reg_536_pp1_iter3_reg[6 : 0] <= zext_ln81_reg_536_pp1_iter2_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_475 <= i_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln364_reg_582 <= icmp_ln364_fu_439_p2;
        icmp_ln364_reg_582_pp2_iter1_reg <= icmp_ln364_reg_582;
        zext_ln367_reg_591_pp2_iter1_reg[7 : 0] <= zext_ln367_reg_591[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln54_reg_471 <= icmp_ln54_fu_271_p2;
        icmp_ln54_reg_471_pp0_iter1_reg <= icmp_ln54_reg_471;
        zext_ln59_reg_480_pp0_iter1_reg[6 : 0] <= zext_ln59_reg_480[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln364_reg_582 == 1'd0))) begin
        p_res_digits_data_V_l_reg_601 <= p_res_digits_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_527_pp1_iter1_reg == 1'd0))) begin
        tmp_V_25_reg_561 <= tmp_V_25_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_527_pp1_iter2_reg == 1'd0))) begin
        tmp_reg_567 <= tmp_V_26_fu_401_p2[32'd64];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_reg_471 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        z0_digits_data_V_loa_reg_495 <= z0_digits_data_V_q0;
        z2_digits_data_V_loa_reg_501 <= z2_digits_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        z1_tmp_bits_reg_577 <= z1_tmp_bits_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln364_fu_439_p2 == 1'd0))) begin
        zext_ln367_reg_591[7 : 0] <= zext_ln367_fu_451_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln59_reg_480[6 : 0] <= zext_ln59_fu_283_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_fu_352_p2 == 1'd0))) begin
        zext_ln81_reg_536[6 : 0] <= zext_ln81_fu_364_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add2_digits_data_V_address0 = zext_ln81_fu_364_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add2_digits_data_V_address0 = zext_ln59_reg_480_pp0_iter1_reg;
    end else begin
        add2_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        add2_digits_data_V_ce0 = 1'b1;
    end else begin
        add2_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_471_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add2_digits_data_V_we0 = 1'b1;
    end else begin
        add2_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_271_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_352_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln364_fu_439_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_471 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_i_phi_fu_219_p4 = i_reg_475;
    end else begin
        ap_phi_mux_i_0_i_phi_fu_219_p4 = i_0_i_reg_215;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (exitcond_i_reg_527_pp1_iter3_reg == 1'd0))) begin
        ap_phi_mux_op2_assign_phi_fu_230_p4 = tmp_reg_567;
    end else begin
        ap_phi_mux_op2_assign_phi_fu_230_p4 = op2_assign_reg_226;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        cross_mul_digits_data_V_ce0 = 1'b1;
    end else begin
        cross_mul_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        p_res_digits_data_V_address0 = zext_ln367_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_res_digits_data_V_address0 = grp_CAT_I_I_I_O_fu_260_w_digits_data_V_address0;
    end else begin
        p_res_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        p_res_digits_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_res_digits_data_V_ce0 = grp_CAT_I_I_I_O_fu_260_w_digits_data_V_ce0;
    end else begin
        p_res_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_res_digits_data_V_we0 = grp_CAT_I_I_I_O_fu_260_w_digits_data_V_we0;
    end else begin
        p_res_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        res_digits_data_V_ce0 = 1'b1;
    end else begin
        res_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln364_reg_582_pp2_iter1_reg == 1'd0))) begin
        res_digits_data_V_we0 = 1'b1;
    end else begin
        res_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z0_digits_data_V_address0 = zext_ln59_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z0_digits_data_V_address0 = grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_address0;
    end else begin
        z0_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z0_digits_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z0_digits_data_V_ce0 = grp_CAT_I_I_I_O_fu_260_x0_digits_data_V_ce0;
    end else begin
        z0_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        z1_digits_data_V_address0 = zext_ln81_reg_536_pp1_iter3_reg;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z1_digits_data_V_address0 = grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_address0;
    end else begin
        z1_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        z1_digits_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z1_digits_data_V_ce0 = grp_CAT_I_I_I_O_fu_260_x1_digits_data_V_ce0;
    end else begin
        z1_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_527_pp1_iter3_reg == 1'd0))) begin
        z1_digits_data_V_we0 = 1'b1;
    end else begin
        z1_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z2_digits_data_V_address0 = zext_ln59_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z2_digits_data_V_address0 = grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_address0;
    end else begin
        z2_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z2_digits_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z2_digits_data_V_ce0 = grp_CAT_I_I_I_O_fu_260_x2_digits_data_V_ce0;
    end else begin
        z2_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln54_fu_271_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln54_fu_271_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_i_fu_352_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_i_fu_352_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_CAT_I_I_I_O_fu_260_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln364_fu_439_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln364_fu_439_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add2_tmp_bits_fu_347_p2 = (add_ln64_fu_342_p2 + z2_tmp_bits_read);

assign add_ln209_14_fu_306_p2 = (z2_digits_data_V_loa_reg_501 + zext_ln700_16_fu_296_p1);

assign add_ln209_5_fu_311_p2 = (add_ln209_14_fu_306_p2 + z0_digits_data_V_loa_reg_495);

assign add_ln64_fu_342_p2 = (zext_ln64_fu_338_p1 + z0_tmp_bits_read);

assign add_ln700_15_fu_414_p2 = (trunc_ln701_fu_398_p1 + select_ln701_3_fu_390_p3);

assign add_ln700_fu_300_p2 = (zext_ln209_fu_293_p1 + zext_ln54_fu_289_p1);

assign add_ln96_fu_428_p2 = (cross_mul_tmp_bits_read + p_neg207_i_fu_420_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign cross_mul_digits_data_V_address0 = zext_ln81_fu_364_p1;

assign exitcond_i_fu_352_p2 = ((i_0_i11_reg_238 == 7'd64) ? 1'b1 : 1'b0);

assign grp_CAT_I_I_I_O_fu_260_ap_start = grp_CAT_I_I_I_O_fu_260_ap_start_reg;

assign i_31_fu_358_p2 = (i_0_i11_reg_238 + 7'd1);

assign i_32_fu_445_p2 = (i5_0_reg_249 + 8'd1);

assign i_fu_277_p2 = (ap_phi_mux_i_0_i_phi_fu_219_p4 + 7'd1);

assign icmp_ln364_fu_439_p2 = ((i5_0_reg_249 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_271_p2 = ((ap_phi_mux_i_0_i_phi_fu_219_p4 == 7'd64) ? 1'b1 : 1'b0);

assign p_neg207_i_fu_420_p3 = ((op2_assign_reg_226[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign res_digits_data_V_address0 = zext_ln367_reg_591_pp2_iter1_reg;

assign res_digits_data_V_d0 = p_res_digits_data_V_l_reg_601;

assign select_ln701_3_fu_390_p3 = ((ap_phi_mux_op2_assign_phi_fu_230_p4[0:0] === 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln701_fu_382_p3 = ((ap_phi_mux_op2_assign_phi_fu_230_p4[0:0] === 1'b1) ? 65'd36893488147419103231 : 65'd0);

assign tmp_V_25_fu_376_p2 = (zext_ln180_fu_370_p1 - zext_ln701_fu_373_p1);

assign tmp_V_26_fu_401_p2 = (select_ln701_fu_382_p3 + tmp_V_25_reg_561);

assign tmp_V_fu_322_p2 = (zext_ln700_17_fu_319_p1 + zext_ln700_fu_316_p1);

assign trunc_ln701_fu_398_p1 = tmp_V_25_reg_561[63:0];

assign z1_tmp_bits_fu_433_p2 = (add_ln96_fu_428_p2 - add2_tmp_bits_reg_522);

assign zext_ln180_fu_370_p1 = cross_mul_digits_dat_5_reg_551;

assign zext_ln209_fu_293_p1 = z0_digits_data_V_loa_reg_495;

assign zext_ln367_fu_451_p1 = i5_0_reg_249;

assign zext_ln54_fu_289_p1 = p_088_0_i_reg_203;

assign zext_ln59_fu_283_p1 = ap_phi_mux_i_0_i_phi_fu_219_p4;

assign zext_ln64_fu_338_p1 = p_088_0_i_reg_203;

assign zext_ln700_16_fu_296_p1 = p_088_0_i_reg_203;

assign zext_ln700_17_fu_319_p1 = add_ln700_reg_507;

assign zext_ln700_fu_316_p1 = z2_digits_data_V_loa_reg_501;

assign zext_ln701_fu_373_p1 = add2_digits_data_V_l_reg_556;

assign zext_ln81_fu_364_p1 = i_0_i11_reg_238;

always @ (posedge ap_clk) begin
    zext_ln59_reg_480[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln59_reg_480_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_536[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_536_pp1_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_536_pp1_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_536_pp1_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln367_reg_591[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln367_reg_591_pp2_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //karastuba_mul_ADD_SU
