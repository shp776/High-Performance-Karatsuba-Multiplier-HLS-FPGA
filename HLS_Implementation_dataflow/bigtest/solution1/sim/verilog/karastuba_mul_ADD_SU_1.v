// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module karastuba_mul_ADD_SU_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        z0_tmp_bits_read,
        z0_digits_data_address0,
        z0_digits_data_ce0,
        z0_digits_data_q0,
        z2_tmp_bits_read,
        z2_digits_data_address0,
        z2_digits_data_ce0,
        z2_digits_data_q0,
        cross_mul_tmp_bits_read,
        cross_mul_digits_data_address0,
        cross_mul_digits_data_ce0,
        cross_mul_digits_data_q0,
        lhs_tmp_bits_read,
        lhs_digits_data_address0,
        lhs_digits_data_ce0,
        lhs_digits_data_q0,
        rhs_tmp_bits_read,
        rhs_digits_data_address0,
        rhs_digits_data_ce0,
        rhs_digits_data_q0,
        res_tmp_bits,
        res_tmp_bits_ap_vld,
        res_digits_data_address0,
        res_digits_data_ce0,
        res_digits_data_we0,
        res_digits_data_d0
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_pp0_stage0 = 20'd2;
parameter    ap_ST_fsm_pp0_stage1 = 20'd4;
parameter    ap_ST_fsm_state6 = 20'd8;
parameter    ap_ST_fsm_pp1_stage0 = 20'd16;
parameter    ap_ST_fsm_state12 = 20'd32;
parameter    ap_ST_fsm_state13 = 20'd64;
parameter    ap_ST_fsm_pp2_stage0 = 20'd128;
parameter    ap_ST_fsm_pp2_stage1 = 20'd256;
parameter    ap_ST_fsm_state18 = 20'd512;
parameter    ap_ST_fsm_pp3_stage0 = 20'd1024;
parameter    ap_ST_fsm_pp3_stage1 = 20'd2048;
parameter    ap_ST_fsm_state23 = 20'd4096;
parameter    ap_ST_fsm_state24 = 20'd8192;
parameter    ap_ST_fsm_state25 = 20'd16384;
parameter    ap_ST_fsm_state26 = 20'd32768;
parameter    ap_ST_fsm_state27 = 20'd65536;
parameter    ap_ST_fsm_state28 = 20'd131072;
parameter    ap_ST_fsm_pp4_stage0 = 20'd262144;
parameter    ap_ST_fsm_state32 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] z0_tmp_bits_read;
output  [4:0] z0_digits_data_address0;
output   z0_digits_data_ce0;
input  [31:0] z0_digits_data_q0;
input  [31:0] z2_tmp_bits_read;
output  [4:0] z2_digits_data_address0;
output   z2_digits_data_ce0;
input  [31:0] z2_digits_data_q0;
input  [31:0] cross_mul_tmp_bits_read;
output  [4:0] cross_mul_digits_data_address0;
output   cross_mul_digits_data_ce0;
input  [31:0] cross_mul_digits_data_q0;
input  [31:0] lhs_tmp_bits_read;
output  [4:0] lhs_digits_data_address0;
output   lhs_digits_data_ce0;
input  [31:0] lhs_digits_data_q0;
input  [31:0] rhs_tmp_bits_read;
output  [4:0] rhs_digits_data_address0;
output   rhs_digits_data_ce0;
input  [31:0] rhs_digits_data_q0;
output  [31:0] res_tmp_bits;
output   res_tmp_bits_ap_vld;
output  [5:0] res_digits_data_address0;
output   res_digits_data_ce0;
output   res_digits_data_we0;
output  [31:0] res_digits_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] z0_digits_data_address0;
reg z0_digits_data_ce0;
reg[4:0] z2_digits_data_address0;
reg z2_digits_data_ce0;
reg cross_mul_digits_data_ce0;
reg lhs_digits_data_ce0;
reg rhs_digits_data_ce0;
reg res_tmp_bits_ap_vld;
reg res_digits_data_ce0;
reg res_digits_data_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] tmp_0_i_reg_278;
reg   [5:0] i_0_i_reg_290;
reg   [0:0] needDown_0_i_reg_301;
reg   [5:0] i_0_i11_reg_313;
reg   [1:0] tmp_0_reg_324;
reg   [5:0] i_0_reg_336;
reg   [6:0] j_0_reg_347;
reg   [1:0] tmp2_0_reg_371;
reg   [5:0] i3_0_reg_383;
reg   [6:0] j4_0_reg_394;
reg   [6:0] i5_0_reg_415;
wire   [31:0] p_res_digits_data_q0;
reg   [31:0] reg_437;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state15_pp2_stage1_iter0;
wire    ap_block_state17_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] icmp_ln338_reg_963;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state20_pp3_stage1_iter0;
wire    ap_block_state22_pp3_stage1_iter1;
wire    ap_block_pp3_stage1_11001;
reg   [0:0] icmp_ln352_reg_1018;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state29_pp4_stage0_iter0;
wire    ap_block_state30_pp4_stage0_iter1;
wire    ap_block_state31_pp4_stage0_iter2;
wire    ap_block_pp4_stage0_11001;
reg   [0:0] icmp_ln364_reg_1078;
reg    ap_block_state1;
wire   [0:0] icmp_ln54_fu_442_p2;
reg   [0:0] icmp_ln54_reg_848;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln54_reg_848_pp0_iter1_reg;
wire   [5:0] i_36_fu_448_p2;
reg   [5:0] i_36_reg_852;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln59_fu_454_p1;
reg   [63:0] zext_ln59_reg_857;
reg   [63:0] zext_ln59_reg_857_pp0_iter1_reg;
reg   [31:0] z0_digits_data_load_reg_872;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] z2_digits_data_load_reg_878;
wire   [32:0] add_ln59_fu_471_p2;
reg   [32:0] add_ln59_reg_884;
wire   [31:0] add_ln61_fu_482_p2;
reg   [31:0] add_ln61_reg_889;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] add2_tmp_bits_fu_518_p2;
reg   [31:0] add2_tmp_bits_reg_899;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_i_fu_523_p2;
reg   [0:0] exitcond_i_reg_904;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_i_reg_904_pp1_iter1_reg;
reg   [0:0] exitcond_i_reg_904_pp1_iter2_reg;
reg   [0:0] exitcond_i_reg_904_pp1_iter3_reg;
wire   [5:0] i_37_fu_529_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln81_fu_535_p1;
reg   [63:0] zext_ln81_reg_913;
reg   [63:0] zext_ln81_reg_913_pp1_iter1_reg;
reg   [63:0] zext_ln81_reg_913_pp1_iter2_reg;
reg   [63:0] zext_ln81_reg_913_pp1_iter3_reg;
reg   [31:0] cross_mul_digits_dat_6_reg_928;
wire   [31:0] add2_digits_data_q0;
reg   [31:0] add2_digits_data_loa_reg_933;
reg    ap_enable_reg_pp1_iter1;
wire   [32:0] tmp_25_fu_547_p2;
reg   [32:0] tmp_25_reg_938;
reg   [0:0] tmp_27_reg_944;
reg    ap_enable_reg_pp1_iter3;
wire   [31:0] add_ln88_fu_585_p2;
reg   [31:0] add_ln88_reg_949;
wire   [31:0] z1_tmp_bits_fu_604_p2;
reg   [31:0] z1_tmp_bits_reg_954;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln334_fu_610_p2;
reg   [0:0] icmp_ln334_reg_959;
wire    ap_CS_fsm_state13;
wire    grp_CAT_I_I_I_O_1_fu_426_ap_ready;
wire    grp_CAT_I_I_I_O_1_fu_426_ap_done;
wire   [0:0] icmp_ln338_fu_615_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state14_pp2_stage0_iter0;
wire    ap_block_state16_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln338_reg_963_pp2_iter1_reg;
wire   [5:0] i_fu_621_p2;
reg   [5:0] i_reg_967;
reg   [5:0] p_res_digits_data_add_reg_977;
reg   [5:0] p_res_digits_data_add_reg_977_pp2_iter1_reg;
reg   [31:0] lhs_digits_data_load_reg_982;
wire   [6:0] j_fu_637_p2;
reg   [6:0] j_reg_988;
wire   [32:0] tmp_31_fu_654_p2;
reg   [32:0] tmp_31_reg_993;
wire   [31:0] add_ln343_fu_666_p2;
reg   [31:0] add_ln343_reg_998;
reg    ap_enable_reg_pp2_iter1;
wire   [2:0] zext_ln348_fu_694_p1;
reg   [2:0] zext_ln348_reg_1008;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln348_fu_698_p2;
reg   [0:0] icmp_ln348_reg_1014;
wire   [0:0] icmp_ln352_fu_703_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state19_pp3_stage0_iter0;
wire    ap_block_state21_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln352_reg_1018_pp3_iter1_reg;
wire   [5:0] i_38_fu_709_p2;
reg   [5:0] i_38_reg_1022;
reg   [5:0] p_res_digits_data_add_3_reg_1032;
reg   [5:0] p_res_digits_data_add_3_reg_1032_pp3_iter1_reg;
reg   [31:0] rhs_digits_data_load_reg_1037;
wire   [6:0] j_5_fu_725_p2;
reg   [6:0] j_5_reg_1043;
wire   [32:0] tmp_32_fu_742_p2;
reg   [32:0] tmp_32_reg_1048;
wire   [31:0] add_ln357_fu_754_p2;
reg   [31:0] add_ln357_reg_1053;
reg    ap_enable_reg_pp3_iter1;
wire   [2:0] p_res_tmp_bits_fu_786_p2;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_791_p2;
reg   [31:0] mul_ln362_reg_1068;
wire    ap_CS_fsm_state27;
wire   [31:0] p_res_tmp_bits_3_fu_799_p2;
reg   [31:0] p_res_tmp_bits_3_reg_1073;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln364_fu_804_p2;
reg   [0:0] icmp_ln364_reg_1078_pp4_iter1_reg;
wire   [6:0] i_39_fu_810_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [63:0] zext_ln367_fu_816_p1;
reg   [63:0] zext_ln367_reg_1087;
reg   [63:0] zext_ln367_reg_1087_pp4_iter1_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state14;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state19;
wire    ap_block_pp3_stage1_subdone;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state29;
reg    ap_enable_reg_pp4_iter2;
reg   [4:0] add2_digits_data_address0;
reg    add2_digits_data_ce0;
reg    add2_digits_data_we0;
reg   [4:0] z1_digits_data_address0;
reg    z1_digits_data_ce0;
reg    z1_digits_data_we0;
wire   [31:0] z1_digits_data_q0;
reg   [5:0] p_res_digits_data_address0;
reg    p_res_digits_data_ce0;
reg    p_res_digits_data_we0;
reg   [31:0] p_res_digits_data_d0;
wire    grp_CAT_I_I_I_O_1_fu_426_ap_start;
wire    grp_CAT_I_I_I_O_1_fu_426_ap_idle;
wire   [4:0] grp_CAT_I_I_I_O_1_fu_426_x0_digits_data_address0;
wire    grp_CAT_I_I_I_O_1_fu_426_x0_digits_data_ce0;
wire   [4:0] grp_CAT_I_I_I_O_1_fu_426_x1_digits_data_address0;
wire    grp_CAT_I_I_I_O_1_fu_426_x1_digits_data_ce0;
wire   [4:0] grp_CAT_I_I_I_O_1_fu_426_x2_digits_data_address0;
wire    grp_CAT_I_I_I_O_1_fu_426_x2_digits_data_ce0;
wire   [5:0] grp_CAT_I_I_I_O_1_fu_426_w_digits_data_address0;
wire    grp_CAT_I_I_I_O_1_fu_426_w_digits_data_ce0;
wire    grp_CAT_I_I_I_O_1_fu_426_w_digits_data_we0;
wire   [31:0] grp_CAT_I_I_I_O_1_fu_426_w_digits_data_d0;
reg   [5:0] ap_phi_mux_i_0_i_phi_fu_294_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_needDown_0_i_phi_fu_305_p4;
wire    ap_block_pp1_stage0;
reg   [5:0] ap_phi_mux_i_0_phi_fu_340_p4;
wire    ap_block_pp2_stage0;
reg   [6:0] ap_phi_mux_j_0_phi_fu_351_p4;
reg   [1:0] ap_phi_mux_p_res_tmp_bits_0_phi_fu_363_p4;
reg   [1:0] p_res_tmp_bits_0_reg_359;
reg   [5:0] ap_phi_mux_i3_0_phi_fu_387_p4;
wire    ap_block_pp3_stage0;
reg   [6:0] ap_phi_mux_j4_0_phi_fu_398_p4;
reg   [2:0] p_res_tmp_bits_1_reg_406;
reg    grp_CAT_I_I_I_O_1_fu_426_ap_start_reg;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln341_2_fu_627_p1;
wire   [63:0] zext_ln342_fu_632_p1;
wire   [63:0] zext_ln355_2_fu_715_p1;
wire   [63:0] zext_ln356_fu_720_p1;
wire    ap_block_pp4_stage0;
wire    ap_CS_fsm_state32;
wire    ap_block_pp2_stage1;
wire    ap_block_pp3_stage1;
wire   [32:0] zext_ln60_fu_464_p1;
wire   [32:0] zext_ln54_fu_460_p1;
wire   [31:0] zext_ln59_12_fu_467_p1;
wire   [31:0] add_ln61_9_fu_477_p2;
wire   [33:0] zext_ln59_13_fu_490_p1;
wire   [33:0] zext_ln59_11_fu_487_p1;
wire   [33:0] tmp_24_fu_493_p2;
wire   [31:0] zext_ln64_fu_509_p1;
wire   [31:0] add_ln64_fu_513_p2;
wire   [32:0] zext_ln81_2_fu_541_p1;
wire   [32:0] zext_ln82_fu_544_p1;
wire   [32:0] select_ln83_fu_553_p3;
wire   [32:0] tmp_26_fu_572_p2;
wire   [31:0] trunc_ln83_fu_569_p1;
wire   [31:0] select_ln83_3_fu_561_p3;
wire   [31:0] p_neg2_i_fu_591_p3;
wire   [31:0] add_ln96_fu_599_p2;
wire  signed [31:0] icmp_ln334_fu_610_p0;
wire   [32:0] zext_ln341_fu_647_p1;
wire   [32:0] zext_ln338_fu_643_p1;
wire   [31:0] zext_ln341_6_fu_650_p1;
wire   [31:0] add_ln343_2_fu_660_p2;
wire   [33:0] zext_ln341_7_fu_675_p1;
wire   [33:0] zext_ln341_5_fu_671_p1;
wire   [33:0] tmp_fu_678_p2;
wire  signed [31:0] icmp_ln348_fu_698_p0;
wire   [32:0] zext_ln355_fu_735_p1;
wire   [32:0] zext_ln352_fu_731_p1;
wire   [31:0] zext_ln355_6_fu_738_p1;
wire   [31:0] add_ln357_2_fu_748_p2;
wire   [33:0] zext_ln355_7_fu_763_p1;
wire   [33:0] zext_ln355_5_fu_759_p1;
wire   [33:0] tmp_30_fu_766_p2;
wire   [2:0] zext_ln360_fu_782_p1;
wire   [31:0] zext_ln362_fu_795_p1;
reg   [19:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 20'd1;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 grp_CAT_I_I_I_O_1_fu_426_ap_start_reg = 1'b0;
end

karastuba_mul_ADDrcU #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
add2_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(add2_digits_data_address0),
    .ce0(add2_digits_data_ce0),
    .we0(add2_digits_data_we0),
    .d0(add_ln61_reg_889),
    .q0(add2_digits_data_q0)
);

karastuba_mul_ADDrcU #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
z1_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(z1_digits_data_address0),
    .ce0(z1_digits_data_ce0),
    .we0(z1_digits_data_we0),
    .d0(add_ln88_reg_949),
    .q0(z1_digits_data_q0)
);

karastuba_mul_ADDNgs #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
p_res_digits_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_res_digits_data_address0),
    .ce0(p_res_digits_data_ce0),
    .we0(p_res_digits_data_we0),
    .d0(p_res_digits_data_d0),
    .q0(p_res_digits_data_q0)
);

CAT_I_I_I_O_1 grp_CAT_I_I_I_O_1_fu_426(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_CAT_I_I_I_O_1_fu_426_ap_start),
    .ap_done(grp_CAT_I_I_I_O_1_fu_426_ap_done),
    .ap_idle(grp_CAT_I_I_I_O_1_fu_426_ap_idle),
    .ap_ready(grp_CAT_I_I_I_O_1_fu_426_ap_ready),
    .x0_digits_data_address0(grp_CAT_I_I_I_O_1_fu_426_x0_digits_data_address0),
    .x0_digits_data_ce0(grp_CAT_I_I_I_O_1_fu_426_x0_digits_data_ce0),
    .x0_digits_data_q0(z0_digits_data_q0),
    .x1_tmp_bits_read(z1_tmp_bits_reg_954),
    .x1_digits_data_address0(grp_CAT_I_I_I_O_1_fu_426_x1_digits_data_address0),
    .x1_digits_data_ce0(grp_CAT_I_I_I_O_1_fu_426_x1_digits_data_ce0),
    .x1_digits_data_q0(z1_digits_data_q0),
    .x2_digits_data_address0(grp_CAT_I_I_I_O_1_fu_426_x2_digits_data_address0),
    .x2_digits_data_ce0(grp_CAT_I_I_I_O_1_fu_426_x2_digits_data_ce0),
    .x2_digits_data_q0(z2_digits_data_q0),
    .w_digits_data_address0(grp_CAT_I_I_I_O_1_fu_426_w_digits_data_address0),
    .w_digits_data_ce0(grp_CAT_I_I_I_O_1_fu_426_w_digits_data_ce0),
    .w_digits_data_we0(grp_CAT_I_I_I_O_1_fu_426_w_digits_data_we0),
    .w_digits_data_d0(grp_CAT_I_I_I_O_1_fu_426_w_digits_data_d0),
    .w_digits_data_q0(p_res_digits_data_q0)
);

karastuba_mul_mulsc4 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
karastuba_mul_mulsc4_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_tmp_bits_read),
    .din1(rhs_tmp_bits_read),
    .ce(1'b1),
    .dout(grp_fu_791_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln334_fu_610_p2 == 1'd0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln334_fu_610_p2 == 1'd0))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln348_fu_698_p2 == 1'd0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln348_fu_698_p2 == 1'd0))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state29)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state29);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_CAT_I_I_I_O_1_fu_426_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_CAT_I_I_I_O_1_fu_426_ap_start_reg <= 1'b1;
        end else if ((grp_CAT_I_I_I_O_1_fu_426_ap_ready == 1'b1)) begin
            grp_CAT_I_I_I_O_1_fu_426_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln348_fu_698_p2 == 1'd0))) begin
        i3_0_reg_383 <= 6'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln352_reg_1018 == 1'd0))) begin
        i3_0_reg_383 <= i_38_reg_1022;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln364_fu_804_p2 == 1'd0))) begin
        i5_0_reg_415 <= i_39_fu_810_p2;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        i5_0_reg_415 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i11_reg_313 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_fu_523_p2 == 1'd0))) begin
        i_0_i11_reg_313 <= i_37_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_290 <= 6'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_848 == 1'd0))) begin
        i_0_i_reg_290 <= i_36_reg_852;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln334_fu_610_p2 == 1'd0))) begin
        i_0_reg_336 <= 6'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln338_reg_963 == 1'd0))) begin
        i_0_reg_336 <= i_reg_967;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln348_fu_698_p2 == 1'd0))) begin
        j4_0_reg_394 <= 7'd32;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln352_reg_1018 == 1'd0))) begin
        j4_0_reg_394 <= j_5_reg_1043;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln334_fu_610_p2 == 1'd0))) begin
        j_0_reg_347 <= 7'd32;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln338_reg_963 == 1'd0))) begin
        j_0_reg_347 <= j_reg_988;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        needDown_0_i_reg_301 <= 1'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1) & (exitcond_i_reg_904_pp1_iter3_reg == 1'd0))) begin
        needDown_0_i_reg_301 <= tmp_27_reg_944;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln334_reg_959 == 1'd0))) begin
        p_res_tmp_bits_0_reg_359 <= tmp_0_reg_324;
    end else if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (icmp_ln334_fu_610_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        p_res_tmp_bits_0_reg_359 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln348_reg_1014 == 1'd0))) begin
        p_res_tmp_bits_1_reg_406 <= p_res_tmp_bits_fu_786_p2;
    end else if (((icmp_ln348_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        p_res_tmp_bits_1_reg_406 <= zext_ln348_fu_694_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln348_fu_698_p2 == 1'd0))) begin
        tmp2_0_reg_371 <= 2'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln352_reg_1018_pp3_iter1_reg == 1'd0))) begin
        tmp2_0_reg_371 <= {{tmp_30_fu_766_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_0_i_reg_278 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln54_reg_848_pp0_iter1_reg == 1'd0))) begin
        tmp_0_i_reg_278 <= {{tmp_24_fu_493_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln334_fu_610_p2 == 1'd0))) begin
        tmp_0_reg_324 <= 2'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln338_reg_963_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        tmp_0_reg_324 <= {{tmp_fu_678_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_reg_904 == 1'd0))) begin
        add2_digits_data_loa_reg_933 <= add2_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add2_tmp_bits_reg_899 <= add2_tmp_bits_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln338_reg_963 == 1'd0))) begin
        add_ln343_reg_998 <= add_ln343_fu_666_p2;
        tmp_31_reg_993 <= tmp_31_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln352_reg_1018 == 1'd0))) begin
        add_ln357_reg_1053 <= add_ln357_fu_754_p2;
        tmp_32_reg_1048 <= tmp_32_fu_742_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_848 == 1'd0))) begin
        add_ln59_reg_884 <= add_ln59_fu_471_p2;
        add_ln61_reg_889 <= add_ln61_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_904_pp1_iter2_reg == 1'd0))) begin
        add_ln88_reg_949 <= add_ln88_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_reg_904 == 1'd0))) begin
        cross_mul_digits_dat_6_reg_928 <= cross_mul_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_i_reg_904 <= exitcond_i_fu_523_p2;
        exitcond_i_reg_904_pp1_iter1_reg <= exitcond_i_reg_904;
        zext_ln81_reg_913_pp1_iter1_reg[5 : 0] <= zext_ln81_reg_913[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        exitcond_i_reg_904_pp1_iter2_reg <= exitcond_i_reg_904_pp1_iter1_reg;
        exitcond_i_reg_904_pp1_iter3_reg <= exitcond_i_reg_904_pp1_iter2_reg;
        zext_ln81_reg_913_pp1_iter2_reg[5 : 0] <= zext_ln81_reg_913_pp1_iter1_reg[5 : 0];
        zext_ln81_reg_913_pp1_iter3_reg[5 : 0] <= zext_ln81_reg_913_pp1_iter2_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_36_reg_852 <= i_36_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        i_38_reg_1022 <= i_38_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_reg_967 <= i_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        icmp_ln334_reg_959 <= icmp_ln334_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln338_reg_963 <= icmp_ln338_fu_615_p2;
        icmp_ln338_reg_963_pp2_iter1_reg <= icmp_ln338_reg_963;
        p_res_digits_data_add_reg_977_pp2_iter1_reg <= p_res_digits_data_add_reg_977;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        icmp_ln348_reg_1014 <= icmp_ln348_fu_698_p2;
        zext_ln348_reg_1008[1 : 0] <= zext_ln348_fu_694_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln352_reg_1018 <= icmp_ln352_fu_703_p2;
        icmp_ln352_reg_1018_pp3_iter1_reg <= icmp_ln352_reg_1018;
        p_res_digits_data_add_3_reg_1032_pp3_iter1_reg <= p_res_digits_data_add_3_reg_1032;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln364_reg_1078 <= icmp_ln364_fu_804_p2;
        icmp_ln364_reg_1078_pp4_iter1_reg <= icmp_ln364_reg_1078;
        zext_ln367_reg_1087_pp4_iter1_reg[6 : 0] <= zext_ln367_reg_1087[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln54_reg_848 <= icmp_ln54_fu_442_p2;
        icmp_ln54_reg_848_pp0_iter1_reg <= icmp_ln54_reg_848;
        zext_ln59_reg_857_pp0_iter1_reg[5 : 0] <= zext_ln59_reg_857[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln352_reg_1018 == 1'd0))) begin
        j_5_reg_1043 <= j_5_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln338_reg_963 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        j_reg_988 <= j_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln338_reg_963 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        lhs_digits_data_load_reg_982 <= lhs_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        mul_ln362_reg_1068 <= grp_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln352_fu_703_p2 == 1'd0))) begin
        p_res_digits_data_add_3_reg_1032 <= zext_ln356_fu_720_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln338_fu_615_p2 == 1'd0))) begin
        p_res_digits_data_add_reg_977 <= zext_ln342_fu_632_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        p_res_tmp_bits_3_reg_1073 <= p_res_tmp_bits_3_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln364_reg_1078 == 1'd0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln352_reg_1018 == 1'd0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln338_reg_963 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        reg_437 <= p_res_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln352_reg_1018 == 1'd0))) begin
        rhs_digits_data_load_reg_1037 <= rhs_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_904_pp1_iter1_reg == 1'd0))) begin
        tmp_25_reg_938 <= tmp_25_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (exitcond_i_reg_904_pp1_iter2_reg == 1'd0))) begin
        tmp_27_reg_944 <= tmp_26_fu_572_p2[32'd32];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln54_reg_848 == 1'd0))) begin
        z0_digits_data_load_reg_872 <= z0_digits_data_q0;
        z2_digits_data_load_reg_878 <= z2_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        z1_tmp_bits_reg_954 <= z1_tmp_bits_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln364_fu_804_p2 == 1'd0))) begin
        zext_ln367_reg_1087[6 : 0] <= zext_ln367_fu_816_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_442_p2 == 1'd0))) begin
        zext_ln59_reg_857[5 : 0] <= zext_ln59_fu_454_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_fu_523_p2 == 1'd0))) begin
        zext_ln81_reg_913[5 : 0] <= zext_ln81_fu_535_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add2_digits_data_address0 = zext_ln81_fu_535_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add2_digits_data_address0 = zext_ln59_reg_857_pp0_iter1_reg;
    end else begin
        add2_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        add2_digits_data_ce0 = 1'b1;
    end else begin
        add2_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln54_reg_848_pp0_iter1_reg == 1'd0))) begin
        add2_digits_data_we0 = 1'b1;
    end else begin
        add2_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_442_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_523_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln338_fu_615_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln352_fu_703_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln364_fu_804_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln352_reg_1018 == 1'd0))) begin
        ap_phi_mux_i3_0_phi_fu_387_p4 = i_38_reg_1022;
    end else begin
        ap_phi_mux_i3_0_phi_fu_387_p4 = i3_0_reg_383;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_reg_848 == 1'd0))) begin
        ap_phi_mux_i_0_i_phi_fu_294_p4 = i_36_reg_852;
    end else begin
        ap_phi_mux_i_0_i_phi_fu_294_p4 = i_0_i_reg_290;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln338_reg_963 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_340_p4 = i_reg_967;
    end else begin
        ap_phi_mux_i_0_phi_fu_340_p4 = i_0_reg_336;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln352_reg_1018 == 1'd0))) begin
        ap_phi_mux_j4_0_phi_fu_398_p4 = j_5_reg_1043;
    end else begin
        ap_phi_mux_j4_0_phi_fu_398_p4 = j4_0_reg_394;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln338_reg_963 == 1'd0))) begin
        ap_phi_mux_j_0_phi_fu_351_p4 = j_reg_988;
    end else begin
        ap_phi_mux_j_0_phi_fu_351_p4 = j_0_reg_347;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (exitcond_i_reg_904_pp1_iter3_reg == 1'd0))) begin
        ap_phi_mux_needDown_0_i_phi_fu_305_p4 = tmp_27_reg_944;
    end else begin
        ap_phi_mux_needDown_0_i_phi_fu_305_p4 = needDown_0_i_reg_301;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln334_reg_959 == 1'd0))) begin
        ap_phi_mux_p_res_tmp_bits_0_phi_fu_363_p4 = tmp_0_reg_324;
    end else begin
        ap_phi_mux_p_res_tmp_bits_0_phi_fu_363_p4 = p_res_tmp_bits_0_reg_359;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cross_mul_digits_data_ce0 = 1'b1;
    end else begin
        cross_mul_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        lhs_digits_data_ce0 = 1'b1;
    end else begin
        lhs_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        p_res_digits_data_address0 = zext_ln367_fu_816_p1;
    end else if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        p_res_digits_data_address0 = p_res_digits_data_add_3_reg_1032_pp3_iter1_reg;
    end else if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        p_res_digits_data_address0 = zext_ln356_fu_720_p1;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        p_res_digits_data_address0 = p_res_digits_data_add_reg_977_pp2_iter1_reg;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        p_res_digits_data_address0 = zext_ln342_fu_632_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_res_digits_data_address0 = grp_CAT_I_I_I_O_1_fu_426_w_digits_data_address0;
    end else begin
        p_res_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        p_res_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_res_digits_data_ce0 = grp_CAT_I_I_I_O_1_fu_426_w_digits_data_ce0;
    end else begin
        p_res_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        p_res_digits_data_d0 = add_ln357_reg_1053;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        p_res_digits_data_d0 = add_ln343_reg_998;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_res_digits_data_d0 = grp_CAT_I_I_I_O_1_fu_426_w_digits_data_d0;
    end else begin
        p_res_digits_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln352_reg_1018_pp3_iter1_reg == 1'd0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln338_reg_963_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        p_res_digits_data_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_res_digits_data_we0 = grp_CAT_I_I_I_O_1_fu_426_w_digits_data_we0;
    end else begin
        p_res_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        res_digits_data_ce0 = 1'b1;
    end else begin
        res_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln364_reg_1078_pp4_iter1_reg == 1'd0))) begin
        res_digits_data_we0 = 1'b1;
    end else begin
        res_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        res_tmp_bits_ap_vld = 1'b1;
    end else begin
        res_tmp_bits_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        rhs_digits_data_ce0 = 1'b1;
    end else begin
        rhs_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z0_digits_data_address0 = zext_ln59_fu_454_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z0_digits_data_address0 = grp_CAT_I_I_I_O_1_fu_426_x0_digits_data_address0;
    end else begin
        z0_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        z0_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z0_digits_data_ce0 = grp_CAT_I_I_I_O_1_fu_426_x0_digits_data_ce0;
    end else begin
        z0_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        z1_digits_data_address0 = zext_ln81_reg_913_pp1_iter3_reg;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z1_digits_data_address0 = grp_CAT_I_I_I_O_1_fu_426_x1_digits_data_address0;
    end else begin
        z1_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        z1_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z1_digits_data_ce0 = grp_CAT_I_I_I_O_1_fu_426_x1_digits_data_ce0;
    end else begin
        z1_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1) & (exitcond_i_reg_904_pp1_iter3_reg == 1'd0))) begin
        z1_digits_data_we0 = 1'b1;
    end else begin
        z1_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z2_digits_data_address0 = zext_ln59_fu_454_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z2_digits_data_address0 = grp_CAT_I_I_I_O_1_fu_426_x2_digits_data_address0;
    end else begin
        z2_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        z2_digits_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z2_digits_data_ce0 = grp_CAT_I_I_I_O_1_fu_426_x2_digits_data_ce0;
    end else begin
        z2_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_442_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_442_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_i_fu_523_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_i_fu_523_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln334_fu_610_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((grp_CAT_I_I_I_O_1_fu_426_ap_done == 1'b1) & (icmp_ln334_fu_610_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln338_fu_615_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln338_fu_615_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b0)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln348_fu_698_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln352_fu_703_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln352_fu_703_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b0)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln364_fu_804_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln364_fu_804_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add2_tmp_bits_fu_518_p2 = (add_ln64_fu_513_p2 + z2_tmp_bits_read);

assign add_ln343_2_fu_660_p2 = (reg_437 + zext_ln341_6_fu_650_p1);

assign add_ln343_fu_666_p2 = (add_ln343_2_fu_660_p2 + lhs_digits_data_load_reg_982);

assign add_ln357_2_fu_748_p2 = (reg_437 + zext_ln355_6_fu_738_p1);

assign add_ln357_fu_754_p2 = (add_ln357_2_fu_748_p2 + rhs_digits_data_load_reg_1037);

assign add_ln59_fu_471_p2 = (zext_ln60_fu_464_p1 + zext_ln54_fu_460_p1);

assign add_ln61_9_fu_477_p2 = (z2_digits_data_load_reg_878 + zext_ln59_12_fu_467_p1);

assign add_ln61_fu_482_p2 = (add_ln61_9_fu_477_p2 + z0_digits_data_load_reg_872);

assign add_ln64_fu_513_p2 = (zext_ln64_fu_509_p1 + z0_tmp_bits_read);

assign add_ln88_fu_585_p2 = (trunc_ln83_fu_569_p1 + select_ln83_3_fu_561_p3);

assign add_ln96_fu_599_p2 = (cross_mul_tmp_bits_read + p_neg2_i_fu_591_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign cross_mul_digits_data_address0 = zext_ln81_fu_535_p1;

assign exitcond_i_fu_523_p2 = ((i_0_i11_reg_313 == 6'd32) ? 1'b1 : 1'b0);

assign grp_CAT_I_I_I_O_1_fu_426_ap_start = grp_CAT_I_I_I_O_1_fu_426_ap_start_reg;

assign i_36_fu_448_p2 = (ap_phi_mux_i_0_i_phi_fu_294_p4 + 6'd1);

assign i_37_fu_529_p2 = (i_0_i11_reg_313 + 6'd1);

assign i_38_fu_709_p2 = (ap_phi_mux_i3_0_phi_fu_387_p4 + 6'd1);

assign i_39_fu_810_p2 = (i5_0_reg_415 + 7'd1);

assign i_fu_621_p2 = (ap_phi_mux_i_0_phi_fu_340_p4 + 6'd1);

assign icmp_ln334_fu_610_p0 = rhs_tmp_bits_read;

assign icmp_ln334_fu_610_p2 = ((icmp_ln334_fu_610_p0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_615_p2 = ((ap_phi_mux_i_0_phi_fu_340_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln348_fu_698_p0 = lhs_tmp_bits_read;

assign icmp_ln348_fu_698_p2 = ((icmp_ln348_fu_698_p0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln352_fu_703_p2 = ((ap_phi_mux_i3_0_phi_fu_387_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln364_fu_804_p2 = ((i5_0_reg_415 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_442_p2 = ((ap_phi_mux_i_0_i_phi_fu_294_p4 == 6'd32) ? 1'b1 : 1'b0);

assign j_5_fu_725_p2 = (j4_0_reg_394 + 7'd1);

assign j_fu_637_p2 = (j_0_reg_347 + 7'd1);

assign lhs_digits_data_address0 = zext_ln341_2_fu_627_p1;

assign p_neg2_i_fu_591_p3 = ((needDown_0_i_reg_301[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign p_res_tmp_bits_3_fu_799_p2 = (mul_ln362_reg_1068 + zext_ln362_fu_795_p1);

assign p_res_tmp_bits_fu_786_p2 = (zext_ln348_reg_1008 + zext_ln360_fu_782_p1);

assign res_digits_data_address0 = zext_ln367_reg_1087_pp4_iter1_reg;

assign res_digits_data_d0 = reg_437;

assign res_tmp_bits = p_res_tmp_bits_3_reg_1073;

assign rhs_digits_data_address0 = zext_ln355_2_fu_715_p1;

assign select_ln83_3_fu_561_p3 = ((ap_phi_mux_needDown_0_i_phi_fu_305_p4[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln83_fu_553_p3 = ((ap_phi_mux_needDown_0_i_phi_fu_305_p4[0:0] === 1'b1) ? 33'd8589934591 : 33'd0);

assign tmp_24_fu_493_p2 = (zext_ln59_13_fu_490_p1 + zext_ln59_11_fu_487_p1);

assign tmp_25_fu_547_p2 = (zext_ln81_2_fu_541_p1 - zext_ln82_fu_544_p1);

assign tmp_26_fu_572_p2 = (select_ln83_fu_553_p3 + tmp_25_reg_938);

assign tmp_30_fu_766_p2 = (zext_ln355_7_fu_763_p1 + zext_ln355_5_fu_759_p1);

assign tmp_31_fu_654_p2 = (zext_ln341_fu_647_p1 + zext_ln338_fu_643_p1);

assign tmp_32_fu_742_p2 = (zext_ln355_fu_735_p1 + zext_ln352_fu_731_p1);

assign tmp_fu_678_p2 = (zext_ln341_7_fu_675_p1 + zext_ln341_5_fu_671_p1);

assign trunc_ln83_fu_569_p1 = tmp_25_reg_938[31:0];

assign z1_tmp_bits_fu_604_p2 = (add_ln96_fu_599_p2 - add2_tmp_bits_reg_899);

assign zext_ln338_fu_643_p1 = tmp_0_reg_324;

assign zext_ln341_2_fu_627_p1 = ap_phi_mux_i_0_phi_fu_340_p4;

assign zext_ln341_5_fu_671_p1 = reg_437;

assign zext_ln341_6_fu_650_p1 = tmp_0_reg_324;

assign zext_ln341_7_fu_675_p1 = tmp_31_reg_993;

assign zext_ln341_fu_647_p1 = lhs_digits_data_load_reg_982;

assign zext_ln342_fu_632_p1 = ap_phi_mux_j_0_phi_fu_351_p4;

assign zext_ln348_fu_694_p1 = ap_phi_mux_p_res_tmp_bits_0_phi_fu_363_p4;

assign zext_ln352_fu_731_p1 = tmp2_0_reg_371;

assign zext_ln355_2_fu_715_p1 = ap_phi_mux_i3_0_phi_fu_387_p4;

assign zext_ln355_5_fu_759_p1 = reg_437;

assign zext_ln355_6_fu_738_p1 = tmp2_0_reg_371;

assign zext_ln355_7_fu_763_p1 = tmp_32_reg_1048;

assign zext_ln355_fu_735_p1 = rhs_digits_data_load_reg_1037;

assign zext_ln356_fu_720_p1 = ap_phi_mux_j4_0_phi_fu_398_p4;

assign zext_ln360_fu_782_p1 = tmp2_0_reg_371;

assign zext_ln362_fu_795_p1 = p_res_tmp_bits_1_reg_406;

assign zext_ln367_fu_816_p1 = i5_0_reg_415;

assign zext_ln54_fu_460_p1 = tmp_0_i_reg_278;

assign zext_ln59_11_fu_487_p1 = z2_digits_data_load_reg_878;

assign zext_ln59_12_fu_467_p1 = tmp_0_i_reg_278;

assign zext_ln59_13_fu_490_p1 = add_ln59_reg_884;

assign zext_ln59_fu_454_p1 = ap_phi_mux_i_0_i_phi_fu_294_p4;

assign zext_ln60_fu_464_p1 = z0_digits_data_load_reg_872;

assign zext_ln64_fu_509_p1 = tmp_0_i_reg_278;

assign zext_ln81_2_fu_541_p1 = cross_mul_digits_dat_6_reg_928;

assign zext_ln81_fu_535_p1 = i_0_i11_reg_313;

assign zext_ln82_fu_544_p1 = add2_digits_data_loa_reg_933;

always @ (posedge ap_clk) begin
    zext_ln59_reg_857[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln59_reg_857_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_913[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_913_pp1_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_913_pp1_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_913_pp1_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln348_reg_1008[2] <= 1'b0;
    zext_ln367_reg_1087[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln367_reg_1087_pp4_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //karastuba_mul_ADD_SU_1
