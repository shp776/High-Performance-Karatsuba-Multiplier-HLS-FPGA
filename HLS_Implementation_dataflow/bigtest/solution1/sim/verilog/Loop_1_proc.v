// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lhs_digits_data_address0,
        lhs_digits_data_ce0,
        lhs_digits_data_we0,
        lhs_digits_data_d0,
        hs_input_TDATA,
        hs_input_TVALID,
        hs_input_TREADY,
        rhs_digits_data_address0,
        rhs_digits_data_ce0,
        rhs_digits_data_we0,
        rhs_digits_data_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [6:0] lhs_digits_data_address0;
output   lhs_digits_data_ce0;
output   lhs_digits_data_we0;
output  [31:0] lhs_digits_data_d0;
input  [31:0] hs_input_TDATA;
input   hs_input_TVALID;
output   hs_input_TREADY;
output  [6:0] rhs_digits_data_address0;
output   rhs_digits_data_ce0;
output   rhs_digits_data_we0;
output  [31:0] rhs_digits_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg lhs_digits_data_ce0;
reg lhs_digits_data_we0;
reg hs_input_TREADY;
reg rhs_digits_data_ce0;
reg rhs_digits_data_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    hs_input_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln412_fu_98_p2;
reg   [8:0] i_0_i_i_reg_87;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_104_p2;
wire   [0:0] icmp_ln416_fu_120_p2;
reg   [0:0] icmp_ln416_reg_150;
reg   [31:0] hs_input_read_reg_154;
wire   [8:0] add_ln419_fu_131_p2;
reg   [8:0] add_ln419_reg_159;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln417_fu_126_p1;
wire   [63:0] zext_ln419_fu_137_p1;
wire   [1:0] tmp_42_fu_110_p4;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_hs_input_U_apdone_blk;
wire   [31:0] hs_input_TDATA_int;
wire    hs_input_TVALID_int;
reg    hs_input_TREADY_int;
wire    regslice_both_hs_input_U_ack_in;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_hs_input_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(hs_input_TDATA),
    .vld_in(hs_input_TVALID),
    .ack_in(regslice_both_hs_input_U_ack_in),
    .data_out(hs_input_TDATA_int),
    .vld_out(hs_input_TVALID_int),
    .ack_out(hs_input_TREADY_int),
    .apdone_blk(regslice_both_hs_input_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln412_fu_98_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_i_reg_87 <= i_fu_104_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_87 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln416_fu_120_p2 == 1'd0) & (icmp_ln412_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln419_reg_159 <= add_ln419_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln412_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hs_input_read_reg_154 <= hs_input_TDATA_int;
        icmp_ln416_reg_150 <= icmp_ln416_fu_120_p2;
    end
end

always @ (*) begin
    if ((icmp_ln412_fu_98_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln412_fu_98_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hs_input_TDATA_blk_n = hs_input_TVALID_int;
    end else begin
        hs_input_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((hs_input_TVALID == 1'b1) & (regslice_both_hs_input_U_ack_in == 1'b1))) begin
        hs_input_TREADY = 1'b1;
    end else begin
        hs_input_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln412_fu_98_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hs_input_TREADY_int = 1'b1;
    end else begin
        hs_input_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_digits_data_ce0 = 1'b1;
    end else begin
        lhs_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln416_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln412_fu_98_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_digits_data_we0 = 1'b1;
    end else begin
        lhs_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rhs_digits_data_ce0 = 1'b1;
    end else begin
        rhs_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln416_reg_150 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rhs_digits_data_we0 = 1'b1;
    end else begin
        rhs_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln412_fu_98_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln412_fu_98_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln419_fu_131_p2 = ($signed(i_0_i_i_reg_87) + $signed(9'd384));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln412_fu_98_p2 == 1'd0) & (hs_input_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln412_fu_98_p2 == 1'd0) & (hs_input_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln412_fu_98_p2 == 1'd0) & (hs_input_TVALID_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_104_p2 = (i_0_i_i_reg_87 + 9'd1);

assign icmp_ln412_fu_98_p2 = ((i_0_i_i_reg_87 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln416_fu_120_p2 = ((tmp_42_fu_110_p4 == 2'd0) ? 1'b1 : 1'b0);

assign lhs_digits_data_address0 = zext_ln417_fu_126_p1;

assign lhs_digits_data_d0 = hs_input_TDATA_int;

assign rhs_digits_data_address0 = zext_ln419_fu_137_p1;

assign rhs_digits_data_d0 = hs_input_read_reg_154;

assign tmp_42_fu_110_p4 = {{i_0_i_i_reg_87[8:7]}};

assign zext_ln417_fu_126_p1 = i_0_i_i_reg_87;

assign zext_ln419_fu_137_p1 = add_ln419_reg_159;

endmodule //Loop_1_proc
