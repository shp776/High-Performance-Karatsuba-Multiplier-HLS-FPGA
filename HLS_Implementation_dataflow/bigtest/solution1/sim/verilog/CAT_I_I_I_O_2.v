// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CAT_I_I_I_O_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x0_digits_data_address0,
        x0_digits_data_ce0,
        x0_digits_data_q0,
        x1_tmp_bits_read,
        x1_digits_data_address0,
        x1_digits_data_ce0,
        x1_digits_data_q0,
        x2_digits_data_address0,
        x2_digits_data_ce0,
        x2_digits_data_q0,
        w_digits_data_address0,
        w_digits_data_ce0,
        w_digits_data_we0,
        w_digits_data_d0,
        w_digits_data_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_pp0_stage0 = 13'd16;
parameter    ap_ST_fsm_pp0_stage1 = 13'd32;
parameter    ap_ST_fsm_state9 = 13'd64;
parameter    ap_ST_fsm_state10 = 13'd128;
parameter    ap_ST_fsm_state11 = 13'd256;
parameter    ap_ST_fsm_state12 = 13'd512;
parameter    ap_ST_fsm_pp1_stage0 = 13'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 13'd2048;
parameter    ap_ST_fsm_state17 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] x0_digits_data_address0;
output   x0_digits_data_ce0;
input  [31:0] x0_digits_data_q0;
input  [31:0] x1_tmp_bits_read;
output  [3:0] x1_digits_data_address0;
output   x1_digits_data_ce0;
input  [31:0] x1_digits_data_q0;
output  [3:0] x2_digits_data_address0;
output   x2_digits_data_ce0;
input  [31:0] x2_digits_data_q0;
output  [4:0] w_digits_data_address0;
output   w_digits_data_ce0;
output   w_digits_data_we0;
output  [31:0] w_digits_data_d0;
input  [31:0] w_digits_data_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x0_digits_data_ce0;
reg x1_digits_data_ce0;
reg x2_digits_data_ce0;
reg[4:0] w_digits_data_address0;
reg w_digits_data_ce0;
reg w_digits_data_we0;
reg[31:0] w_digits_data_d0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] tmp_0_reg_175;
reg   [4:0] j1_0_reg_187;
reg   [4:0] i2_0_reg_199;
reg   [1:0] tmp_1_reg_210;
reg   [5:0] j1_1_reg_222;
reg   [4:0] i3_0_reg_234;
reg   [31:0] reg_245;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln175_reg_488;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state14_pp1_stage1_iter0;
wire    ap_block_state16_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln191_reg_543;
wire   [5:0] j_fu_260_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln168_fu_249_p2;
wire   [0:0] icmp_ln170_fu_266_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] i_fu_272_p2;
reg   [4:0] i_reg_473;
wire   [63:0] zext_ln170_fu_278_p1;
reg   [63:0] zext_ln170_reg_478;
wire   [0:0] icmp_ln175_fu_283_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln175_reg_488_pp0_iter1_reg;
wire   [4:0] i_46_fu_289_p2;
reg   [4:0] i_46_reg_492;
reg   [4:0] w_digits_data_addr_11_reg_502;
reg   [4:0] w_digits_data_addr_11_reg_502_pp0_iter1_reg;
reg   [31:0] x1_digits_data_load_reg_507;
wire   [4:0] j_9_fu_305_p2;
reg   [4:0] j_9_reg_513;
wire   [32:0] tmp_53_fu_322_p2;
reg   [32:0] tmp_53_reg_518;
wire   [31:0] add_ln182_fu_334_p2;
reg   [31:0] add_ln182_reg_523;
reg    ap_enable_reg_pp0_iter1;
wire   [4:0] w_digits_data_addr_10_reg_533;
wire    ap_CS_fsm_state9;
wire   [31:0] add_ln186_2_fu_371_p2;
reg   [31:0] add_ln186_2_reg_538;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln191_fu_377_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state15_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln191_reg_543_pp1_iter1_reg;
wire   [4:0] i_47_fu_383_p2;
reg   [4:0] i_47_reg_547;
reg   [4:0] w_digits_data_addr_12_reg_557;
reg   [4:0] w_digits_data_addr_12_reg_557_pp1_iter1_reg;
reg   [31:0] x2_digits_data_load_reg_562;
wire   [5:0] j_10_fu_399_p2;
reg   [5:0] j_10_reg_568;
wire   [32:0] tmp_54_fu_416_p2;
reg   [32:0] tmp_54_reg_573;
wire   [31:0] add_ln198_fu_428_p2;
reg   [31:0] add_ln198_reg_578;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state12;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
wire    ap_block_pp1_stage1_subdone;
reg   [5:0] j_0_reg_153;
reg   [4:0] i_0_reg_164;
wire    ap_CS_fsm_state4;
reg   [4:0] ap_phi_mux_j1_0_phi_fu_191_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_i2_0_phi_fu_203_p4;
reg   [5:0] ap_phi_mux_j1_1_phi_fu_226_p4;
wire    ap_block_pp1_stage0;
reg   [4:0] ap_phi_mux_i3_0_phi_fu_238_p4;
wire   [63:0] zext_ln168_fu_255_p1;
wire   [63:0] zext_ln180_3_fu_295_p1;
wire   [63:0] zext_ln181_fu_300_p1;
wire   [63:0] zext_ln196_3_fu_389_p1;
wire   [63:0] zext_ln197_fu_394_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp1_stage1;
wire   [32:0] zext_ln180_fu_315_p1;
wire   [32:0] zext_ln175_fu_311_p1;
wire   [31:0] zext_ln180_6_fu_318_p1;
wire   [31:0] add_ln182_2_fu_328_p2;
wire   [33:0] zext_ln180_7_fu_343_p1;
wire   [33:0] zext_ln180_5_fu_339_p1;
wire   [33:0] tmp_fu_346_p2;
wire   [31:0] zext_ln186_fu_362_p1;
wire   [31:0] add_ln186_fu_366_p2;
wire   [32:0] zext_ln196_fu_409_p1;
wire   [32:0] zext_ln191_fu_405_p1;
wire   [31:0] zext_ln196_6_fu_412_p1;
wire   [31:0] add_ln198_2_fu_422_p2;
wire   [33:0] zext_ln196_7_fu_437_p1;
wire   [33:0] zext_ln196_5_fu_433_p1;
wire   [33:0] tmp_52_fu_440_p2;
wire    ap_CS_fsm_state17;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_266_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_266_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_266_p2 == 1'd1))) begin
        i2_0_reg_199 <= 5'd0;
    end else if (((icmp_ln175_reg_488 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i2_0_reg_199 <= i_46_reg_492;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_reg_543 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i3_0_reg_234 <= i_47_reg_547;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i3_0_reg_234 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln168_fu_249_p2 == 1'd1))) begin
        i_0_reg_164 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_164 <= i_reg_473;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_266_p2 == 1'd1))) begin
        j1_0_reg_187 <= 5'd8;
    end else if (((icmp_ln175_reg_488 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j1_0_reg_187 <= j_9_reg_513;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_reg_543 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j1_1_reg_222 <= j_10_reg_568;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j1_1_reg_222 <= 6'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_153 <= j_fu_260_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_153 <= 6'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_266_p2 == 1'd1))) begin
        tmp_0_reg_175 <= 2'd0;
    end else if (((icmp_ln175_reg_488_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_0_reg_175 <= {{tmp_fu_346_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_reg_543_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        tmp_1_reg_210 <= {{tmp_52_fu_440_p2[33:32]}};
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_1_reg_210 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_reg_488 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln182_reg_523 <= add_ln182_fu_334_p2;
        tmp_53_reg_518 <= tmp_53_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln186_2_reg_538 <= add_ln186_2_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_reg_543 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln198_reg_578 <= add_ln198_fu_428_p2;
        tmp_54_reg_573 <= tmp_54_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_46_reg_492 <= i_46_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_47_reg_547 <= i_47_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_473 <= i_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln175_reg_488 <= icmp_ln175_fu_283_p2;
        icmp_ln175_reg_488_pp0_iter1_reg <= icmp_ln175_reg_488;
        w_digits_data_addr_11_reg_502_pp0_iter1_reg <= w_digits_data_addr_11_reg_502;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln191_reg_543 <= icmp_ln191_fu_377_p2;
        icmp_ln191_reg_543_pp1_iter1_reg <= icmp_ln191_reg_543;
        w_digits_data_addr_12_reg_557_pp1_iter1_reg <= w_digits_data_addr_12_reg_557;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_reg_543 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        j_10_reg_568 <= j_10_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_reg_488 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_9_reg_513 <= j_9_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((icmp_ln175_reg_488 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln191_reg_543 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        reg_245 <= w_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_digits_data_addr_11_reg_502 <= zext_ln181_fu_300_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_377_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        w_digits_data_addr_12_reg_557 <= zext_ln197_fu_394_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_reg_488 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x1_digits_data_load_reg_507 <= x1_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        x2_digits_data_load_reg_562 <= x2_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln170_reg_478[4 : 0] <= zext_ln170_fu_278_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln175_fu_283_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln191_fu_377_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln175_reg_488 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i2_0_phi_fu_203_p4 = i_46_reg_492;
    end else begin
        ap_phi_mux_i2_0_phi_fu_203_p4 = i2_0_reg_199;
    end
end

always @ (*) begin
    if (((icmp_ln191_reg_543 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i3_0_phi_fu_238_p4 = i_47_reg_547;
    end else begin
        ap_phi_mux_i3_0_phi_fu_238_p4 = i3_0_reg_234;
    end
end

always @ (*) begin
    if (((icmp_ln175_reg_488 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j1_0_phi_fu_191_p4 = j_9_reg_513;
    end else begin
        ap_phi_mux_j1_0_phi_fu_191_p4 = j1_0_reg_187;
    end
end

always @ (*) begin
    if (((icmp_ln191_reg_543 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_j1_1_phi_fu_226_p4 = j_10_reg_568;
    end else begin
        ap_phi_mux_j1_1_phi_fu_226_p4 = j1_1_reg_222;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        w_digits_data_address0 = w_digits_data_addr_12_reg_557_pp1_iter1_reg;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_digits_data_address0 = zext_ln197_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        w_digits_data_address0 = w_digits_data_addr_10_reg_533;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w_digits_data_address0 = 64'd24;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_digits_data_address0 = w_digits_data_addr_11_reg_502_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_digits_data_address0 = zext_ln181_fu_300_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        w_digits_data_address0 = zext_ln170_reg_478;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_digits_data_address0 = zext_ln168_fu_255_p1;
    end else begin
        w_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        w_digits_data_ce0 = 1'b1;
    end else begin
        w_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        w_digits_data_d0 = add_ln198_reg_578;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        w_digits_data_d0 = add_ln186_2_reg_538;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_digits_data_d0 = add_ln182_reg_523;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        w_digits_data_d0 = x0_digits_data_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_digits_data_d0 = 32'd0;
    end else begin
        w_digits_data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln175_reg_488_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln168_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln191_reg_543_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        w_digits_data_we0 = 1'b1;
    end else begin
        w_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x0_digits_data_ce0 = 1'b1;
    end else begin
        x0_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x1_digits_data_ce0 = 1'b1;
    end else begin
        x1_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        x2_digits_data_ce0 = 1'b1;
    end else begin
        x2_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln168_fu_249_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_266_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln175_fu_283_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln175_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln191_fu_377_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln191_fu_377_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln182_2_fu_328_p2 = (reg_245 + zext_ln180_6_fu_318_p1);

assign add_ln182_fu_334_p2 = (add_ln182_2_fu_328_p2 + x1_digits_data_load_reg_507);

assign add_ln186_2_fu_371_p2 = (add_ln186_fu_366_p2 + reg_245);

assign add_ln186_fu_366_p2 = (zext_ln186_fu_362_p1 + x1_tmp_bits_read);

assign add_ln198_2_fu_422_p2 = (reg_245 + zext_ln196_6_fu_412_p1);

assign add_ln198_fu_428_p2 = (add_ln198_2_fu_422_p2 + x2_digits_data_load_reg_562);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i_46_fu_289_p2 = (ap_phi_mux_i2_0_phi_fu_203_p4 + 5'd1);

assign i_47_fu_383_p2 = (ap_phi_mux_i3_0_phi_fu_238_p4 + 5'd1);

assign i_fu_272_p2 = (i_0_reg_164 + 5'd1);

assign icmp_ln168_fu_249_p2 = ((j_0_reg_153 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_266_p2 = ((i_0_reg_164 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln175_fu_283_p2 = ((ap_phi_mux_i2_0_phi_fu_203_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_377_p2 = ((ap_phi_mux_i3_0_phi_fu_238_p4 == 5'd16) ? 1'b1 : 1'b0);

assign j_10_fu_399_p2 = (j1_1_reg_222 + 6'd1);

assign j_9_fu_305_p2 = (j1_0_reg_187 + 5'd1);

assign j_fu_260_p2 = (j_0_reg_153 + 6'd1);

assign tmp_52_fu_440_p2 = (zext_ln196_7_fu_437_p1 + zext_ln196_5_fu_433_p1);

assign tmp_53_fu_322_p2 = (zext_ln180_fu_315_p1 + zext_ln175_fu_311_p1);

assign tmp_54_fu_416_p2 = (zext_ln196_fu_409_p1 + zext_ln191_fu_405_p1);

assign tmp_fu_346_p2 = (zext_ln180_7_fu_343_p1 + zext_ln180_5_fu_339_p1);

assign w_digits_data_addr_10_reg_533 = 64'd24;

assign x0_digits_data_address0 = zext_ln170_fu_278_p1;

assign x1_digits_data_address0 = zext_ln180_3_fu_295_p1;

assign x2_digits_data_address0 = zext_ln196_3_fu_389_p1;

assign zext_ln168_fu_255_p1 = j_0_reg_153;

assign zext_ln170_fu_278_p1 = i_0_reg_164;

assign zext_ln175_fu_311_p1 = tmp_0_reg_175;

assign zext_ln180_3_fu_295_p1 = ap_phi_mux_i2_0_phi_fu_203_p4;

assign zext_ln180_5_fu_339_p1 = reg_245;

assign zext_ln180_6_fu_318_p1 = tmp_0_reg_175;

assign zext_ln180_7_fu_343_p1 = tmp_53_reg_518;

assign zext_ln180_fu_315_p1 = x1_digits_data_load_reg_507;

assign zext_ln181_fu_300_p1 = ap_phi_mux_j1_0_phi_fu_191_p4;

assign zext_ln186_fu_362_p1 = tmp_0_reg_175;

assign zext_ln191_fu_405_p1 = tmp_1_reg_210;

assign zext_ln196_3_fu_389_p1 = ap_phi_mux_i3_0_phi_fu_238_p4;

assign zext_ln196_5_fu_433_p1 = reg_245;

assign zext_ln196_6_fu_412_p1 = tmp_1_reg_210;

assign zext_ln196_7_fu_437_p1 = tmp_54_reg_573;

assign zext_ln196_fu_409_p1 = x2_digits_data_load_reg_562;

assign zext_ln197_fu_394_p1 = ap_phi_mux_j1_1_phi_fu_226_p4;

always @ (posedge ap_clk) begin
    zext_ln170_reg_478[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //CAT_I_I_I_O_2
