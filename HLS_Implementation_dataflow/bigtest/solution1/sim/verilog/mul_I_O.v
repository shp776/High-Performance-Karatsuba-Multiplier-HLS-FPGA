// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mul_I_O (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        u_tmp_bits_read,
        u_digits_data_address0,
        u_digits_data_ce0,
        u_digits_data_q0,
        v_tmp_bits_read,
        v_digits_data_address0,
        v_digits_data_ce0,
        v_digits_data_q0,
        w_digits_data_address0,
        w_digits_data_ce0,
        w_digits_data_we0,
        w_digits_data_d0,
        w_digits_data_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_pp0_stage0 = 17'd8;
parameter    ap_ST_fsm_pp0_stage1 = 17'd16;
parameter    ap_ST_fsm_pp0_stage2 = 17'd32;
parameter    ap_ST_fsm_state13 = 17'd64;
parameter    ap_ST_fsm_state14 = 17'd128;
parameter    ap_ST_fsm_state15 = 17'd256;
parameter    ap_ST_fsm_pp1_stage0 = 17'd512;
parameter    ap_ST_fsm_pp1_stage1 = 17'd1024;
parameter    ap_ST_fsm_state19 = 17'd2048;
parameter    ap_ST_fsm_state20 = 17'd4096;
parameter    ap_ST_fsm_pp2_stage0 = 17'd8192;
parameter    ap_ST_fsm_pp2_stage1 = 17'd16384;
parameter    ap_ST_fsm_state24 = 17'd32768;
parameter    ap_ST_fsm_state25 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] u_tmp_bits_read;
output  [2:0] u_digits_data_address0;
output   u_digits_data_ce0;
input  [31:0] u_digits_data_q0;
input  [1:0] v_tmp_bits_read;
output  [2:0] v_digits_data_address0;
output   v_digits_data_ce0;
input  [31:0] v_digits_data_q0;
output  [3:0] w_digits_data_address0;
output   w_digits_data_ce0;
output   w_digits_data_we0;
output  [31:0] w_digits_data_d0;
input  [31:0] w_digits_data_q0;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] u_digits_data_address0;
reg u_digits_data_ce0;
reg[2:0] v_digits_data_address0;
reg v_digits_data_ce0;
reg[3:0] w_digits_data_address0;
reg w_digits_data_ce0;
reg w_digits_data_we0;
reg[31:0] w_digits_data_d0;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] k_1_reg_188;
reg   [3:0] i_0_reg_200;
reg   [3:0] i2_0_reg_212;
reg   [1:0] tmp_0_reg_223;
reg   [4:0] j3_0_reg_235;
reg   [1:0] tmp5_0_reg_259;
reg   [3:0] i6_0_reg_271;
reg   [4:0] j7_0_reg_282;
reg   [31:0] reg_303;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln111_reg_688;
reg   [0:0] icmp_ln111_reg_688_pp0_iter2_reg;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state17_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln133_reg_766;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state22_pp2_stage1_iter0;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] icmp_ln147_reg_810;
wire   [4:0] j_fu_313_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln108_fu_324_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] j_2_fu_330_p2;
reg   [3:0] j_2_reg_674;
reg   [2:0] v_digits_data_addr_reg_679;
wire   [0:0] icmp_ln129_fu_341_p2;
wire   [0:0] icmp_ln111_fu_346_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln111_reg_688_pp0_iter1_reg;
wire   [3:0] add_ln111_fu_352_p2;
reg   [3:0] add_ln111_reg_692;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] add_ln114_fu_363_p2;
reg   [3:0] add_ln114_reg_702;
reg   [3:0] add_ln114_reg_702_pp0_iter1_reg;
reg   [31:0] u_digits_data_load_reg_707;
reg   [31:0] v_digits_data_load_reg_712;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state12_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] grp_fu_375_p2;
reg   [63:0] mul_ln116_reg_727;
reg   [3:0] w_digits_data_addr_1_reg_732;
wire   [63:0] add_ln116_fu_389_p2;
reg   [63:0] add_ln116_reg_737;
wire   [31:0] trunc_ln116_fu_394_p1;
reg   [31:0] trunc_ln116_reg_742;
wire   [0:0] icmp_ln121_fu_423_p2;
reg   [0:0] icmp_ln121_reg_752;
wire    ap_CS_fsm_state13;
reg   [3:0] w_digits_data_addr_3_reg_756;
reg   [31:0] w_digits_data_load_reg_761;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln133_fu_446_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state18_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] i_fu_452_p2;
reg   [3:0] i_reg_770;
reg   [3:0] w_digits_data_addr_2_reg_780;
wire   [32:0] tmp_6_fu_480_p2;
reg   [32:0] tmp_6_reg_785;
wire   [4:0] j_1_fu_499_p2;
reg   [4:0] j_1_reg_790;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] zext_ln143_fu_528_p1;
reg   [2:0] zext_ln143_reg_800;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln143_fu_532_p2;
wire   [0:0] icmp_ln147_fu_537_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state21_pp2_stage0_iter0;
wire    ap_block_state23_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [3:0] i_1_fu_543_p2;
reg   [3:0] i_1_reg_814;
reg   [3:0] w_digits_data_addr_4_reg_824;
wire   [32:0] tmp_7_fu_571_p2;
reg   [32:0] tmp_7_reg_829;
wire   [4:0] j_3_fu_590_p2;
reg   [4:0] j_3_reg_834;
reg    ap_enable_reg_pp2_iter1;
wire   [2:0] add_ln155_fu_623_p2;
wire    ap_CS_fsm_state24;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state16;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state21;
wire    ap_block_pp2_stage1_subdone;
reg   [4:0] j_0_reg_165;
wire   [0:0] icmp_ln105_fu_307_p2;
reg   [3:0] j1_0_reg_176;
wire    ap_CS_fsm_state15;
reg   [3:0] ap_phi_mux_i_0_phi_fu_204_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i2_0_phi_fu_216_p4;
wire    ap_block_pp1_stage0;
reg   [4:0] ap_phi_mux_j3_0_phi_fu_239_p4;
reg   [1:0] w_tmp_bits_0_reg_247;
wire    ap_CS_fsm_state19;
wire    ap_block_pp2_stage0;
reg   [3:0] ap_phi_mux_i6_0_phi_fu_275_p4;
reg   [4:0] ap_phi_mux_j7_0_phi_fu_286_p4;
reg   [2:0] w_tmp_bits_1_reg_294;
wire   [63:0] zext_ln105_fu_319_p1;
wire   [63:0] zext_ln116_3_fu_336_p1;
wire   [63:0] zext_ln116_4_fu_358_p1;
wire   [63:0] zext_ln116_5_fu_381_p1;
wire   [63:0] zext_ln123_fu_435_p1;
wire   [63:0] zext_ln136_fu_458_p1;
wire   [63:0] zext_ln137_fu_463_p1;
wire   [63:0] zext_ln150_fu_549_p1;
wire   [63:0] zext_ln151_fu_554_p1;
wire   [31:0] add_ln117_fu_407_p2;
wire    ap_block_pp0_stage2;
wire   [31:0] add_ln124_fu_440_p2;
wire   [31:0] add_ln138_fu_492_p2;
wire    ap_block_pp1_stage1;
wire   [31:0] add_ln152_fu_583_p2;
wire    ap_block_pp2_stage1;
wire    ap_block_pp0_stage1;
wire   [31:0] grp_fu_375_p0;
wire   [31:0] grp_fu_375_p1;
wire   [63:0] zext_ln111_fu_385_p1;
wire   [63:0] zext_ln116_2_fu_398_p1;
wire   [63:0] k_fu_402_p2;
wire   [3:0] xor_ln123_fu_429_p2;
wire   [32:0] zext_ln136_1_fu_472_p1;
wire   [32:0] zext_ln133_fu_468_p1;
wire   [31:0] zext_ln136_3_fu_476_p1;
wire   [31:0] add_ln138_1_fu_486_p2;
wire   [33:0] zext_ln136_4_fu_509_p1;
wire   [33:0] zext_ln136_2_fu_505_p1;
wire   [33:0] tmp_fu_512_p2;
wire   [32:0] zext_ln150_1_fu_563_p1;
wire   [32:0] zext_ln147_fu_559_p1;
wire   [31:0] zext_ln150_3_fu_567_p1;
wire   [31:0] add_ln152_1_fu_577_p2;
wire   [33:0] zext_ln150_4_fu_600_p1;
wire   [33:0] zext_ln150_2_fu_596_p1;
wire   [33:0] tmp_5_fu_603_p2;
wire   [2:0] zext_ln155_fu_619_p1;
wire    ap_CS_fsm_state25;
wire   [1:0] mul_ln157_fu_638_p0;
wire   [1:0] mul_ln157_fu_638_p1;
wire   [3:0] mul_ln157_fu_638_p2;
wire   [3:0] zext_ln157_fu_628_p1;
wire   [3:0] add_ln157_fu_644_p2;
reg   [3:0] ap_return_preg;
reg   [16:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [63:0] grp_fu_375_p00;
wire   [63:0] grp_fu_375_p10;
wire   [3:0] mul_ln157_fu_638_p00;
wire   [3:0] mul_ln157_fu_638_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 4'd0;
end

karastuba_mul_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
karastuba_mul_mulbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_375_p0),
    .din1(grp_fu_375_p1),
    .ce(1'b1),
    .dout(grp_fu_375_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln108_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln108_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln129_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln108_fu_324_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln129_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln108_fu_324_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln143_fu_532_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((icmp_ln143_fu_532_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 4'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_return_preg <= add_ln157_fu_644_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln108_fu_324_p2 == 1'd1))) begin
        i2_0_reg_212 <= 4'd0;
    end else if (((icmp_ln133_reg_766 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i2_0_reg_212 <= i_reg_770;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_532_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        i6_0_reg_271 <= 4'd0;
    end else if (((icmp_ln147_reg_810 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i6_0_reg_271 <= i_1_reg_814;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_200 <= 4'd0;
    end else if (((icmp_ln111_reg_688 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_200 <= add_ln111_reg_692;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_307_p2 == 1'd1))) begin
        j1_0_reg_176 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j1_0_reg_176 <= j_2_reg_674;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln108_fu_324_p2 == 1'd1))) begin
        j3_0_reg_235 <= 5'd8;
    end else if (((icmp_ln133_reg_766 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j3_0_reg_235 <= j_1_reg_790;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_532_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        j7_0_reg_282 <= 5'd8;
    end else if (((icmp_ln147_reg_810 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j7_0_reg_282 <= j_3_reg_834;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_165 <= j_fu_313_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_165 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_1_reg_188 <= 32'd0;
    end else if (((icmp_ln111_reg_688_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        k_1_reg_188 <= {{k_fu_402_p2[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_532_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        tmp5_0_reg_259 <= 2'd0;
    end else if (((icmp_ln147_reg_810 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp5_0_reg_259 <= {{tmp_5_fu_603_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln108_fu_324_p2 == 1'd1))) begin
        tmp_0_reg_223 <= 2'd0;
    end else if (((icmp_ln133_reg_766 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_0_reg_223 <= {{tmp_fu_512_p2[33:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        w_tmp_bits_0_reg_247 <= tmp_0_reg_223;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_341_p2 == 1'd1) & (icmp_ln108_fu_324_p2 == 1'd1))) begin
        w_tmp_bits_0_reg_247 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        w_tmp_bits_1_reg_294 <= add_ln155_fu_623_p2;
    end else if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln143_fu_532_p2 == 1'd1))) begin
        w_tmp_bits_1_reg_294 <= zext_ln143_fu_528_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln111_reg_692 <= add_ln111_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_reg_688 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln114_reg_702 <= add_ln114_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln114_reg_702_pp0_iter1_reg <= add_ln114_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_reg_688_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln116_reg_737 <= add_ln116_fu_389_p2;
        trunc_ln116_reg_742 <= trunc_ln116_fu_394_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_1_reg_814 <= i_1_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_reg_770 <= i_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln111_reg_688 <= icmp_ln111_fu_346_p2;
        icmp_ln111_reg_688_pp0_iter1_reg <= icmp_ln111_reg_688;
        icmp_ln111_reg_688_pp0_iter2_reg <= icmp_ln111_reg_688_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln121_reg_752 <= icmp_ln121_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln133_reg_766 <= icmp_ln133_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln147_reg_810 <= icmp_ln147_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_766 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        j_1_reg_790 <= j_1_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_674 <= j_2_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_reg_810 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        j_3_reg_834 <= j_3_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_reg_688_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln116_reg_727 <= grp_fu_375_p2;
        w_digits_data_addr_1_reg_732 <= zext_ln116_5_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln111_reg_688_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln147_reg_810 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((icmp_ln133_reg_766 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        reg_303 <= w_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_766 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        tmp_6_reg_785 <= tmp_6_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_reg_810 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        tmp_7_reg_829 <= tmp_7_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_reg_688 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        u_digits_data_load_reg_707 <= u_digits_data_q0;
        v_digits_data_load_reg_712 <= v_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v_digits_data_addr_reg_679 <= zext_ln116_3_fu_336_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_446_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        w_digits_data_addr_2_reg_780 <= zext_ln137_fu_463_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        w_digits_data_addr_3_reg_756 <= zext_ln123_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_537_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w_digits_data_addr_4_reg_824 <= zext_ln151_fu_554_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_digits_data_load_reg_761 <= w_digits_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        zext_ln143_reg_800[1 : 0] <= zext_ln143_fu_528_p1[1 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln111_fu_346_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln133_fu_446_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln147_fu_537_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_766 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i2_0_phi_fu_216_p4 = i_reg_770;
    end else begin
        ap_phi_mux_i2_0_phi_fu_216_p4 = i2_0_reg_212;
    end
end

always @ (*) begin
    if (((icmp_ln147_reg_810 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i6_0_phi_fu_275_p4 = i_1_reg_814;
    end else begin
        ap_phi_mux_i6_0_phi_fu_275_p4 = i6_0_reg_271;
    end
end

always @ (*) begin
    if (((icmp_ln111_reg_688 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_204_p4 = add_ln111_reg_692;
    end else begin
        ap_phi_mux_i_0_phi_fu_204_p4 = i_0_reg_200;
    end
end

always @ (*) begin
    if (((icmp_ln133_reg_766 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_j3_0_phi_fu_239_p4 = j_1_reg_790;
    end else begin
        ap_phi_mux_j3_0_phi_fu_239_p4 = j3_0_reg_235;
    end
end

always @ (*) begin
    if (((icmp_ln147_reg_810 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j7_0_phi_fu_286_p4 = j_3_reg_834;
    end else begin
        ap_phi_mux_j7_0_phi_fu_286_p4 = j7_0_reg_282;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_return = add_ln157_fu_644_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        u_digits_data_address0 = zext_ln136_fu_458_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_digits_data_address0 = zext_ln116_4_fu_358_p1;
    end else begin
        u_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        u_digits_data_ce0 = 1'b1;
    end else begin
        u_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        v_digits_data_address0 = zext_ln150_fu_549_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_digits_data_address0 = v_digits_data_addr_reg_679;
    end else begin
        v_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        v_digits_data_ce0 = 1'b1;
    end else begin
        v_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        w_digits_data_address0 = w_digits_data_addr_4_reg_824;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        w_digits_data_address0 = zext_ln151_fu_554_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        w_digits_data_address0 = w_digits_data_addr_2_reg_780;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        w_digits_data_address0 = zext_ln137_fu_463_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        w_digits_data_address0 = w_digits_data_addr_3_reg_756;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_digits_data_address0 = zext_ln123_fu_435_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        w_digits_data_address0 = w_digits_data_addr_1_reg_732;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_digits_data_address0 = zext_ln116_5_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_digits_data_address0 = zext_ln105_fu_319_p1;
    end else begin
        w_digits_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        w_digits_data_ce0 = 1'b1;
    end else begin
        w_digits_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        w_digits_data_d0 = add_ln152_fu_583_p2;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        w_digits_data_d0 = add_ln138_fu_492_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        w_digits_data_d0 = add_ln124_fu_440_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        w_digits_data_d0 = add_ln117_fu_407_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_digits_data_d0 = 32'd0;
    end else begin
        w_digits_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln111_reg_688_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln121_reg_752 == 1'd0) & (1'b1 == ap_CS_fsm_state15)) | ((icmp_ln105_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln147_reg_810 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((icmp_ln133_reg_766 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        w_digits_data_we0 = 1'b1;
    end else begin
        w_digits_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_307_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln129_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln108_fu_324_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_341_p2 == 1'd1) & (icmp_ln108_fu_324_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_fu_346_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_fu_346_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln121_fu_423_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln133_fu_446_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln133_fu_446_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln143_fu_532_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln147_fu_537_p2 == 1'd1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln147_fu_537_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_fu_352_p2 = (ap_phi_mux_i_0_phi_fu_204_p4 + 4'd1);

assign add_ln114_fu_363_p2 = (i_0_reg_200 + j1_0_reg_176);

assign add_ln116_fu_389_p2 = (zext_ln111_fu_385_p1 + mul_ln116_reg_727);

assign add_ln117_fu_407_p2 = (trunc_ln116_reg_742 + reg_303);

assign add_ln124_fu_440_p2 = (w_digits_data_load_reg_761 + k_1_reg_188);

assign add_ln138_1_fu_486_p2 = (w_digits_data_q0 + zext_ln136_3_fu_476_p1);

assign add_ln138_fu_492_p2 = (add_ln138_1_fu_486_p2 + u_digits_data_q0);

assign add_ln152_1_fu_577_p2 = (w_digits_data_q0 + zext_ln150_3_fu_567_p1);

assign add_ln152_fu_583_p2 = (add_ln152_1_fu_577_p2 + v_digits_data_q0);

assign add_ln155_fu_623_p2 = (zext_ln143_reg_800 + zext_ln155_fu_619_p1);

assign add_ln157_fu_644_p2 = (mul_ln157_fu_638_p2 + zext_ln157_fu_628_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign grp_fu_375_p0 = grp_fu_375_p00;

assign grp_fu_375_p00 = u_digits_data_load_reg_707;

assign grp_fu_375_p1 = grp_fu_375_p10;

assign grp_fu_375_p10 = v_digits_data_load_reg_712;

assign i_1_fu_543_p2 = (ap_phi_mux_i6_0_phi_fu_275_p4 + 4'd1);

assign i_fu_452_p2 = (ap_phi_mux_i2_0_phi_fu_216_p4 + 4'd1);

assign icmp_ln105_fu_307_p2 = ((j_0_reg_165 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_324_p2 = ((j1_0_reg_176 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_346_p2 = ((ap_phi_mux_i_0_phi_fu_204_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_423_p2 = ((k_1_reg_188 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_341_p2 = ((v_tmp_bits_read == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_446_p2 = ((ap_phi_mux_i2_0_phi_fu_216_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_532_p2 = ((u_tmp_bits_read == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_537_p2 = ((ap_phi_mux_i6_0_phi_fu_275_p4 == 4'd8) ? 1'b1 : 1'b0);

assign j_1_fu_499_p2 = (j3_0_reg_235 + 5'd1);

assign j_2_fu_330_p2 = (j1_0_reg_176 + 4'd1);

assign j_3_fu_590_p2 = (j7_0_reg_282 + 5'd1);

assign j_fu_313_p2 = (j_0_reg_165 + 5'd1);

assign k_fu_402_p2 = (zext_ln116_2_fu_398_p1 + add_ln116_reg_737);

assign mul_ln157_fu_638_p0 = mul_ln157_fu_638_p00;

assign mul_ln157_fu_638_p00 = v_tmp_bits_read;

assign mul_ln157_fu_638_p1 = mul_ln157_fu_638_p10;

assign mul_ln157_fu_638_p10 = u_tmp_bits_read;

assign mul_ln157_fu_638_p2 = (mul_ln157_fu_638_p0 * mul_ln157_fu_638_p1);

assign tmp_5_fu_603_p2 = (zext_ln150_4_fu_600_p1 + zext_ln150_2_fu_596_p1);

assign tmp_6_fu_480_p2 = (zext_ln136_1_fu_472_p1 + zext_ln133_fu_468_p1);

assign tmp_7_fu_571_p2 = (zext_ln150_1_fu_563_p1 + zext_ln147_fu_559_p1);

assign tmp_fu_512_p2 = (zext_ln136_4_fu_509_p1 + zext_ln136_2_fu_505_p1);

assign trunc_ln116_fu_394_p1 = add_ln116_fu_389_p2[31:0];

assign xor_ln123_fu_429_p2 = (j1_0_reg_176 ^ 4'd8);

assign zext_ln105_fu_319_p1 = j_0_reg_165;

assign zext_ln111_fu_385_p1 = k_1_reg_188;

assign zext_ln116_2_fu_398_p1 = reg_303;

assign zext_ln116_3_fu_336_p1 = j1_0_reg_176;

assign zext_ln116_4_fu_358_p1 = ap_phi_mux_i_0_phi_fu_204_p4;

assign zext_ln116_5_fu_381_p1 = add_ln114_reg_702_pp0_iter1_reg;

assign zext_ln123_fu_435_p1 = xor_ln123_fu_429_p2;

assign zext_ln133_fu_468_p1 = tmp_0_reg_223;

assign zext_ln136_1_fu_472_p1 = u_digits_data_q0;

assign zext_ln136_2_fu_505_p1 = reg_303;

assign zext_ln136_3_fu_476_p1 = tmp_0_reg_223;

assign zext_ln136_4_fu_509_p1 = tmp_6_reg_785;

assign zext_ln136_fu_458_p1 = ap_phi_mux_i2_0_phi_fu_216_p4;

assign zext_ln137_fu_463_p1 = ap_phi_mux_j3_0_phi_fu_239_p4;

assign zext_ln143_fu_528_p1 = w_tmp_bits_0_reg_247;

assign zext_ln147_fu_559_p1 = tmp5_0_reg_259;

assign zext_ln150_1_fu_563_p1 = v_digits_data_q0;

assign zext_ln150_2_fu_596_p1 = reg_303;

assign zext_ln150_3_fu_567_p1 = tmp5_0_reg_259;

assign zext_ln150_4_fu_600_p1 = tmp_7_reg_829;

assign zext_ln150_fu_549_p1 = ap_phi_mux_i6_0_phi_fu_275_p4;

assign zext_ln151_fu_554_p1 = ap_phi_mux_j7_0_phi_fu_286_p4;

assign zext_ln155_fu_619_p1 = tmp5_0_reg_259;

assign zext_ln157_fu_628_p1 = w_tmp_bits_1_reg_294;

always @ (posedge ap_clk) begin
    zext_ln143_reg_800[2] <= 1'b0;
end

endmodule //mul_I_O
